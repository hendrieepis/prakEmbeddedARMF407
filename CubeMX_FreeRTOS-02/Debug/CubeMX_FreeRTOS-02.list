
CubeMX_FreeRTOS-02.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001970  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  08001af8  08001af8  00011af8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001b48  08001b48  00011b48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001b4c  08001b4c  00011b4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000000c  20000000  08001b50  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
  7 .bss          00003da8  2000000c  2000000c  0002000c  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  20003db4  20003db4  0002000c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 10 .debug_line   0000a981  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_info   00015cb3  00000000  00000000  0002a9bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00002e7f  00000000  00000000  00040670  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000aa0  00000000  00000000  000434f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00083d15  00000000  00000000  00043f90  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000df0  00000000  00000000  000c7ca8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_loc    00006f1b  00000000  00000000  000c8a98  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  000158e7  00000000  00000000  000cf9b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007b  00000000  00000000  000e529a  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00001e3c  00000000  00000000  000e5318  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001ae0 	.word	0x08001ae0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08001ae0 	.word	0x08001ae0

080001c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80001c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000200 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80001cc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80001ce:	e003      	b.n	80001d8 <LoopCopyDataInit>

080001d0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80001d0:	4b0c      	ldr	r3, [pc, #48]	; (8000204 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80001d2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80001d4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80001d6:	3104      	adds	r1, #4

080001d8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80001d8:	480b      	ldr	r0, [pc, #44]	; (8000208 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80001da:	4b0c      	ldr	r3, [pc, #48]	; (800020c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80001dc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80001de:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80001e0:	d3f6      	bcc.n	80001d0 <CopyDataInit>
  ldr  r2, =_sbss
 80001e2:	4a0b      	ldr	r2, [pc, #44]	; (8000210 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80001e4:	e002      	b.n	80001ec <LoopFillZerobss>

080001e6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80001e6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80001e8:	f842 3b04 	str.w	r3, [r2], #4

080001ec <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80001ec:	4b09      	ldr	r3, [pc, #36]	; (8000214 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80001ee:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80001f0:	d3f9      	bcc.n	80001e6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80001f2:	f000 f813 	bl	800021c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80001f6:	f001 fc47 	bl	8001a88 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80001fa:	f001 fb81 	bl	8001900 <main>
  bx  lr    
 80001fe:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000200:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000204:	08001b50 	.word	0x08001b50
  ldr  r0, =_sdata
 8000208:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800020c:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8000210:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8000214:	20003db4 	.word	0x20003db4

08000218 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000218:	e7fe      	b.n	8000218 <ADC_IRQHandler>
	...

0800021c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800021c:	490f      	ldr	r1, [pc, #60]	; (800025c <SystemInit+0x40>)
 800021e:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8000222:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000226:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800022a:	4b0d      	ldr	r3, [pc, #52]	; (8000260 <SystemInit+0x44>)
 800022c:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800022e:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 8000230:	f042 0201 	orr.w	r2, r2, #1
 8000234:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8000236:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000238:	681a      	ldr	r2, [r3, #0]
 800023a:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800023e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000242:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000244:	4a07      	ldr	r2, [pc, #28]	; (8000264 <SystemInit+0x48>)
 8000246:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000248:	681a      	ldr	r2, [r3, #0]
 800024a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800024e:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000250:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000252:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000256:	608b      	str	r3, [r1, #8]
#endif
}
 8000258:	4770      	bx	lr
 800025a:	bf00      	nop
 800025c:	e000ed00 	.word	0xe000ed00
 8000260:	40023800 	.word	0x40023800
 8000264:	24003010 	.word	0x24003010

08000268 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000268:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800026a:	4b0b      	ldr	r3, [pc, #44]	; (8000298 <HAL_Init+0x30>)
 800026c:	681a      	ldr	r2, [r3, #0]
 800026e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000272:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8000274:	681a      	ldr	r2, [r3, #0]
 8000276:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800027a:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800027c:	681a      	ldr	r2, [r3, #0]
 800027e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000282:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000284:	2003      	movs	r0, #3
 8000286:	f000 f817 	bl	80002b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800028a:	2000      	movs	r0, #0
 800028c:	f001 fbae 	bl	80019ec <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000290:	f001 fb88 	bl	80019a4 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
}
 8000294:	2000      	movs	r0, #0
 8000296:	bd08      	pop	{r3, pc}
 8000298:	40023c00 	.word	0x40023c00

0800029c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 800029c:	4a02      	ldr	r2, [pc, #8]	; (80002a8 <HAL_IncTick+0xc>)
 800029e:	6813      	ldr	r3, [r2, #0]
 80002a0:	3301      	adds	r3, #1
 80002a2:	6013      	str	r3, [r2, #0]
}
 80002a4:	4770      	bx	lr
 80002a6:	bf00      	nop
 80002a8:	20003d6c 	.word	0x20003d6c

080002ac <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80002ac:	4b01      	ldr	r3, [pc, #4]	; (80002b4 <HAL_GetTick+0x8>)
 80002ae:	6818      	ldr	r0, [r3, #0]
}
 80002b0:	4770      	bx	lr
 80002b2:	bf00      	nop
 80002b4:	20003d6c 	.word	0x20003d6c

080002b8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80002b8:	4a07      	ldr	r2, [pc, #28]	; (80002d8 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80002ba:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80002bc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80002c0:	041b      	lsls	r3, r3, #16
 80002c2:	0c1b      	lsrs	r3, r3, #16
 80002c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80002c8:	0200      	lsls	r0, r0, #8
 80002ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80002ce:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 80002d2:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80002d4:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80002d6:	4770      	bx	lr
 80002d8:	e000ed00 	.word	0xe000ed00

080002dc <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80002dc:	4b17      	ldr	r3, [pc, #92]	; (800033c <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80002de:	b570      	push	{r4, r5, r6, lr}
 80002e0:	68dc      	ldr	r4, [r3, #12]
 80002e2:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80002e6:	f1c4 0507 	rsb	r5, r4, #7
 80002ea:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80002ec:	f104 0304 	add.w	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80002f0:	bf28      	it	cs
 80002f2:	2504      	movcs	r5, #4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002f4:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80002f8:	2b06      	cmp	r3, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002fa:	fa06 f305 	lsl.w	r3, r6, r5
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80002fe:	bf8c      	ite	hi
 8000300:	3c03      	subhi	r4, #3
 8000302:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000304:	ea21 0303 	bic.w	r3, r1, r3
 8000308:	40a3      	lsls	r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800030a:	fa06 f404 	lsl.w	r4, r6, r4
 800030e:	ea22 0404 	bic.w	r4, r2, r4
  if ((int32_t)(IRQn) < 0)
 8000312:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000314:	ea43 0304 	orr.w	r3, r3, r4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000318:	bfa8      	it	ge
 800031a:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
 800031e:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000322:	bfbc      	itt	lt
 8000324:	f000 000f 	andlt.w	r0, r0, #15
 8000328:	4a05      	ldrlt	r2, [pc, #20]	; (8000340 <HAL_NVIC_SetPriority+0x64>)
 800032a:	b2db      	uxtb	r3, r3
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800032c:	bfaa      	itet	ge
 800032e:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000332:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000334:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000338:	bd70      	pop	{r4, r5, r6, pc}
 800033a:	bf00      	nop
 800033c:	e000ed00 	.word	0xe000ed00
 8000340:	e000ed14 	.word	0xe000ed14

08000344 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000344:	0942      	lsrs	r2, r0, #5
 8000346:	2301      	movs	r3, #1
 8000348:	f000 001f 	and.w	r0, r0, #31
 800034c:	fa03 f000 	lsl.w	r0, r3, r0
 8000350:	4b01      	ldr	r3, [pc, #4]	; (8000358 <HAL_NVIC_EnableIRQ+0x14>)
 8000352:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000356:	4770      	bx	lr
 8000358:	e000e100 	.word	0xe000e100

0800035c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800035c:	3801      	subs	r0, #1
 800035e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000362:	d20a      	bcs.n	800037a <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000364:	4b06      	ldr	r3, [pc, #24]	; (8000380 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000366:	4a07      	ldr	r2, [pc, #28]	; (8000384 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000368:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800036a:	21f0      	movs	r1, #240	; 0xf0
 800036c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000370:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000372:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000374:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000376:	601a      	str	r2, [r3, #0]
 8000378:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800037a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop
 8000380:	e000e010 	.word	0xe000e010
 8000384:	e000ed00 	.word	0xe000ed00

08000388 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000388:	4b04      	ldr	r3, [pc, #16]	; (800039c <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800038a:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 800038c:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800038e:	bf0c      	ite	eq
 8000390:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000394:	f022 0204 	bicne.w	r2, r2, #4
 8000398:	601a      	str	r2, [r3, #0]
  }
}
 800039a:	4770      	bx	lr
 800039c:	e000e010 	.word	0xe000e010

080003a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80003a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80003a4:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01U) << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80003a6:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003a8:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 8000564 <HAL_GPIO_Init+0x1c4>
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80003ac:	4a6b      	ldr	r2, [pc, #428]	; (800055c <HAL_GPIO_Init+0x1bc>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80003ae:	f8df 91b8 	ldr.w	r9, [pc, #440]	; 8000568 <HAL_GPIO_Init+0x1c8>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80003b2:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80003b4:	2300      	movs	r3, #0
    ioposition = ((uint32_t)0x01U) << position;
 80003b6:	f04f 0c01 	mov.w	ip, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80003ba:	9c01      	ldr	r4, [sp, #4]
    ioposition = ((uint32_t)0x01U) << position;
 80003bc:	fa0c fc03 	lsl.w	ip, ip, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80003c0:	ea04 060c 	and.w	r6, r4, ip
    if(iocurrent == ioposition)
 80003c4:	45b4      	cmp	ip, r6
 80003c6:	f040 80b2 	bne.w	800052e <HAL_GPIO_Init+0x18e>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80003ca:	684c      	ldr	r4, [r1, #4]
 80003cc:	f024 0710 	bic.w	r7, r4, #16
 80003d0:	2f02      	cmp	r7, #2
 80003d2:	d116      	bne.n	8000402 <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3U];
 80003d4:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 80003d8:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 80003dc:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 80003e0:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 80003e4:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80003e8:	f04f 0e0f 	mov.w	lr, #15
 80003ec:	fa0e fe0b 	lsl.w	lr, lr, fp
 80003f0:	ea25 0e0e 	bic.w	lr, r5, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80003f4:	690d      	ldr	r5, [r1, #16]
 80003f6:	fa05 f50b 	lsl.w	r5, r5, fp
 80003fa:	ea45 050e 	orr.w	r5, r5, lr
        GPIOx->AFR[position >> 3U] = temp;
 80003fe:	f8ca 5020 	str.w	r5, [sl, #32]
 8000402:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000406:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8000408:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800040c:	fa05 f50a 	lsl.w	r5, r5, sl
 8000410:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000412:	f004 0e03 	and.w	lr, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000416:	ea05 0b0b 	and.w	fp, r5, fp
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800041a:	fa0e fe0a 	lsl.w	lr, lr, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800041e:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000420:	ea4e 0e0b 	orr.w	lr, lr, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000424:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 8000426:	f8c0 e000 	str.w	lr, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800042a:	d811      	bhi.n	8000450 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 800042c:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800042e:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000432:	68cf      	ldr	r7, [r1, #12]
 8000434:	fa07 fe0a 	lsl.w	lr, r7, sl
 8000438:	ea4e 070b 	orr.w	r7, lr, fp
        GPIOx->OSPEEDR = temp;
 800043c:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 800043e:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000440:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000444:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8000448:	409f      	lsls	r7, r3
 800044a:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->OTYPER = temp;
 800044e:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8000450:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000452:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000454:	688f      	ldr	r7, [r1, #8]
 8000456:	fa07 f70a 	lsl.w	r7, r7, sl
 800045a:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 800045c:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800045e:	00e5      	lsls	r5, r4, #3
 8000460:	d565      	bpl.n	800052e <HAL_GPIO_Init+0x18e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000462:	f04f 0b00 	mov.w	fp, #0
 8000466:	f8cd b00c 	str.w	fp, [sp, #12]
 800046a:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800046e:	4d3c      	ldr	r5, [pc, #240]	; (8000560 <HAL_GPIO_Init+0x1c0>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000470:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8000474:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 8000478:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 800047c:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8000480:	9703      	str	r7, [sp, #12]
 8000482:	9f03      	ldr	r7, [sp, #12]
 8000484:	f023 0703 	bic.w	r7, r3, #3
 8000488:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 800048c:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8000490:	f003 0e03 	and.w	lr, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8000494:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8000498:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 800049c:	f04f 0c0f 	mov.w	ip, #15
 80004a0:	fa0c fc0e 	lsl.w	ip, ip, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80004a4:	42a8      	cmp	r0, r5
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 80004a6:	ea2a 0c0c 	bic.w	ip, sl, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80004aa:	d047      	beq.n	800053c <HAL_GPIO_Init+0x19c>
 80004ac:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80004b0:	42a8      	cmp	r0, r5
 80004b2:	d045      	beq.n	8000540 <HAL_GPIO_Init+0x1a0>
 80004b4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80004b8:	42a8      	cmp	r0, r5
 80004ba:	d043      	beq.n	8000544 <HAL_GPIO_Init+0x1a4>
 80004bc:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80004c0:	42a8      	cmp	r0, r5
 80004c2:	d041      	beq.n	8000548 <HAL_GPIO_Init+0x1a8>
 80004c4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80004c8:	42a8      	cmp	r0, r5
 80004ca:	d03f      	beq.n	800054c <HAL_GPIO_Init+0x1ac>
 80004cc:	4548      	cmp	r0, r9
 80004ce:	d03f      	beq.n	8000550 <HAL_GPIO_Init+0x1b0>
 80004d0:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80004d4:	42a8      	cmp	r0, r5
 80004d6:	d03d      	beq.n	8000554 <HAL_GPIO_Init+0x1b4>
 80004d8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80004dc:	42a8      	cmp	r0, r5
 80004de:	d03b      	beq.n	8000558 <HAL_GPIO_Init+0x1b8>
 80004e0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80004e4:	42a8      	cmp	r0, r5
 80004e6:	bf14      	ite	ne
 80004e8:	2509      	movne	r5, #9
 80004ea:	2508      	moveq	r5, #8
 80004ec:	fa05 f50e 	lsl.w	r5, r5, lr
 80004f0:	ea45 050c 	orr.w	r5, r5, ip
        SYSCFG->EXTICR[position >> 2U] = temp;
 80004f4:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 80004f6:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 80004f8:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80004fa:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 80004fe:	bf0c      	ite	eq
 8000500:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000502:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 8000504:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 8000506:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000508:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 800050c:	bf0c      	ite	eq
 800050e:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000510:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 8000512:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000514:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000516:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 800051a:	bf0c      	ite	eq
 800051c:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 800051e:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 8000520:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 8000522:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000524:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8000526:	bf54      	ite	pl
 8000528:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 800052a:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 800052c:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800052e:	3301      	adds	r3, #1
 8000530:	2b10      	cmp	r3, #16
 8000532:	f47f af40 	bne.w	80003b6 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8000536:	b005      	add	sp, #20
 8000538:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800053c:	465d      	mov	r5, fp
 800053e:	e7d5      	b.n	80004ec <HAL_GPIO_Init+0x14c>
 8000540:	2501      	movs	r5, #1
 8000542:	e7d3      	b.n	80004ec <HAL_GPIO_Init+0x14c>
 8000544:	2502      	movs	r5, #2
 8000546:	e7d1      	b.n	80004ec <HAL_GPIO_Init+0x14c>
 8000548:	2503      	movs	r5, #3
 800054a:	e7cf      	b.n	80004ec <HAL_GPIO_Init+0x14c>
 800054c:	2504      	movs	r5, #4
 800054e:	e7cd      	b.n	80004ec <HAL_GPIO_Init+0x14c>
 8000550:	2505      	movs	r5, #5
 8000552:	e7cb      	b.n	80004ec <HAL_GPIO_Init+0x14c>
 8000554:	2506      	movs	r5, #6
 8000556:	e7c9      	b.n	80004ec <HAL_GPIO_Init+0x14c>
 8000558:	2507      	movs	r5, #7
 800055a:	e7c7      	b.n	80004ec <HAL_GPIO_Init+0x14c>
 800055c:	40013c00 	.word	0x40013c00
 8000560:	40020000 	.word	0x40020000
 8000564:	40023800 	.word	0x40023800
 8000568:	40021400 	.word	0x40021400

0800056c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800056c:	b10a      	cbz	r2, 8000572 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800056e:	6181      	str	r1, [r0, #24]
  }
}
 8000570:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000572:	0409      	lsls	r1, r1, #16
 8000574:	e7fb      	b.n	800056e <HAL_GPIO_WritePin+0x2>

08000576 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8000576:	6943      	ldr	r3, [r0, #20]
 8000578:	4059      	eors	r1, r3
 800057a:	6141      	str	r1, [r0, #20]
}
 800057c:	4770      	bx	lr
	...

08000580 <HAL_RCC_OscConfig>:
 uint32_t tickstart = 0U;  
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000580:	6803      	ldr	r3, [r0, #0]
{
 8000582:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000584:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000586:	07d8      	lsls	r0, r3, #31
 8000588:	d438      	bmi.n	80005fc <HAL_RCC_OscConfig+0x7c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800058a:	6823      	ldr	r3, [r4, #0]
 800058c:	0799      	lsls	r1, r3, #30
 800058e:	d46d      	bmi.n	800066c <HAL_RCC_OscConfig+0xec>
        } 
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000590:	6823      	ldr	r3, [r4, #0]
 8000592:	071e      	lsls	r6, r3, #28
 8000594:	f100 80b9 	bmi.w	800070a <HAL_RCC_OscConfig+0x18a>
        }       
      } 
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000598:	6823      	ldr	r3, [r4, #0]
 800059a:	075d      	lsls	r5, r3, #29
 800059c:	d528      	bpl.n	80005f0 <HAL_RCC_OscConfig+0x70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800059e:	2300      	movs	r3, #0
 80005a0:	9301      	str	r3, [sp, #4]
 80005a2:	4ba6      	ldr	r3, [pc, #664]	; (800083c <HAL_RCC_OscConfig+0x2bc>)
    
    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80005a4:	4da6      	ldr	r5, [pc, #664]	; (8000840 <HAL_RCC_OscConfig+0x2c0>)
    __HAL_RCC_PWR_CLK_ENABLE();
 80005a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80005a8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80005ac:	641a      	str	r2, [r3, #64]	; 0x40
 80005ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005b4:	9301      	str	r3, [sp, #4]
 80005b6:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 80005b8:	682b      	ldr	r3, [r5, #0]
 80005ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005be:	602b      	str	r3, [r5, #0]
    
    /* Wait for Backup domain Write protection enable */
    tickstart = HAL_GetTick();
 80005c0:	f7ff fe74 	bl	80002ac <HAL_GetTick>
 80005c4:	4606      	mov	r6, r0
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80005c6:	682b      	ldr	r3, [r5, #0]
 80005c8:	05da      	lsls	r2, r3, #23
 80005ca:	f140 80c0 	bpl.w	800074e <HAL_RCC_OscConfig+0x1ce>
        return HAL_TIMEOUT;
      }      
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80005ce:	4b9d      	ldr	r3, [pc, #628]	; (8000844 <HAL_RCC_OscConfig+0x2c4>)
 80005d0:	7a22      	ldrb	r2, [r4, #8]
 80005d2:	701a      	strb	r2, [r3, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80005d4:	68a3      	ldr	r3, [r4, #8]
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	f000 80c7 	beq.w	800076a <HAL_RCC_OscConfig+0x1ea>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80005dc:	f7ff fe66 	bl	80002ac <HAL_GetTick>
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80005e0:	4d96      	ldr	r5, [pc, #600]	; (800083c <HAL_RCC_OscConfig+0x2bc>)
      tickstart = HAL_GetTick();
 80005e2:	4606      	mov	r6, r0
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80005e4:	f241 3788 	movw	r7, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80005e8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80005ea:	079b      	lsls	r3, r3, #30
 80005ec:	f140 80b6 	bpl.w	800075c <HAL_RCC_OscConfig+0x1dc>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80005f0:	69a2      	ldr	r2, [r4, #24]
 80005f2:	2a00      	cmp	r2, #0
 80005f4:	f040 80c9 	bne.w	800078a <HAL_RCC_OscConfig+0x20a>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 80005f8:	2000      	movs	r0, #0
 80005fa:	e015      	b.n	8000628 <HAL_RCC_OscConfig+0xa8>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80005fc:	4b8f      	ldr	r3, [pc, #572]	; (800083c <HAL_RCC_OscConfig+0x2bc>)
 80005fe:	689a      	ldr	r2, [r3, #8]
 8000600:	f002 020c 	and.w	r2, r2, #12
 8000604:	2a04      	cmp	r2, #4
 8000606:	d007      	beq.n	8000618 <HAL_RCC_OscConfig+0x98>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000608:	689a      	ldr	r2, [r3, #8]
 800060a:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800060e:	2a08      	cmp	r2, #8
 8000610:	d10c      	bne.n	800062c <HAL_RCC_OscConfig+0xac>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000612:	685b      	ldr	r3, [r3, #4]
 8000614:	025a      	lsls	r2, r3, #9
 8000616:	d509      	bpl.n	800062c <HAL_RCC_OscConfig+0xac>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000618:	4b88      	ldr	r3, [pc, #544]	; (800083c <HAL_RCC_OscConfig+0x2bc>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	039b      	lsls	r3, r3, #14
 800061e:	d5b4      	bpl.n	800058a <HAL_RCC_OscConfig+0xa>
 8000620:	6863      	ldr	r3, [r4, #4]
 8000622:	2b00      	cmp	r3, #0
 8000624:	d1b1      	bne.n	800058a <HAL_RCC_OscConfig+0xa>
        return HAL_ERROR;
 8000626:	2001      	movs	r0, #1
}
 8000628:	b003      	add	sp, #12
 800062a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800062c:	4b86      	ldr	r3, [pc, #536]	; (8000848 <HAL_RCC_OscConfig+0x2c8>)
 800062e:	7922      	ldrb	r2, [r4, #4]
 8000630:	701a      	strb	r2, [r3, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000632:	6863      	ldr	r3, [r4, #4]
 8000634:	b16b      	cbz	r3, 8000652 <HAL_RCC_OscConfig+0xd2>
        tickstart = HAL_GetTick();
 8000636:	f7ff fe39 	bl	80002ac <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800063a:	4d80      	ldr	r5, [pc, #512]	; (800083c <HAL_RCC_OscConfig+0x2bc>)
        tickstart = HAL_GetTick();
 800063c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800063e:	682b      	ldr	r3, [r5, #0]
 8000640:	039f      	lsls	r7, r3, #14
 8000642:	d4a2      	bmi.n	800058a <HAL_RCC_OscConfig+0xa>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000644:	f7ff fe32 	bl	80002ac <HAL_GetTick>
 8000648:	1b80      	subs	r0, r0, r6
 800064a:	2864      	cmp	r0, #100	; 0x64
 800064c:	d9f7      	bls.n	800063e <HAL_RCC_OscConfig+0xbe>
            return HAL_TIMEOUT;
 800064e:	2003      	movs	r0, #3
 8000650:	e7ea      	b.n	8000628 <HAL_RCC_OscConfig+0xa8>
        tickstart = HAL_GetTick();
 8000652:	f7ff fe2b 	bl	80002ac <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000656:	4d79      	ldr	r5, [pc, #484]	; (800083c <HAL_RCC_OscConfig+0x2bc>)
        tickstart = HAL_GetTick();
 8000658:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800065a:	682b      	ldr	r3, [r5, #0]
 800065c:	0398      	lsls	r0, r3, #14
 800065e:	d594      	bpl.n	800058a <HAL_RCC_OscConfig+0xa>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000660:	f7ff fe24 	bl	80002ac <HAL_GetTick>
 8000664:	1b80      	subs	r0, r0, r6
 8000666:	2864      	cmp	r0, #100	; 0x64
 8000668:	d9f7      	bls.n	800065a <HAL_RCC_OscConfig+0xda>
 800066a:	e7f0      	b.n	800064e <HAL_RCC_OscConfig+0xce>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800066c:	4b73      	ldr	r3, [pc, #460]	; (800083c <HAL_RCC_OscConfig+0x2bc>)
 800066e:	689a      	ldr	r2, [r3, #8]
 8000670:	f012 0f0c 	tst.w	r2, #12
 8000674:	d007      	beq.n	8000686 <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000676:	689a      	ldr	r2, [r3, #8]
 8000678:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800067c:	2a08      	cmp	r2, #8
 800067e:	d116      	bne.n	80006ae <HAL_RCC_OscConfig+0x12e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000680:	685b      	ldr	r3, [r3, #4]
 8000682:	0259      	lsls	r1, r3, #9
 8000684:	d413      	bmi.n	80006ae <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000686:	4b6d      	ldr	r3, [pc, #436]	; (800083c <HAL_RCC_OscConfig+0x2bc>)
 8000688:	681a      	ldr	r2, [r3, #0]
 800068a:	0792      	lsls	r2, r2, #30
 800068c:	d502      	bpl.n	8000694 <HAL_RCC_OscConfig+0x114>
 800068e:	68e2      	ldr	r2, [r4, #12]
 8000690:	2a01      	cmp	r2, #1
 8000692:	d1c8      	bne.n	8000626 <HAL_RCC_OscConfig+0xa6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000694:	6818      	ldr	r0, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000696:	22f8      	movs	r2, #248	; 0xf8
 8000698:	fa92 f2a2 	rbit	r2, r2
 800069c:	fab2 f182 	clz	r1, r2
 80006a0:	6922      	ldr	r2, [r4, #16]
 80006a2:	408a      	lsls	r2, r1
 80006a4:	f020 01f8 	bic.w	r1, r0, #248	; 0xf8
 80006a8:	430a      	orrs	r2, r1
 80006aa:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80006ac:	e770      	b.n	8000590 <HAL_RCC_OscConfig+0x10>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80006ae:	68e2      	ldr	r2, [r4, #12]
 80006b0:	4b66      	ldr	r3, [pc, #408]	; (800084c <HAL_RCC_OscConfig+0x2cc>)
 80006b2:	b1da      	cbz	r2, 80006ec <HAL_RCC_OscConfig+0x16c>
        __HAL_RCC_HSI_ENABLE();
 80006b4:	2201      	movs	r2, #1
 80006b6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80006b8:	f7ff fdf8 	bl	80002ac <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80006bc:	4d5f      	ldr	r5, [pc, #380]	; (800083c <HAL_RCC_OscConfig+0x2bc>)
        tickstart = HAL_GetTick();
 80006be:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80006c0:	682b      	ldr	r3, [r5, #0]
 80006c2:	079b      	lsls	r3, r3, #30
 80006c4:	d50c      	bpl.n	80006e0 <HAL_RCC_OscConfig+0x160>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80006c6:	6829      	ldr	r1, [r5, #0]
 80006c8:	23f8      	movs	r3, #248	; 0xf8
 80006ca:	fa93 f3a3 	rbit	r3, r3
 80006ce:	fab3 f283 	clz	r2, r3
 80006d2:	6923      	ldr	r3, [r4, #16]
 80006d4:	4093      	lsls	r3, r2
 80006d6:	f021 02f8 	bic.w	r2, r1, #248	; 0xf8
 80006da:	4313      	orrs	r3, r2
 80006dc:	602b      	str	r3, [r5, #0]
 80006de:	e757      	b.n	8000590 <HAL_RCC_OscConfig+0x10>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80006e0:	f7ff fde4 	bl	80002ac <HAL_GetTick>
 80006e4:	1b80      	subs	r0, r0, r6
 80006e6:	2802      	cmp	r0, #2
 80006e8:	d9ea      	bls.n	80006c0 <HAL_RCC_OscConfig+0x140>
 80006ea:	e7b0      	b.n	800064e <HAL_RCC_OscConfig+0xce>
        __HAL_RCC_HSI_DISABLE();
 80006ec:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80006ee:	f7ff fddd 	bl	80002ac <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80006f2:	4d52      	ldr	r5, [pc, #328]	; (800083c <HAL_RCC_OscConfig+0x2bc>)
        tickstart = HAL_GetTick();
 80006f4:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80006f6:	682b      	ldr	r3, [r5, #0]
 80006f8:	079f      	lsls	r7, r3, #30
 80006fa:	f57f af49 	bpl.w	8000590 <HAL_RCC_OscConfig+0x10>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80006fe:	f7ff fdd5 	bl	80002ac <HAL_GetTick>
 8000702:	1b80      	subs	r0, r0, r6
 8000704:	2802      	cmp	r0, #2
 8000706:	d9f6      	bls.n	80006f6 <HAL_RCC_OscConfig+0x176>
 8000708:	e7a1      	b.n	800064e <HAL_RCC_OscConfig+0xce>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800070a:	6962      	ldr	r2, [r4, #20]
 800070c:	4b50      	ldr	r3, [pc, #320]	; (8000850 <HAL_RCC_OscConfig+0x2d0>)
 800070e:	b17a      	cbz	r2, 8000730 <HAL_RCC_OscConfig+0x1b0>
      __HAL_RCC_LSI_ENABLE();
 8000710:	2201      	movs	r2, #1
 8000712:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000714:	f7ff fdca 	bl	80002ac <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000718:	4d48      	ldr	r5, [pc, #288]	; (800083c <HAL_RCC_OscConfig+0x2bc>)
      tickstart = HAL_GetTick();
 800071a:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800071c:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800071e:	0798      	lsls	r0, r3, #30
 8000720:	f53f af3a 	bmi.w	8000598 <HAL_RCC_OscConfig+0x18>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000724:	f7ff fdc2 	bl	80002ac <HAL_GetTick>
 8000728:	1b80      	subs	r0, r0, r6
 800072a:	2802      	cmp	r0, #2
 800072c:	d9f6      	bls.n	800071c <HAL_RCC_OscConfig+0x19c>
 800072e:	e78e      	b.n	800064e <HAL_RCC_OscConfig+0xce>
      __HAL_RCC_LSI_DISABLE();
 8000730:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000732:	f7ff fdbb 	bl	80002ac <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000736:	4d41      	ldr	r5, [pc, #260]	; (800083c <HAL_RCC_OscConfig+0x2bc>)
      tickstart = HAL_GetTick();
 8000738:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800073a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800073c:	0799      	lsls	r1, r3, #30
 800073e:	f57f af2b 	bpl.w	8000598 <HAL_RCC_OscConfig+0x18>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000742:	f7ff fdb3 	bl	80002ac <HAL_GetTick>
 8000746:	1b80      	subs	r0, r0, r6
 8000748:	2802      	cmp	r0, #2
 800074a:	d9f6      	bls.n	800073a <HAL_RCC_OscConfig+0x1ba>
 800074c:	e77f      	b.n	800064e <HAL_RCC_OscConfig+0xce>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800074e:	f7ff fdad 	bl	80002ac <HAL_GetTick>
 8000752:	1b80      	subs	r0, r0, r6
 8000754:	2802      	cmp	r0, #2
 8000756:	f67f af36 	bls.w	80005c6 <HAL_RCC_OscConfig+0x46>
 800075a:	e778      	b.n	800064e <HAL_RCC_OscConfig+0xce>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800075c:	f7ff fda6 	bl	80002ac <HAL_GetTick>
 8000760:	1b80      	subs	r0, r0, r6
 8000762:	42b8      	cmp	r0, r7
 8000764:	f67f af40 	bls.w	80005e8 <HAL_RCC_OscConfig+0x68>
 8000768:	e771      	b.n	800064e <HAL_RCC_OscConfig+0xce>
      tickstart = HAL_GetTick();
 800076a:	f7ff fd9f 	bl	80002ac <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800076e:	4d33      	ldr	r5, [pc, #204]	; (800083c <HAL_RCC_OscConfig+0x2bc>)
      tickstart = HAL_GetTick();
 8000770:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000772:	f241 3788 	movw	r7, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000776:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000778:	0798      	lsls	r0, r3, #30
 800077a:	f57f af39 	bpl.w	80005f0 <HAL_RCC_OscConfig+0x70>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800077e:	f7ff fd95 	bl	80002ac <HAL_GetTick>
 8000782:	1b80      	subs	r0, r0, r6
 8000784:	42b8      	cmp	r0, r7
 8000786:	d9f6      	bls.n	8000776 <HAL_RCC_OscConfig+0x1f6>
 8000788:	e761      	b.n	800064e <HAL_RCC_OscConfig+0xce>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800078a:	4d2c      	ldr	r5, [pc, #176]	; (800083c <HAL_RCC_OscConfig+0x2bc>)
 800078c:	68ab      	ldr	r3, [r5, #8]
 800078e:	f003 030c 	and.w	r3, r3, #12
 8000792:	2b08      	cmp	r3, #8
 8000794:	f43f af47 	beq.w	8000626 <HAL_RCC_OscConfig+0xa6>
 8000798:	4e2e      	ldr	r6, [pc, #184]	; (8000854 <HAL_RCC_OscConfig+0x2d4>)
 800079a:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800079c:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 800079e:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80007a0:	d13e      	bne.n	8000820 <HAL_RCC_OscConfig+0x2a0>
        tickstart = HAL_GetTick();
 80007a2:	f7ff fd83 	bl	80002ac <HAL_GetTick>
 80007a6:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80007a8:	682b      	ldr	r3, [r5, #0]
 80007aa:	0199      	lsls	r1, r3, #6
 80007ac:	d432      	bmi.n	8000814 <HAL_RCC_OscConfig+0x294>
 80007ae:	f647 77c0 	movw	r7, #32704	; 0x7fc0
 80007b2:	fa97 f7a7 	rbit	r7, r7
 80007b6:	f44f 3240 	mov.w	r2, #196608	; 0x30000
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80007ba:	fab7 f787 	clz	r7, r7
 80007be:	fa92 f2a2 	rbit	r2, r2
 80007c2:	f04f 6170 	mov.w	r1, #251658240	; 0xf000000
 80007c6:	fab2 f082 	clz	r0, r2
 80007ca:	fa91 f1a1 	rbit	r1, r1
 80007ce:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 80007d2:	4313      	orrs	r3, r2
 80007d4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80007d6:	fa02 f707 	lsl.w	r7, r2, r7
 80007da:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80007dc:	0852      	lsrs	r2, r2, #1
 80007de:	3a01      	subs	r2, #1
 80007e0:	4082      	lsls	r2, r0
 80007e2:	433b      	orrs	r3, r7
 80007e4:	4313      	orrs	r3, r2
 80007e6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80007e8:	4c14      	ldr	r4, [pc, #80]	; (800083c <HAL_RCC_OscConfig+0x2bc>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80007ea:	fab1 f181 	clz	r1, r1
 80007ee:	fa02 f101 	lsl.w	r1, r2, r1
 80007f2:	430b      	orrs	r3, r1
 80007f4:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80007f6:	2301      	movs	r3, #1
 80007f8:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 80007fa:	f7ff fd57 	bl	80002ac <HAL_GetTick>
 80007fe:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000800:	6823      	ldr	r3, [r4, #0]
 8000802:	019a      	lsls	r2, r3, #6
 8000804:	f53f aef8 	bmi.w	80005f8 <HAL_RCC_OscConfig+0x78>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000808:	f7ff fd50 	bl	80002ac <HAL_GetTick>
 800080c:	1b40      	subs	r0, r0, r5
 800080e:	2802      	cmp	r0, #2
 8000810:	d9f6      	bls.n	8000800 <HAL_RCC_OscConfig+0x280>
 8000812:	e71c      	b.n	800064e <HAL_RCC_OscConfig+0xce>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000814:	f7ff fd4a 	bl	80002ac <HAL_GetTick>
 8000818:	1bc0      	subs	r0, r0, r7
 800081a:	2802      	cmp	r0, #2
 800081c:	d9c4      	bls.n	80007a8 <HAL_RCC_OscConfig+0x228>
 800081e:	e716      	b.n	800064e <HAL_RCC_OscConfig+0xce>
        tickstart = HAL_GetTick();
 8000820:	f7ff fd44 	bl	80002ac <HAL_GetTick>
 8000824:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000826:	682b      	ldr	r3, [r5, #0]
 8000828:	019b      	lsls	r3, r3, #6
 800082a:	f57f aee5 	bpl.w	80005f8 <HAL_RCC_OscConfig+0x78>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800082e:	f7ff fd3d 	bl	80002ac <HAL_GetTick>
 8000832:	1b00      	subs	r0, r0, r4
 8000834:	2802      	cmp	r0, #2
 8000836:	d9f6      	bls.n	8000826 <HAL_RCC_OscConfig+0x2a6>
 8000838:	e709      	b.n	800064e <HAL_RCC_OscConfig+0xce>
 800083a:	bf00      	nop
 800083c:	40023800 	.word	0x40023800
 8000840:	40007000 	.word	0x40007000
 8000844:	40023870 	.word	0x40023870
 8000848:	40023802 	.word	0x40023802
 800084c:	42470000 	.word	0x42470000
 8000850:	42470e80 	.word	0x42470e80
 8000854:	42470060 	.word	0x42470060

08000858 <HAL_RCC_ClockConfig>:
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
    must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) and the supply voltage of the device. */
  
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000858:	4b4d      	ldr	r3, [pc, #308]	; (8000990 <HAL_RCC_ClockConfig+0x138>)
 800085a:	681a      	ldr	r2, [r3, #0]
 800085c:	f002 020f 	and.w	r2, r2, #15
 8000860:	428a      	cmp	r2, r1
{
 8000862:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000866:	4605      	mov	r5, r0
 8000868:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800086a:	d31c      	bcc.n	80008a6 <HAL_RCC_ClockConfig+0x4e>
      return HAL_ERROR;
    }
  }
 
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800086c:	682a      	ldr	r2, [r5, #0]
 800086e:	0794      	lsls	r4, r2, #30
 8000870:	d423      	bmi.n	80008ba <HAL_RCC_ClockConfig+0x62>
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
  }
  
  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000872:	07d0      	lsls	r0, r2, #31
 8000874:	d429      	bmi.n	80008ca <HAL_RCC_ClockConfig+0x72>
      }
    }
  }    
  
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000876:	4b46      	ldr	r3, [pc, #280]	; (8000990 <HAL_RCC_ClockConfig+0x138>)
 8000878:	681a      	ldr	r2, [r3, #0]
 800087a:	f002 020f 	and.w	r2, r2, #15
 800087e:	42b2      	cmp	r2, r6
 8000880:	d875      	bhi.n	800096e <HAL_RCC_ClockConfig+0x116>
      return HAL_ERROR;
    }
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000882:	682a      	ldr	r2, [r5, #0]
 8000884:	0751      	lsls	r1, r2, #29
 8000886:	d47a      	bmi.n	800097e <HAL_RCC_ClockConfig+0x126>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000888:	0713      	lsls	r3, r2, #28
 800088a:	d507      	bpl.n	800089c <HAL_RCC_ClockConfig+0x44>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800088c:	4a41      	ldr	r2, [pc, #260]	; (8000994 <HAL_RCC_ClockConfig+0x13c>)
 800088e:	6929      	ldr	r1, [r5, #16]
 8000890:	6893      	ldr	r3, [r2, #8]
 8000892:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000896:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800089a:	6093      	str	r3, [r2, #8]
  }

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800089c:	2000      	movs	r0, #0
 800089e:	f001 f8a5 	bl	80019ec <HAL_InitTick>
  
  return HAL_OK;
 80008a2:	2000      	movs	r0, #0
 80008a4:	e007      	b.n	80008b6 <HAL_RCC_ClockConfig+0x5e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80008a6:	b2ca      	uxtb	r2, r1
 80008a8:	701a      	strb	r2, [r3, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	f003 030f 	and.w	r3, r3, #15
 80008b0:	428b      	cmp	r3, r1
 80008b2:	d0db      	beq.n	800086c <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 80008b4:	2001      	movs	r0, #1
}
 80008b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80008ba:	4936      	ldr	r1, [pc, #216]	; (8000994 <HAL_RCC_ClockConfig+0x13c>)
 80008bc:	68a8      	ldr	r0, [r5, #8]
 80008be:	688b      	ldr	r3, [r1, #8]
 80008c0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80008c4:	4303      	orrs	r3, r0
 80008c6:	608b      	str	r3, [r1, #8]
 80008c8:	e7d3      	b.n	8000872 <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80008ca:	686a      	ldr	r2, [r5, #4]
 80008cc:	4b31      	ldr	r3, [pc, #196]	; (8000994 <HAL_RCC_ClockConfig+0x13c>)
 80008ce:	2a01      	cmp	r2, #1
 80008d0:	d11d      	bne.n	800090e <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80008d8:	d0ec      	beq.n	80008b4 <HAL_RCC_ClockConfig+0x5c>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80008da:	4c2e      	ldr	r4, [pc, #184]	; (8000994 <HAL_RCC_ClockConfig+0x13c>)
 80008dc:	68a3      	ldr	r3, [r4, #8]
 80008de:	f023 0303 	bic.w	r3, r3, #3
 80008e2:	4313      	orrs	r3, r2
 80008e4:	60a3      	str	r3, [r4, #8]
    tickstart = HAL_GetTick();
 80008e6:	f7ff fce1 	bl	80002ac <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80008ea:	686b      	ldr	r3, [r5, #4]
 80008ec:	2b01      	cmp	r3, #1
    tickstart = HAL_GetTick();
 80008ee:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80008f0:	d117      	bne.n	8000922 <HAL_RCC_ClockConfig+0xca>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80008f2:	f241 3888 	movw	r8, #5000	; 0x1388
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80008f6:	68a3      	ldr	r3, [r4, #8]
 80008f8:	f003 030c 	and.w	r3, r3, #12
 80008fc:	2b04      	cmp	r3, #4
 80008fe:	d0ba      	beq.n	8000876 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000900:	f7ff fcd4 	bl	80002ac <HAL_GetTick>
 8000904:	1bc0      	subs	r0, r0, r7
 8000906:	4540      	cmp	r0, r8
 8000908:	d9f5      	bls.n	80008f6 <HAL_RCC_ClockConfig+0x9e>
          return HAL_TIMEOUT;
 800090a:	2003      	movs	r0, #3
 800090c:	e7d3      	b.n	80008b6 <HAL_RCC_ClockConfig+0x5e>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 800090e:	1e91      	subs	r1, r2, #2
 8000910:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000912:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 8000914:	d802      	bhi.n	800091c <HAL_RCC_ClockConfig+0xc4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000916:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800091a:	e7dd      	b.n	80008d8 <HAL_RCC_ClockConfig+0x80>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800091c:	f013 0f02 	tst.w	r3, #2
 8000920:	e7da      	b.n	80008d8 <HAL_RCC_ClockConfig+0x80>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000922:	2b02      	cmp	r3, #2
 8000924:	d10c      	bne.n	8000940 <HAL_RCC_ClockConfig+0xe8>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000926:	f241 3888 	movw	r8, #5000	; 0x1388
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800092a:	68a3      	ldr	r3, [r4, #8]
 800092c:	f003 030c 	and.w	r3, r3, #12
 8000930:	2b08      	cmp	r3, #8
 8000932:	d0a0      	beq.n	8000876 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000934:	f7ff fcba 	bl	80002ac <HAL_GetTick>
 8000938:	1bc0      	subs	r0, r0, r7
 800093a:	4540      	cmp	r0, r8
 800093c:	d9f5      	bls.n	800092a <HAL_RCC_ClockConfig+0xd2>
 800093e:	e7e4      	b.n	800090a <HAL_RCC_ClockConfig+0xb2>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK)
 8000940:	2b03      	cmp	r3, #3
 8000942:	d00b      	beq.n	800095c <HAL_RCC_ClockConfig+0x104>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000944:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000948:	68a3      	ldr	r3, [r4, #8]
 800094a:	f013 0f0c 	tst.w	r3, #12
 800094e:	d092      	beq.n	8000876 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000950:	f7ff fcac 	bl	80002ac <HAL_GetTick>
 8000954:	1bc0      	subs	r0, r0, r7
 8000956:	4540      	cmp	r0, r8
 8000958:	d9f6      	bls.n	8000948 <HAL_RCC_ClockConfig+0xf0>
 800095a:	e7d6      	b.n	800090a <HAL_RCC_ClockConfig+0xb2>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800095c:	f241 3588 	movw	r5, #5000	; 0x1388
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
 8000960:	68a3      	ldr	r3, [r4, #8]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000962:	f7ff fca3 	bl	80002ac <HAL_GetTick>
 8000966:	1bc0      	subs	r0, r0, r7
 8000968:	42a8      	cmp	r0, r5
 800096a:	d9f9      	bls.n	8000960 <HAL_RCC_ClockConfig+0x108>
 800096c:	e7cd      	b.n	800090a <HAL_RCC_ClockConfig+0xb2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800096e:	b2f2      	uxtb	r2, r6
 8000970:	701a      	strb	r2, [r3, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	f003 030f 	and.w	r3, r3, #15
 8000978:	42b3      	cmp	r3, r6
 800097a:	d19b      	bne.n	80008b4 <HAL_RCC_ClockConfig+0x5c>
 800097c:	e781      	b.n	8000882 <HAL_RCC_ClockConfig+0x2a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800097e:	4905      	ldr	r1, [pc, #20]	; (8000994 <HAL_RCC_ClockConfig+0x13c>)
 8000980:	68e8      	ldr	r0, [r5, #12]
 8000982:	688b      	ldr	r3, [r1, #8]
 8000984:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8000988:	4303      	orrs	r3, r0
 800098a:	608b      	str	r3, [r1, #8]
 800098c:	e77c      	b.n	8000888 <HAL_RCC_ClockConfig+0x30>
 800098e:	bf00      	nop
 8000990:	40023c00 	.word	0x40023c00
 8000994:	40023800 	.word	0x40023800

08000998 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000998:	4a19      	ldr	r2, [pc, #100]	; (8000a00 <HAL_RCC_GetSysClockFreq+0x68>)
 800099a:	6893      	ldr	r3, [r2, #8]
 800099c:	f003 030c 	and.w	r3, r3, #12
 80009a0:	2b04      	cmp	r3, #4
{
 80009a2:	b510      	push	{r4, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80009a4:	d003      	beq.n	80009ae <HAL_RCC_GetSysClockFreq+0x16>
 80009a6:	2b08      	cmp	r3, #8
 80009a8:	d003      	beq.n	80009b2 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80009aa:	4816      	ldr	r0, [pc, #88]	; (8000a04 <HAL_RCC_GetSysClockFreq+0x6c>)
    {
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
 80009ac:	e000      	b.n	80009b0 <HAL_RCC_GetSysClockFreq+0x18>
      sysclockfreq = HSE_VALUE;
 80009ae:	4816      	ldr	r0, [pc, #88]	; (8000a08 <HAL_RCC_GetSysClockFreq+0x70>)
}
 80009b0:	bd10      	pop	{r4, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80009b2:	6851      	ldr	r1, [r2, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80009b4:	6853      	ldr	r3, [r2, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80009b6:	f001 013f 	and.w	r1, r1, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80009ba:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80009be:	f647 74c0 	movw	r4, #32704	; 0x7fc0
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 80009c2:	6853      	ldr	r3, [r2, #4]
 80009c4:	fa94 f0a4 	rbit	r0, r4
 80009c8:	fab0 f080 	clz	r0, r0
 80009cc:	ea03 0304 	and.w	r3, r3, r4
 80009d0:	fa23 f300 	lsr.w	r3, r3, r0
 80009d4:	bf14      	ite	ne
 80009d6:	480c      	ldrne	r0, [pc, #48]	; (8000a08 <HAL_RCC_GetSysClockFreq+0x70>)
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
 80009d8:	480a      	ldreq	r0, [pc, #40]	; (8000a04 <HAL_RCC_GetSysClockFreq+0x6c>)
 80009da:	fbb0 f0f1 	udiv	r0, r0, r1
 80009de:	4358      	muls	r0, r3
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1U) *2U);
 80009e0:	4b07      	ldr	r3, [pc, #28]	; (8000a00 <HAL_RCC_GetSysClockFreq+0x68>)
 80009e2:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80009e6:	685b      	ldr	r3, [r3, #4]
 80009e8:	fa92 f2a2 	rbit	r2, r2
 80009ec:	fab2 f282 	clz	r2, r2
 80009f0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80009f4:	40d3      	lsrs	r3, r2
 80009f6:	3301      	adds	r3, #1
 80009f8:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 80009fa:	fbb0 f0f3 	udiv	r0, r0, r3
 80009fe:	e7d7      	b.n	80009b0 <HAL_RCC_GetSysClockFreq+0x18>
 8000a00:	40023800 	.word	0x40023800
 8000a04:	00f42400 	.word	0x00f42400
 8000a08:	007a1200 	.word	0x007a1200

08000a0c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8000a0c:	b508      	push	{r3, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8000a0e:	f7ff ffc3 	bl	8000998 <HAL_RCC_GetSysClockFreq>
 8000a12:	4b08      	ldr	r3, [pc, #32]	; (8000a34 <HAL_RCC_GetHCLKFreq+0x28>)
 8000a14:	22f0      	movs	r2, #240	; 0xf0
 8000a16:	689b      	ldr	r3, [r3, #8]
 8000a18:	fa92 f2a2 	rbit	r2, r2
 8000a1c:	fab2 f282 	clz	r2, r2
 8000a20:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000a24:	40d3      	lsrs	r3, r2
 8000a26:	4a04      	ldr	r2, [pc, #16]	; (8000a38 <HAL_RCC_GetHCLKFreq+0x2c>)
 8000a28:	5cd3      	ldrb	r3, [r2, r3]
 8000a2a:	40d8      	lsrs	r0, r3
 8000a2c:	4b03      	ldr	r3, [pc, #12]	; (8000a3c <HAL_RCC_GetHCLKFreq+0x30>)
 8000a2e:	6018      	str	r0, [r3, #0]
  return SystemCoreClock;
}
 8000a30:	bd08      	pop	{r3, pc}
 8000a32:	bf00      	nop
 8000a34:	40023800 	.word	0x40023800
 8000a38:	08001af8 	.word	0x08001af8
 8000a3c:	20000000 	.word	0x20000000

08000a40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8000a40:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 8000a42:	f7ff ffe3 	bl	8000a0c <HAL_RCC_GetHCLKFreq>
 8000a46:	4b07      	ldr	r3, [pc, #28]	; (8000a64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8000a48:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8000a4c:	689b      	ldr	r3, [r3, #8]
 8000a4e:	fa92 f2a2 	rbit	r2, r2
 8000a52:	fab2 f282 	clz	r2, r2
 8000a56:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8000a5a:	40d3      	lsrs	r3, r2
 8000a5c:	4a02      	ldr	r2, [pc, #8]	; (8000a68 <HAL_RCC_GetPCLK2Freq+0x28>)
 8000a5e:	5cd3      	ldrb	r3, [r2, r3]
} 
 8000a60:	40d8      	lsrs	r0, r3
 8000a62:	bd08      	pop	{r3, pc}
 8000a64:	40023800 	.word	0x40023800
 8000a68:	08001af8 	.word	0x08001af8

08000a6c <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000a6c:	230f      	movs	r3, #15
 8000a6e:	6003      	str	r3, [r0, #0]
   
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8000a70:	4b0b      	ldr	r3, [pc, #44]	; (8000aa0 <HAL_RCC_GetClockConfig+0x34>)
 8000a72:	689a      	ldr	r2, [r3, #8]
 8000a74:	f002 0203 	and.w	r2, r2, #3
 8000a78:	6042      	str	r2, [r0, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8000a7a:	689a      	ldr	r2, [r3, #8]
 8000a7c:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8000a80:	6082      	str	r2, [r0, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8000a82:	689a      	ldr	r2, [r3, #8]
 8000a84:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8000a88:	60c2      	str	r2, [r0, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8000a8a:	689b      	ldr	r3, [r3, #8]
 8000a8c:	08db      	lsrs	r3, r3, #3
 8000a8e:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8000a92:	6103      	str	r3, [r0, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8000a94:	4b03      	ldr	r3, [pc, #12]	; (8000aa4 <HAL_RCC_GetClockConfig+0x38>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	f003 030f 	and.w	r3, r3, #15
 8000a9c:	600b      	str	r3, [r1, #0]
}
 8000a9e:	4770      	bx	lr
 8000aa0:	40023800 	.word	0x40023800
 8000aa4:	40023c00 	.word	0x40023c00

08000aa8 <HAL_TIM_Base_MspInit>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8000aa8:	4770      	bx	lr

08000aaa <HAL_TIM_Base_Start_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8000aaa:	6803      	ldr	r3, [r0, #0]
 8000aac:	68da      	ldr	r2, [r3, #12]
 8000aae:	f042 0201 	orr.w	r2, r2, #1
 8000ab2:	60da      	str	r2, [r3, #12]
      
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8000ab4:	681a      	ldr	r2, [r3, #0]
 8000ab6:	f042 0201 	orr.w	r2, r2, #1
 8000aba:	601a      	str	r2, [r3, #0]
      
  /* Return function status */
  return HAL_OK;
}
 8000abc:	2000      	movs	r0, #0
 8000abe:	4770      	bx	lr

08000ac0 <HAL_TIM_OC_DelayElapsedCallback>:
 8000ac0:	4770      	bx	lr

08000ac2 <HAL_TIM_IC_CaptureCallback>:
 8000ac2:	4770      	bx	lr

08000ac4 <HAL_TIM_PWM_PulseFinishedCallback>:
 8000ac4:	4770      	bx	lr

08000ac6 <HAL_TIM_TriggerCallback>:
 8000ac6:	4770      	bx	lr

08000ac8 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000ac8:	6803      	ldr	r3, [r0, #0]
 8000aca:	691a      	ldr	r2, [r3, #16]
 8000acc:	0791      	lsls	r1, r2, #30
{
 8000ace:	b510      	push	{r4, lr}
 8000ad0:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000ad2:	d50e      	bpl.n	8000af2 <HAL_TIM_IRQHandler+0x2a>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8000ad4:	68da      	ldr	r2, [r3, #12]
 8000ad6:	0792      	lsls	r2, r2, #30
 8000ad8:	d50b      	bpl.n	8000af2 <HAL_TIM_IRQHandler+0x2a>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8000ada:	f06f 0202 	mvn.w	r2, #2
 8000ade:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000ae0:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8000ae2:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000ae4:	079b      	lsls	r3, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8000ae6:	7602      	strb	r2, [r0, #24]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000ae8:	d077      	beq.n	8000bda <HAL_TIM_IRQHandler+0x112>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 8000aea:	f7ff ffea 	bl	8000ac2 <HAL_TIM_IC_CaptureCallback>
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000aee:	2300      	movs	r3, #0
 8000af0:	7623      	strb	r3, [r4, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8000af2:	6823      	ldr	r3, [r4, #0]
 8000af4:	691a      	ldr	r2, [r3, #16]
 8000af6:	0750      	lsls	r0, r2, #29
 8000af8:	d510      	bpl.n	8000b1c <HAL_TIM_IRQHandler+0x54>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8000afa:	68da      	ldr	r2, [r3, #12]
 8000afc:	0751      	lsls	r1, r2, #29
 8000afe:	d50d      	bpl.n	8000b1c <HAL_TIM_IRQHandler+0x54>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8000b00:	f06f 0204 	mvn.w	r2, #4
 8000b04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000b06:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8000b08:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000b0a:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8000b0e:	7622      	strb	r2, [r4, #24]
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8000b10:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000b12:	d068      	beq.n	8000be6 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8000b14:	f7ff ffd5 	bl	8000ac2 <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	7623      	strb	r3, [r4, #24]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8000b1c:	6823      	ldr	r3, [r4, #0]
 8000b1e:	691a      	ldr	r2, [r3, #16]
 8000b20:	0712      	lsls	r2, r2, #28
 8000b22:	d50f      	bpl.n	8000b44 <HAL_TIM_IRQHandler+0x7c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8000b24:	68da      	ldr	r2, [r3, #12]
 8000b26:	0710      	lsls	r0, r2, #28
 8000b28:	d50c      	bpl.n	8000b44 <HAL_TIM_IRQHandler+0x7c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8000b2a:	f06f 0208 	mvn.w	r2, #8
 8000b2e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000b30:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8000b32:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000b34:	0799      	lsls	r1, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8000b36:	7622      	strb	r2, [r4, #24]
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8000b38:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000b3a:	d05a      	beq.n	8000bf2 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8000b3c:	f7ff ffc1 	bl	8000ac2 <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000b40:	2300      	movs	r3, #0
 8000b42:	7623      	strb	r3, [r4, #24]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8000b44:	6823      	ldr	r3, [r4, #0]
 8000b46:	691a      	ldr	r2, [r3, #16]
 8000b48:	06d2      	lsls	r2, r2, #27
 8000b4a:	d510      	bpl.n	8000b6e <HAL_TIM_IRQHandler+0xa6>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8000b4c:	68da      	ldr	r2, [r3, #12]
 8000b4e:	06d0      	lsls	r0, r2, #27
 8000b50:	d50d      	bpl.n	8000b6e <HAL_TIM_IRQHandler+0xa6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8000b52:	f06f 0210 	mvn.w	r2, #16
 8000b56:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000b58:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8000b5a:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000b5c:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8000b60:	7622      	strb	r2, [r4, #24]
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8000b62:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000b64:	d04b      	beq.n	8000bfe <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8000b66:	f7ff ffac 	bl	8000ac2 <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	7623      	strb	r3, [r4, #24]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8000b6e:	6823      	ldr	r3, [r4, #0]
 8000b70:	691a      	ldr	r2, [r3, #16]
 8000b72:	07d1      	lsls	r1, r2, #31
 8000b74:	d508      	bpl.n	8000b88 <HAL_TIM_IRQHandler+0xc0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8000b76:	68da      	ldr	r2, [r3, #12]
 8000b78:	07d2      	lsls	r2, r2, #31
 8000b7a:	d505      	bpl.n	8000b88 <HAL_TIM_IRQHandler+0xc0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8000b7c:	f06f 0201 	mvn.w	r2, #1
 8000b80:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8000b82:	4620      	mov	r0, r4
 8000b84:	f000 ff70 	bl	8001a68 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8000b88:	6823      	ldr	r3, [r4, #0]
 8000b8a:	691a      	ldr	r2, [r3, #16]
 8000b8c:	0610      	lsls	r0, r2, #24
 8000b8e:	d508      	bpl.n	8000ba2 <HAL_TIM_IRQHandler+0xda>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8000b90:	68da      	ldr	r2, [r3, #12]
 8000b92:	0611      	lsls	r1, r2, #24
 8000b94:	d505      	bpl.n	8000ba2 <HAL_TIM_IRQHandler+0xda>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8000b96:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8000b9a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8000b9c:	4620      	mov	r0, r4
 8000b9e:	f000 f8b2 	bl	8000d06 <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8000ba2:	6823      	ldr	r3, [r4, #0]
 8000ba4:	691a      	ldr	r2, [r3, #16]
 8000ba6:	0652      	lsls	r2, r2, #25
 8000ba8:	d508      	bpl.n	8000bbc <HAL_TIM_IRQHandler+0xf4>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8000baa:	68da      	ldr	r2, [r3, #12]
 8000bac:	0650      	lsls	r0, r2, #25
 8000bae:	d505      	bpl.n	8000bbc <HAL_TIM_IRQHandler+0xf4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8000bb0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8000bb4:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8000bb6:	4620      	mov	r0, r4
 8000bb8:	f7ff ff85 	bl	8000ac6 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8000bbc:	6823      	ldr	r3, [r4, #0]
 8000bbe:	691a      	ldr	r2, [r3, #16]
 8000bc0:	0691      	lsls	r1, r2, #26
 8000bc2:	d522      	bpl.n	8000c0a <HAL_TIM_IRQHandler+0x142>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8000bc4:	68da      	ldr	r2, [r3, #12]
 8000bc6:	0692      	lsls	r2, r2, #26
 8000bc8:	d51f      	bpl.n	8000c0a <HAL_TIM_IRQHandler+0x142>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8000bca:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 8000bce:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8000bd0:	611a      	str	r2, [r3, #16]
    }
  }
}
 8000bd2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutationCallback(htim);
 8000bd6:	f000 b895 	b.w	8000d04 <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8000bda:	f7ff ff71 	bl	8000ac0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000bde:	4620      	mov	r0, r4
 8000be0:	f7ff ff70 	bl	8000ac4 <HAL_TIM_PWM_PulseFinishedCallback>
 8000be4:	e783      	b.n	8000aee <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000be6:	f7ff ff6b 	bl	8000ac0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000bea:	4620      	mov	r0, r4
 8000bec:	f7ff ff6a 	bl	8000ac4 <HAL_TIM_PWM_PulseFinishedCallback>
 8000bf0:	e792      	b.n	8000b18 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000bf2:	f7ff ff65 	bl	8000ac0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 8000bf6:	4620      	mov	r0, r4
 8000bf8:	f7ff ff64 	bl	8000ac4 <HAL_TIM_PWM_PulseFinishedCallback>
 8000bfc:	e7a0      	b.n	8000b40 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000bfe:	f7ff ff5f 	bl	8000ac0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000c02:	4620      	mov	r0, r4
 8000c04:	f7ff ff5e 	bl	8000ac4 <HAL_TIM_PWM_PulseFinishedCallback>
 8000c08:	e7af      	b.n	8000b6a <HAL_TIM_IRQHandler+0xa2>
}
 8000c0a:	bd10      	pop	{r4, pc}

08000c0c <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0U;
  tmpcr1 = TIMx->CR1;
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8000c0c:	4a2e      	ldr	r2, [pc, #184]	; (8000cc8 <TIM_Base_SetConfig+0xbc>)
  tmpcr1 = TIMx->CR1;
 8000c0e:	6803      	ldr	r3, [r0, #0]
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8000c10:	4290      	cmp	r0, r2
 8000c12:	d012      	beq.n	8000c3a <TIM_Base_SetConfig+0x2e>
 8000c14:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8000c18:	d00f      	beq.n	8000c3a <TIM_Base_SetConfig+0x2e>
 8000c1a:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8000c1e:	4290      	cmp	r0, r2
 8000c20:	d00b      	beq.n	8000c3a <TIM_Base_SetConfig+0x2e>
 8000c22:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000c26:	4290      	cmp	r0, r2
 8000c28:	d007      	beq.n	8000c3a <TIM_Base_SetConfig+0x2e>
 8000c2a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000c2e:	4290      	cmp	r0, r2
 8000c30:	d003      	beq.n	8000c3a <TIM_Base_SetConfig+0x2e>
 8000c32:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8000c36:	4290      	cmp	r0, r2
 8000c38:	d119      	bne.n	8000c6e <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8000c3a:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8000c3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8000c40:	4313      	orrs	r3, r2
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8000c42:	4a21      	ldr	r2, [pc, #132]	; (8000cc8 <TIM_Base_SetConfig+0xbc>)
 8000c44:	4290      	cmp	r0, r2
 8000c46:	d029      	beq.n	8000c9c <TIM_Base_SetConfig+0x90>
 8000c48:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8000c4c:	d026      	beq.n	8000c9c <TIM_Base_SetConfig+0x90>
 8000c4e:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8000c52:	4290      	cmp	r0, r2
 8000c54:	d022      	beq.n	8000c9c <TIM_Base_SetConfig+0x90>
 8000c56:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000c5a:	4290      	cmp	r0, r2
 8000c5c:	d01e      	beq.n	8000c9c <TIM_Base_SetConfig+0x90>
 8000c5e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000c62:	4290      	cmp	r0, r2
 8000c64:	d01a      	beq.n	8000c9c <TIM_Base_SetConfig+0x90>
 8000c66:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8000c6a:	4290      	cmp	r0, r2
 8000c6c:	d016      	beq.n	8000c9c <TIM_Base_SetConfig+0x90>
 8000c6e:	4a17      	ldr	r2, [pc, #92]	; (8000ccc <TIM_Base_SetConfig+0xc0>)
 8000c70:	4290      	cmp	r0, r2
 8000c72:	d013      	beq.n	8000c9c <TIM_Base_SetConfig+0x90>
 8000c74:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000c78:	4290      	cmp	r0, r2
 8000c7a:	d00f      	beq.n	8000c9c <TIM_Base_SetConfig+0x90>
 8000c7c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000c80:	4290      	cmp	r0, r2
 8000c82:	d00b      	beq.n	8000c9c <TIM_Base_SetConfig+0x90>
 8000c84:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8000c88:	4290      	cmp	r0, r2
 8000c8a:	d007      	beq.n	8000c9c <TIM_Base_SetConfig+0x90>
 8000c8c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000c90:	4290      	cmp	r0, r2
 8000c92:	d003      	beq.n	8000c9c <TIM_Base_SetConfig+0x90>
 8000c94:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000c98:	4290      	cmp	r0, r2
 8000c9a:	d103      	bne.n	8000ca4 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000c9c:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8000c9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000ca2:	4313      	orrs	r3, r2
  }

  TIMx->CR1 = tmpcr1;
 8000ca4:	6003      	str	r3, [r0, #0]

  /* Set the Auto-reload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8000ca6:	688b      	ldr	r3, [r1, #8]
 8000ca8:	62c3      	str	r3, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8000caa:	680b      	ldr	r3, [r1, #0]
 8000cac:	6283      	str	r3, [r0, #40]	; 0x28
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 8000cae:	4b06      	ldr	r3, [pc, #24]	; (8000cc8 <TIM_Base_SetConfig+0xbc>)
 8000cb0:	4298      	cmp	r0, r3
 8000cb2:	d003      	beq.n	8000cbc <TIM_Base_SetConfig+0xb0>
 8000cb4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000cb8:	4298      	cmp	r0, r3
 8000cba:	d101      	bne.n	8000cc0 <TIM_Base_SetConfig+0xb4>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8000cbc:	690b      	ldr	r3, [r1, #16]
 8000cbe:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8000cc0:	2301      	movs	r3, #1
 8000cc2:	6143      	str	r3, [r0, #20]
}
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop
 8000cc8:	40010000 	.word	0x40010000
 8000ccc:	40014000 	.word	0x40014000

08000cd0 <HAL_TIM_Base_Init>:
{ 
 8000cd0:	b510      	push	{r4, lr}
  if(htim == NULL)
 8000cd2:	4604      	mov	r4, r0
 8000cd4:	b1a0      	cbz	r0, 8000d00 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8000cd6:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8000cda:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000cde:	b91b      	cbnz	r3, 8000ce8 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8000ce0:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_Base_MspInit(htim);
 8000ce4:	f7ff fee0 	bl	8000aa8 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8000ce8:	2302      	movs	r3, #2
 8000cea:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8000cee:	6820      	ldr	r0, [r4, #0]
 8000cf0:	1d21      	adds	r1, r4, #4
 8000cf2:	f7ff ff8b 	bl	8000c0c <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 8000cfc:	2000      	movs	r0, #0
}
 8000cfe:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000d00:	2001      	movs	r0, #1
 8000d02:	e7fc      	b.n	8000cfe <HAL_TIM_Base_Init+0x2e>

08000d04 <HAL_TIMEx_CommutationCallback>:
 8000d04:	4770      	bx	lr

08000d06 <HAL_TIMEx_BreakCallback>:
 8000d06:	4770      	bx	lr

08000d08 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8000d08:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 8000d0a:	f000 f985 	bl	8001018 <vTaskStartScheduler>
  
  return osOK;
}
 8000d0e:	2000      	movs	r0, #0
 8000d10:	bd08      	pop	{r3, pc}

08000d12 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8000d12:	b570      	push	{r4, r5, r6, lr}
  TaskHandle_t handle;
  
  
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8000d14:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
 8000d18:	8a02      	ldrh	r2, [r0, #16]
{
 8000d1a:	460b      	mov	r3, r1
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8000d1c:	e9d0 1600 	ldrd	r1, r6, [r0]
{
 8000d20:	b086      	sub	sp, #24
  if (priority != osPriorityError) {
 8000d22:	2c84      	cmp	r4, #132	; 0x84
 8000d24:	f04f 0500 	mov.w	r5, #0
    fpriority += (priority - osPriorityIdle);
 8000d28:	bf14      	ite	ne
 8000d2a:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8000d2c:	462c      	moveq	r4, r5
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8000d2e:	a805      	add	r0, sp, #20
 8000d30:	e9cd 4000 	strd	r4, r0, [sp]
 8000d34:	e9cd 5502 	strd	r5, r5, [sp, #8]
 8000d38:	4630      	mov	r0, r6
 8000d3a:	f000 f951 	bl	8000fe0 <xTaskGenericCreate>
 8000d3e:	2801      	cmp	r0, #1
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              &handle) != pdPASS)  {
    return NULL;
  }
  
  return handle;
 8000d40:	bf0c      	ite	eq
 8000d42:	9805      	ldreq	r0, [sp, #20]
    return NULL;
 8000d44:	2000      	movne	r0, #0
}
 8000d46:	b006      	add	sp, #24
 8000d48:	bd70      	pop	{r4, r5, r6, pc}

08000d4a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8000d4a:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8000d4c:	2800      	cmp	r0, #0
 8000d4e:	bf08      	it	eq
 8000d50:	2001      	moveq	r0, #1
 8000d52:	f000 fa89 	bl	8001268 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8000d56:	2000      	movs	r0, #0
 8000d58:	bd08      	pop	{r3, pc}

08000d5a <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 8000d5a:	b508      	push	{r3, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000d5c:	f000 fb26 	bl	80013ac <xTaskGetSchedulerState>
 8000d60:	2801      	cmp	r0, #1
 8000d62:	d003      	beq.n	8000d6c <osSystickHandler+0x12>
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 8000d64:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    xPortSysTickHandler();
 8000d68:	f000 bbea 	b.w	8001540 <xPortSysTickHandler>
}
 8000d6c:	bd08      	pop	{r3, pc}

08000d6e <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000d6e:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000d72:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000d76:	6043      	str	r3, [r0, #4]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000d78:	e9c0 2302 	strd	r2, r3, [r0, #8]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000d7c:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8000d82:	4770      	bx	lr

08000d84 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8000d84:	2300      	movs	r3, #0
 8000d86:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8000d88:	4770      	bx	lr

08000d8a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8000d8a:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8000d8c:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8000d8e:	689a      	ldr	r2, [r3, #8]
 8000d90:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8000d92:	689a      	ldr	r2, [r3, #8]
 8000d94:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8000d96:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8000d98:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8000d9a:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8000d9c:	3301      	adds	r3, #1
 8000d9e:	6003      	str	r3, [r0, #0]
}
 8000da0:	4770      	bx	lr

08000da2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8000da2:	680a      	ldr	r2, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8000da4:	1c53      	adds	r3, r2, #1
{
 8000da6:	b530      	push	{r4, r5, lr}
	if( xValueOfInsertion == portMAX_DELAY )
 8000da8:	d10a      	bne.n	8000dc0 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8000daa:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8000dac:	685a      	ldr	r2, [r3, #4]
 8000dae:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8000db0:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8000db2:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8000db4:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8000db6:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8000db8:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8000dba:	3301      	adds	r3, #1
 8000dbc:	6003      	str	r3, [r0, #0]
}
 8000dbe:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000dc0:	f100 0308 	add.w	r3, r0, #8
 8000dc4:	685c      	ldr	r4, [r3, #4]
 8000dc6:	6825      	ldr	r5, [r4, #0]
 8000dc8:	4295      	cmp	r5, r2
 8000dca:	d8ef      	bhi.n	8000dac <vListInsert+0xa>
 8000dcc:	4623      	mov	r3, r4
 8000dce:	e7f9      	b.n	8000dc4 <vListInsert+0x22>

08000dd0 <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000dd0:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8000dd4:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000dd6:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000dd8:	6882      	ldr	r2, [r0, #8]
 8000dda:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8000ddc:	6859      	ldr	r1, [r3, #4]
 8000dde:	4281      	cmp	r1, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000de0:	bf08      	it	eq
 8000de2:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8000de4:	2200      	movs	r2, #0
 8000de6:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8000de8:	6818      	ldr	r0, [r3, #0]
 8000dea:	3801      	subs	r0, #1
 8000dec:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
 8000dee:	4770      	bx	lr

08000df0 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000df0:	4a06      	ldr	r2, [pc, #24]	; (8000e0c <prvResetNextTaskUnblockTime+0x1c>)
 8000df2:	6813      	ldr	r3, [r2, #0]
 8000df4:	6819      	ldr	r1, [r3, #0]
 8000df6:	4b06      	ldr	r3, [pc, #24]	; (8000e10 <prvResetNextTaskUnblockTime+0x20>)
 8000df8:	b919      	cbnz	r1, 8000e02 <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8000dfa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
 8000dfe:	601a      	str	r2, [r3, #0]
	}
}
 8000e00:	4770      	bx	lr
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8000e02:	6812      	ldr	r2, [r2, #0]
 8000e04:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
 8000e06:	68d2      	ldr	r2, [r2, #12]
 8000e08:	6852      	ldr	r2, [r2, #4]
 8000e0a:	e7f8      	b.n	8000dfe <prvResetNextTaskUnblockTime+0xe>
 8000e0c:	20000028 	.word	0x20000028
 8000e10:	20000004 	.word	0x20000004

08000e14 <prvAddCurrentTaskToDelayedList>:
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 8000e14:	4b0c      	ldr	r3, [pc, #48]	; (8000e48 <prvAddCurrentTaskToDelayedList+0x34>)
 8000e16:	685a      	ldr	r2, [r3, #4]
{
 8000e18:	b510      	push	{r4, lr}
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 8000e1a:	6050      	str	r0, [r2, #4]
	if( xTimeToWake < xTickCount )
 8000e1c:	689a      	ldr	r2, [r3, #8]
 8000e1e:	4282      	cmp	r2, r0
{
 8000e20:	4604      	mov	r4, r0
	if( xTimeToWake < xTickCount )
 8000e22:	d906      	bls.n	8000e32 <prvAddCurrentTaskToDelayedList+0x1e>
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 8000e24:	68d8      	ldr	r0, [r3, #12]
 8000e26:	6859      	ldr	r1, [r3, #4]
}
 8000e28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 8000e2c:	3104      	adds	r1, #4
 8000e2e:	f7ff bfb8 	b.w	8000da2 <vListInsert>
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 8000e32:	6818      	ldr	r0, [r3, #0]
 8000e34:	6859      	ldr	r1, [r3, #4]
 8000e36:	3104      	adds	r1, #4
 8000e38:	f7ff ffb3 	bl	8000da2 <vListInsert>
		if( xTimeToWake < xNextTaskUnblockTime )
 8000e3c:	4b03      	ldr	r3, [pc, #12]	; (8000e4c <prvAddCurrentTaskToDelayedList+0x38>)
 8000e3e:	681a      	ldr	r2, [r3, #0]
 8000e40:	42a2      	cmp	r2, r4
			xNextTaskUnblockTime = xTimeToWake;
 8000e42:	bf88      	it	hi
 8000e44:	601c      	strhi	r4, [r3, #0]
}
 8000e46:	bd10      	pop	{r4, pc}
 8000e48:	20000028 	.word	0x20000028
 8000e4c:	20000004 	.word	0x20000004

08000e50 <xTaskGenericCreate.part.5>:
BaseType_t xTaskGenericCreate( TaskFunction_t pxTaskCode, const char * const pcName, const uint16_t usStackDepth, void * const pvParameters, UBaseType_t uxPriority, TaskHandle_t * const pxCreatedTask, StackType_t * const puxStackBuffer, const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
 8000e50:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000e54:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8000e56:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8000e58:	4681      	mov	r9, r0
 8000e5a:	4688      	mov	r8, r1
 8000e5c:	4615      	mov	r5, r2
 8000e5e:	469a      	mov	sl, r3
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000e60:	b936      	cbnz	r6, 8000e70 <xTaskGenericCreate.part.5+0x20>
 8000e62:	0090      	lsls	r0, r2, #2
 8000e64:	f000 fc2c 	bl	80016c0 <pvPortMalloc>
		if( pxStack != NULL )
 8000e68:	4606      	mov	r6, r0
 8000e6a:	2800      	cmp	r0, #0
 8000e6c:	f000 80a4 	beq.w	8000fb8 <xTaskGenericCreate.part.5+0x168>
			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 8000e70:	205c      	movs	r0, #92	; 0x5c
 8000e72:	f000 fc25 	bl	80016c0 <pvPortMalloc>
			if( pxNewTCB != NULL )
 8000e76:	4604      	mov	r4, r0
 8000e78:	2800      	cmp	r0, #0
 8000e7a:	f000 809a 	beq.w	8000fb2 <xTaskGenericCreate.part.5+0x162>
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
 8000e7e:	00ad      	lsls	r5, r5, #2
 8000e80:	462a      	mov	r2, r5
				pxNewTCB->pxStack = pxStack;
 8000e82:	6306      	str	r6, [r0, #48]	; 0x30
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
 8000e84:	21a5      	movs	r1, #165	; 0xa5
 8000e86:	4630      	mov	r0, r6
 8000e88:	f000 fe22 	bl	8001ad0 <memset>
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
 8000e8c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000e8e:	3d04      	subs	r5, #4
 8000e90:	441d      	add	r5, r3
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8000e92:	f025 0507 	bic.w	r5, r5, #7
 8000e96:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 8000e9a:	f104 0234 	add.w	r2, r4, #52	; 0x34
 8000e9e:	f108 080f 	add.w	r8, r8, #15
		pxTCB->pcTaskName[ x ] = pcName[ x ];
 8000ea2:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8000ea6:	f802 1b01 	strb.w	r1, [r2], #1
		if( pcName[ x ] == 0x00 )
 8000eaa:	7819      	ldrb	r1, [r3, #0]
 8000eac:	b109      	cbz	r1, 8000eb2 <xTaskGenericCreate.part.5+0x62>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000eae:	4598      	cmp	r8, r3
 8000eb0:	d1f7      	bne.n	8000ea2 <xTaskGenericCreate.part.5+0x52>
 8000eb2:	2f06      	cmp	r7, #6
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8000eb4:	f04f 0600 	mov.w	r6, #0
 8000eb8:	46bb      	mov	fp, r7
	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 8000eba:	f104 0804 	add.w	r8, r4, #4
 8000ebe:	bf28      	it	cs
 8000ec0:	f04f 0b06 	movcs.w	fp, #6
 8000ec4:	4640      	mov	r0, r8
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8000ec6:	f884 6043 	strb.w	r6, [r4, #67]	; 0x43
	pxTCB->uxPriority = uxPriority;
 8000eca:	f8c4 b02c 	str.w	fp, [r4, #44]	; 0x2c
		pxTCB->uxMutexesHeld = 0;
 8000ece:	e9c4 b613 	strd	fp, r6, [r4, #76]	; 0x4c
	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 8000ed2:	f7ff ff57 	bl	8000d84 <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
 8000ed6:	f104 0018 	add.w	r0, r4, #24
 8000eda:	f7ff ff53 	bl	8000d84 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000ede:	f1cb 0307 	rsb	r3, fp, #7
 8000ee2:	61a3      	str	r3, [r4, #24]
		pxTCB->ulNotifiedValue = 0;
 8000ee4:	6566      	str	r6, [r4, #84]	; 0x54
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
 8000ee6:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
 8000ee8:	6264      	str	r4, [r4, #36]	; 0x24
		pxTCB->eNotifyState = eNotWaitingNotification;
 8000eea:	f884 6058 	strb.w	r6, [r4, #88]	; 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8000eee:	4652      	mov	r2, sl
 8000ef0:	4649      	mov	r1, r9
 8000ef2:	4628      	mov	r0, r5
 8000ef4:	f000 fa9c 	bl	8001430 <pxPortInitialiseStack>
		if( ( void * ) pxCreatedTask != NULL )
 8000ef8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8000efa:	6020      	str	r0, [r4, #0]
		if( ( void * ) pxCreatedTask != NULL )
 8000efc:	b103      	cbz	r3, 8000f00 <xTaskGenericCreate.part.5+0xb0>
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8000efe:	601c      	str	r4, [r3, #0]
			uxCurrentNumberOfTasks++;
 8000f00:	4d34      	ldr	r5, [pc, #208]	; (8000fd4 <xTaskGenericCreate.part.5+0x184>)
		taskENTER_CRITICAL();
 8000f02:	f000 fab7 	bl	8001474 <vPortEnterCritical>
			uxCurrentNumberOfTasks++;
 8000f06:	692b      	ldr	r3, [r5, #16]
 8000f08:	3301      	adds	r3, #1
 8000f0a:	612b      	str	r3, [r5, #16]
			if( pxCurrentTCB == NULL )
 8000f0c:	686e      	ldr	r6, [r5, #4]
 8000f0e:	f105 0914 	add.w	r9, r5, #20
 8000f12:	2e00      	cmp	r6, #0
 8000f14:	d153      	bne.n	8000fbe <xTaskGenericCreate.part.5+0x16e>
				pxCurrentTCB =  pxNewTCB;
 8000f16:	606c      	str	r4, [r5, #4]
				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8000f18:	692b      	ldr	r3, [r5, #16]
 8000f1a:	2b01      	cmp	r3, #1
 8000f1c:	d120      	bne.n	8000f60 <xTaskGenericCreate.part.5+0x110>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8000f1e:	f04f 0a14 	mov.w	sl, #20
 8000f22:	fb0a 9006 	mla	r0, sl, r6, r9
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8000f26:	3601      	adds	r6, #1
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8000f28:	f7ff ff21 	bl	8000d6e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8000f2c:	2e07      	cmp	r6, #7
 8000f2e:	d1f8      	bne.n	8000f22 <xTaskGenericCreate.part.5+0xd2>
	vListInitialise( &xDelayedTaskList1 );
 8000f30:	4e29      	ldr	r6, [pc, #164]	; (8000fd8 <xTaskGenericCreate.part.5+0x188>)
 8000f32:	4630      	mov	r0, r6
	vListInitialise( &xDelayedTaskList2 );
 8000f34:	f106 0a14 	add.w	sl, r6, #20
	vListInitialise( &xDelayedTaskList1 );
 8000f38:	f7ff ff19 	bl	8000d6e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8000f3c:	4650      	mov	r0, sl
 8000f3e:	f7ff ff16 	bl	8000d6e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8000f42:	f106 0028 	add.w	r0, r6, #40	; 0x28
 8000f46:	f7ff ff12 	bl	8000d6e <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8000f4a:	f106 003c 	add.w	r0, r6, #60	; 0x3c
 8000f4e:	f7ff ff0e 	bl	8000d6e <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 8000f52:	f106 0050 	add.w	r0, r6, #80	; 0x50
 8000f56:	f7ff ff0a 	bl	8000d6e <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8000f5a:	602e      	str	r6, [r5, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8000f5c:	f8c5 a00c 	str.w	sl, [r5, #12]
			uxTaskNumber++;
 8000f60:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
			prvAddTaskToReadyList( pxNewTCB );
 8000f64:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000f66:	f8d5 110c 	ldr.w	r1, [r5, #268]	; 0x10c
			uxTaskNumber++;
 8000f6a:	3301      	adds	r3, #1
				pxNewTCB->uxTCBNumber = uxTaskNumber;
 8000f6c:	6463      	str	r3, [r4, #68]	; 0x44
			prvAddTaskToReadyList( pxNewTCB );
 8000f6e:	2401      	movs	r4, #1
			uxTaskNumber++;
 8000f70:	f8c5 3108 	str.w	r3, [r5, #264]	; 0x108
			prvAddTaskToReadyList( pxNewTCB );
 8000f74:	2014      	movs	r0, #20
 8000f76:	fa04 f302 	lsl.w	r3, r4, r2
 8000f7a:	430b      	orrs	r3, r1
 8000f7c:	fb00 9002 	mla	r0, r0, r2, r9
 8000f80:	4641      	mov	r1, r8
 8000f82:	f8c5 310c 	str.w	r3, [r5, #268]	; 0x10c
 8000f86:	f7ff ff00 	bl	8000d8a <vListInsertEnd>
		taskEXIT_CRITICAL();
 8000f8a:	f000 fa95 	bl	80014b8 <vPortExitCritical>
		if( xSchedulerRunning != pdFALSE )
 8000f8e:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
 8000f92:	b15b      	cbz	r3, 8000fac <xTaskGenericCreate.part.5+0x15c>
			if( pxCurrentTCB->uxPriority < uxPriority )
 8000f94:	686b      	ldr	r3, [r5, #4]
 8000f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f98:	429f      	cmp	r7, r3
 8000f9a:	d907      	bls.n	8000fac <xTaskGenericCreate.part.5+0x15c>
				taskYIELD_IF_USING_PREEMPTION();
 8000f9c:	4b0f      	ldr	r3, [pc, #60]	; (8000fdc <xTaskGenericCreate.part.5+0x18c>)
 8000f9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000fa2:	601a      	str	r2, [r3, #0]
 8000fa4:	f3bf 8f4f 	dsb	sy
 8000fa8:	f3bf 8f6f 	isb	sy
}
 8000fac:	4620      	mov	r0, r4
 8000fae:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				vPortFree( pxStack );
 8000fb2:	4630      	mov	r0, r6
 8000fb4:	f000 fc04 	bl	80017c0 <vPortFree>
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8000fb8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8000fbc:	e7f6      	b.n	8000fac <xTaskGenericCreate.part.5+0x15c>
				if( xSchedulerRunning == pdFALSE )
 8000fbe:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d1cc      	bne.n	8000f60 <xTaskGenericCreate.part.5+0x110>
					if( pxCurrentTCB->uxPriority <= uxPriority )
 8000fc6:	686b      	ldr	r3, [r5, #4]
 8000fc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fca:	429f      	cmp	r7, r3
						pxCurrentTCB = pxNewTCB;
 8000fcc:	bf28      	it	cs
 8000fce:	606c      	strcs	r4, [r5, #4]
 8000fd0:	e7c6      	b.n	8000f60 <xTaskGenericCreate.part.5+0x110>
 8000fd2:	bf00      	nop
 8000fd4:	20000028 	.word	0x20000028
 8000fd8:	200000c8 	.word	0x200000c8
 8000fdc:	e000ed04 	.word	0xe000ed04

08000fe0 <xTaskGenericCreate>:
{
 8000fe0:	b410      	push	{r4}
 8000fe2:	9c01      	ldr	r4, [sp, #4]
	configASSERT( pxTaskCode );
 8000fe4:	b940      	cbnz	r0, 8000ff8 <xTaskGenericCreate+0x18>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000fe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000fea:	f383 8811 	msr	BASEPRI, r3
 8000fee:	f3bf 8f6f 	isb	sy
 8000ff2:	f3bf 8f4f 	dsb	sy
 8000ff6:	e7fe      	b.n	8000ff6 <xTaskGenericCreate+0x16>
	configASSERT( ( ( uxPriority & ( UBaseType_t ) ( ~portPRIVILEGE_BIT ) ) < ( UBaseType_t ) configMAX_PRIORITIES ) );
 8000ff8:	2c06      	cmp	r4, #6
 8000ffa:	d908      	bls.n	800100e <xTaskGenericCreate+0x2e>
 8000ffc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001000:	f383 8811 	msr	BASEPRI, r3
 8001004:	f3bf 8f6f 	isb	sy
 8001008:	f3bf 8f4f 	dsb	sy
 800100c:	e7fe      	b.n	800100c <xTaskGenericCreate+0x2c>
}
 800100e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001012:	f7ff bf1d 	b.w	8000e50 <xTaskGenericCreate.part.5>
	...

08001018 <vTaskStartScheduler>:
{
 8001018:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800101a:	2400      	movs	r4, #0
 800101c:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8001020:	9400      	str	r4, [sp, #0]
 8001022:	4623      	mov	r3, r4
 8001024:	2280      	movs	r2, #128	; 0x80
 8001026:	4911      	ldr	r1, [pc, #68]	; (800106c <vTaskStartScheduler+0x54>)
 8001028:	4811      	ldr	r0, [pc, #68]	; (8001070 <vTaskStartScheduler+0x58>)
 800102a:	f7ff ff11 	bl	8000e50 <xTaskGenericCreate.part.5>
	if( xReturn == pdPASS )
 800102e:	2801      	cmp	r0, #1
 8001030:	d110      	bne.n	8001054 <vTaskStartScheduler+0x3c>
 8001032:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001036:	f383 8811 	msr	BASEPRI, r3
 800103a:	f3bf 8f6f 	isb	sy
 800103e:	f3bf 8f4f 	dsb	sy
		xSchedulerRunning = pdTRUE;
 8001042:	4b0c      	ldr	r3, [pc, #48]	; (8001074 <vTaskStartScheduler+0x5c>)
 8001044:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
		xTickCount = ( TickType_t ) 0U;
 8001048:	609c      	str	r4, [r3, #8]
}
 800104a:	b004      	add	sp, #16
 800104c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 8001050:	f000 baa2 	b.w	8001598 <xPortStartScheduler>
		configASSERT( xReturn );
 8001054:	b940      	cbnz	r0, 8001068 <vTaskStartScheduler+0x50>
 8001056:	f04f 0350 	mov.w	r3, #80	; 0x50
 800105a:	f383 8811 	msr	BASEPRI, r3
 800105e:	f3bf 8f6f 	isb	sy
 8001062:	f3bf 8f4f 	dsb	sy
 8001066:	e7fe      	b.n	8001066 <vTaskStartScheduler+0x4e>
}
 8001068:	b004      	add	sp, #16
 800106a:	bd10      	pop	{r4, pc}
 800106c:	08001b30 	.word	0x08001b30
 8001070:	080012d9 	.word	0x080012d9
 8001074:	20000028 	.word	0x20000028

08001078 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8001078:	4a03      	ldr	r2, [pc, #12]	; (8001088 <vTaskSuspendAll+0x10>)
 800107a:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
 800107e:	3301      	adds	r3, #1
 8001080:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
}
 8001084:	4770      	bx	lr
 8001086:	bf00      	nop
 8001088:	20000028 	.word	0x20000028

0800108c <xTaskIncrementTick>:
{
 800108c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001090:	4b3b      	ldr	r3, [pc, #236]	; (8001180 <xTaskIncrementTick+0xf4>)
 8001092:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
 8001096:	461c      	mov	r4, r3
 8001098:	2a00      	cmp	r2, #0
 800109a:	d16a      	bne.n	8001172 <xTaskIncrementTick+0xe6>
		++xTickCount;
 800109c:	689a      	ldr	r2, [r3, #8]
 800109e:	3201      	adds	r2, #1
 80010a0:	609a      	str	r2, [r3, #8]
			const TickType_t xConstTickCount = xTickCount;
 80010a2:	689f      	ldr	r7, [r3, #8]
			if( xConstTickCount == ( TickType_t ) 0U )
 80010a4:	b9b7      	cbnz	r7, 80010d4 <xTaskIncrementTick+0x48>
				taskSWITCH_DELAYED_LISTS();
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	b143      	cbz	r3, 80010be <xTaskIncrementTick+0x32>
 80010ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80010b0:	f383 8811 	msr	BASEPRI, r3
 80010b4:	f3bf 8f6f 	isb	sy
 80010b8:	f3bf 8f4f 	dsb	sy
 80010bc:	e7fe      	b.n	80010bc <xTaskIncrementTick+0x30>
 80010be:	6823      	ldr	r3, [r4, #0]
 80010c0:	68e2      	ldr	r2, [r4, #12]
 80010c2:	6022      	str	r2, [r4, #0]
 80010c4:	60e3      	str	r3, [r4, #12]
 80010c6:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
 80010ca:	3301      	adds	r3, #1
 80010cc:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
 80010d0:	f7ff fe8e 	bl	8000df0 <prvResetNextTaskUnblockTime>
			if( xConstTickCount >= xNextTaskUnblockTime )
 80010d4:	4e2b      	ldr	r6, [pc, #172]	; (8001184 <xTaskIncrementTick+0xf8>)
 80010d6:	6833      	ldr	r3, [r6, #0]
 80010d8:	42bb      	cmp	r3, r7
BaseType_t xSwitchRequired = pdFALSE;
 80010da:	f04f 0500 	mov.w	r5, #0
			if( xConstTickCount >= xNextTaskUnblockTime )
 80010de:	d910      	bls.n	8001102 <xTaskIncrementTick+0x76>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80010e0:	6863      	ldr	r3, [r4, #4]
 80010e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010e4:	2214      	movs	r2, #20
 80010e6:	fb02 4303 	mla	r3, r2, r3, r4
 80010ea:	695b      	ldr	r3, [r3, #20]
				xSwitchRequired = pdTRUE;
 80010ec:	2b02      	cmp	r3, #2
 80010ee:	bf28      	it	cs
 80010f0:	2501      	movcs	r5, #1
		if( xYieldPending != pdFALSE )
 80010f2:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
			xSwitchRequired = pdTRUE;
 80010f6:	2b00      	cmp	r3, #0
}
 80010f8:	bf0c      	ite	eq
 80010fa:	4628      	moveq	r0, r5
 80010fc:	2001      	movne	r0, #1
 80010fe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
						prvAddTaskToReadyList( pxTCB );
 8001102:	f04f 0b01 	mov.w	fp, #1
 8001106:	f04f 0a14 	mov.w	sl, #20
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800110a:	6823      	ldr	r3, [r4, #0]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	b91b      	cbnz	r3, 8001118 <xTaskIncrementTick+0x8c>
						xNextTaskUnblockTime = portMAX_DELAY;
 8001110:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001114:	6033      	str	r3, [r6, #0]
						break;
 8001116:	e7e3      	b.n	80010e0 <xTaskIncrementTick+0x54>
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001118:	6823      	ldr	r3, [r4, #0]
 800111a:	68db      	ldr	r3, [r3, #12]
 800111c:	f8d3 900c 	ldr.w	r9, [r3, #12]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
 8001120:	f8d9 2004 	ldr.w	r2, [r9, #4]
						if( xConstTickCount < xItemValue )
 8001124:	4297      	cmp	r7, r2
 8001126:	d201      	bcs.n	800112c <xTaskIncrementTick+0xa0>
							xNextTaskUnblockTime = xItemValue;
 8001128:	6032      	str	r2, [r6, #0]
							break;
 800112a:	e7d9      	b.n	80010e0 <xTaskIncrementTick+0x54>
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800112c:	f109 0804 	add.w	r8, r9, #4
 8001130:	4640      	mov	r0, r8
 8001132:	f7ff fe4d 	bl	8000dd0 <uxListRemove>
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001136:	f8d9 2028 	ldr.w	r2, [r9, #40]	; 0x28
 800113a:	b11a      	cbz	r2, 8001144 <xTaskIncrementTick+0xb8>
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800113c:	f109 0018 	add.w	r0, r9, #24
 8001140:	f7ff fe46 	bl	8000dd0 <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 8001144:	f8d9 002c 	ldr.w	r0, [r9, #44]	; 0x2c
 8001148:	f8d4 110c 	ldr.w	r1, [r4, #268]	; 0x10c
 800114c:	4b0e      	ldr	r3, [pc, #56]	; (8001188 <xTaskIncrementTick+0xfc>)
 800114e:	fa0b f200 	lsl.w	r2, fp, r0
 8001152:	430a      	orrs	r2, r1
 8001154:	fb0a 3000 	mla	r0, sl, r0, r3
 8001158:	4641      	mov	r1, r8
 800115a:	f8c4 210c 	str.w	r2, [r4, #268]	; 0x10c
 800115e:	f7ff fe14 	bl	8000d8a <vListInsertEnd>
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001162:	6861      	ldr	r1, [r4, #4]
 8001164:	f8d9 202c 	ldr.w	r2, [r9, #44]	; 0x2c
 8001168:	6acb      	ldr	r3, [r1, #44]	; 0x2c
								xSwitchRequired = pdTRUE;
 800116a:	429a      	cmp	r2, r3
 800116c:	bf28      	it	cs
 800116e:	2501      	movcs	r5, #1
 8001170:	e7cb      	b.n	800110a <xTaskIncrementTick+0x7e>
		++uxPendedTicks;
 8001172:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8001176:	3301      	adds	r3, #1
 8001178:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
BaseType_t xSwitchRequired = pdFALSE;
 800117c:	2500      	movs	r5, #0
 800117e:	e7b8      	b.n	80010f2 <xTaskIncrementTick+0x66>
 8001180:	20000028 	.word	0x20000028
 8001184:	20000004 	.word	0x20000004
 8001188:	2000003c 	.word	0x2000003c

0800118c <xTaskResumeAll>:
{
 800118c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
 8001190:	4c33      	ldr	r4, [pc, #204]	; (8001260 <xTaskResumeAll+0xd4>)
 8001192:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 8001196:	b943      	cbnz	r3, 80011aa <xTaskResumeAll+0x1e>
 8001198:	f04f 0350 	mov.w	r3, #80	; 0x50
 800119c:	f383 8811 	msr	BASEPRI, r3
 80011a0:	f3bf 8f6f 	isb	sy
 80011a4:	f3bf 8f4f 	dsb	sy
 80011a8:	e7fe      	b.n	80011a8 <xTaskResumeAll+0x1c>
	taskENTER_CRITICAL();
 80011aa:	f000 f963 	bl	8001474 <vPortEnterCritical>
		--uxSchedulerSuspended;
 80011ae:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 80011b2:	3b01      	subs	r3, #1
 80011b4:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80011b8:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 80011bc:	b12b      	cbz	r3, 80011ca <xTaskResumeAll+0x3e>
BaseType_t xAlreadyYielded = pdFALSE;
 80011be:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 80011c0:	f000 f97a 	bl	80014b8 <vPortExitCritical>
}
 80011c4:	4620      	mov	r0, r4
 80011c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80011ca:	6923      	ldr	r3, [r4, #16]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d0f6      	beq.n	80011be <xTaskResumeAll+0x32>
					prvAddTaskToReadyList( pxTCB );
 80011d0:	2601      	movs	r6, #1
 80011d2:	f104 0714 	add.w	r7, r4, #20
 80011d6:	f04f 0814 	mov.w	r8, #20
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80011da:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
 80011de:	b99b      	cbnz	r3, 8001208 <xTaskResumeAll+0x7c>
				if( uxPendedTicks > ( UBaseType_t ) 0U )
 80011e0:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
 80011e4:	b11b      	cbz	r3, 80011ee <xTaskResumeAll+0x62>
							xYieldPending = pdTRUE;
 80011e6:	2501      	movs	r5, #1
					while( uxPendedTicks > ( UBaseType_t ) 0U )
 80011e8:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
 80011ec:	bb6b      	cbnz	r3, 800124a <xTaskResumeAll+0xbe>
				if( xYieldPending == pdTRUE )
 80011ee:	f8d4 4120 	ldr.w	r4, [r4, #288]	; 0x120
 80011f2:	2c01      	cmp	r4, #1
 80011f4:	d1e3      	bne.n	80011be <xTaskResumeAll+0x32>
					taskYIELD_IF_USING_PREEMPTION();
 80011f6:	4b1b      	ldr	r3, [pc, #108]	; (8001264 <xTaskResumeAll+0xd8>)
 80011f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80011fc:	601a      	str	r2, [r3, #0]
 80011fe:	f3bf 8f4f 	dsb	sy
 8001202:	f3bf 8f6f 	isb	sy
 8001206:	e7db      	b.n	80011c0 <xTaskResumeAll+0x34>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8001208:	f8d4 30d4 	ldr.w	r3, [r4, #212]	; 0xd4
 800120c:	68dd      	ldr	r5, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800120e:	f105 0904 	add.w	r9, r5, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001212:	f105 0018 	add.w	r0, r5, #24
 8001216:	f7ff fddb 	bl	8000dd0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800121a:	4648      	mov	r0, r9
 800121c:	f7ff fdd8 	bl	8000dd0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8001220:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8001222:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8001226:	fa06 f300 	lsl.w	r3, r6, r0
 800122a:	4313      	orrs	r3, r2
 800122c:	4649      	mov	r1, r9
 800122e:	fb08 7000 	mla	r0, r8, r0, r7
 8001232:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
 8001236:	f7ff fda8 	bl	8000d8a <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800123a:	6863      	ldr	r3, [r4, #4]
 800123c:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 800123e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001240:	429a      	cmp	r2, r3
 8001242:	d3ca      	bcc.n	80011da <xTaskResumeAll+0x4e>
						xYieldPending = pdTRUE;
 8001244:	f8c4 6120 	str.w	r6, [r4, #288]	; 0x120
 8001248:	e7c5      	b.n	80011d6 <xTaskResumeAll+0x4a>
						if( xTaskIncrementTick() != pdFALSE )
 800124a:	f7ff ff1f 	bl	800108c <xTaskIncrementTick>
 800124e:	b108      	cbz	r0, 8001254 <xTaskResumeAll+0xc8>
							xYieldPending = pdTRUE;
 8001250:	f8c4 5120 	str.w	r5, [r4, #288]	; 0x120
						--uxPendedTicks;
 8001254:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
 8001258:	3b01      	subs	r3, #1
 800125a:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
 800125e:	e7c3      	b.n	80011e8 <xTaskResumeAll+0x5c>
 8001260:	20000028 	.word	0x20000028
 8001264:	e000ed04 	.word	0xe000ed04

08001268 <vTaskDelay>:
	{
 8001268:	b538      	push	{r3, r4, r5, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 800126a:	b940      	cbnz	r0, 800127e <vTaskDelay+0x16>
			portYIELD_WITHIN_API();
 800126c:	4b18      	ldr	r3, [pc, #96]	; (80012d0 <vTaskDelay+0x68>)
 800126e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001272:	601a      	str	r2, [r3, #0]
 8001274:	f3bf 8f4f 	dsb	sy
 8001278:	f3bf 8f6f 	isb	sy
	}
 800127c:	bd38      	pop	{r3, r4, r5, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 800127e:	4c15      	ldr	r4, [pc, #84]	; (80012d4 <vTaskDelay+0x6c>)
 8001280:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 8001284:	b143      	cbz	r3, 8001298 <vTaskDelay+0x30>
 8001286:	f04f 0350 	mov.w	r3, #80	; 0x50
 800128a:	f383 8811 	msr	BASEPRI, r3
 800128e:	f3bf 8f6f 	isb	sy
 8001292:	f3bf 8f4f 	dsb	sy
 8001296:	e7fe      	b.n	8001296 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8001298:	f7ff feee 	bl	8001078 <vTaskSuspendAll>
				xTimeToWake = xTickCount + xTicksToDelay;
 800129c:	68a5      	ldr	r5, [r4, #8]
 800129e:	4405      	add	r5, r0
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 80012a0:	6860      	ldr	r0, [r4, #4]
 80012a2:	3004      	adds	r0, #4
 80012a4:	f7ff fd94 	bl	8000dd0 <uxListRemove>
 80012a8:	b948      	cbnz	r0, 80012be <vTaskDelay+0x56>
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80012aa:	6862      	ldr	r2, [r4, #4]
 80012ac:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
 80012b0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80012b2:	2201      	movs	r2, #1
 80012b4:	408a      	lsls	r2, r1
 80012b6:	ea23 0302 	bic.w	r3, r3, r2
 80012ba:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
				prvAddCurrentTaskToDelayedList( xTimeToWake );
 80012be:	4628      	mov	r0, r5
 80012c0:	f7ff fda8 	bl	8000e14 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 80012c4:	f7ff ff62 	bl	800118c <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 80012c8:	2800      	cmp	r0, #0
 80012ca:	d0cf      	beq.n	800126c <vTaskDelay+0x4>
 80012cc:	e7d6      	b.n	800127c <vTaskDelay+0x14>
 80012ce:	bf00      	nop
 80012d0:	e000ed04 	.word	0xe000ed04
 80012d4:	20000028 	.word	0x20000028

080012d8 <prvIdleTask>:
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
 80012d8:	4c18      	ldr	r4, [pc, #96]	; (800133c <prvIdleTask+0x64>)
				taskYIELD();
 80012da:	4e19      	ldr	r6, [pc, #100]	; (8001340 <prvIdleTask+0x68>)
{
 80012dc:	b580      	push	{r7, lr}
				taskYIELD();
 80012de:	f04f 5780 	mov.w	r7, #268435456	; 0x10000000
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
 80012e2:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
 80012e6:	b943      	cbnz	r3, 80012fa <prvIdleTask+0x22>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80012e8:	6963      	ldr	r3, [r4, #20]
 80012ea:	2b01      	cmp	r3, #1
 80012ec:	d9f9      	bls.n	80012e2 <prvIdleTask+0xa>
				taskYIELD();
 80012ee:	6037      	str	r7, [r6, #0]
 80012f0:	f3bf 8f4f 	dsb	sy
 80012f4:	f3bf 8f6f 	isb	sy
 80012f8:	e7f3      	b.n	80012e2 <prvIdleTask+0xa>
			vTaskSuspendAll();
 80012fa:	f7ff febd 	bl	8001078 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 80012fe:	f8d4 50dc 	ldr.w	r5, [r4, #220]	; 0xdc
			( void ) xTaskResumeAll();
 8001302:	f7ff ff43 	bl	800118c <xTaskResumeAll>
			if( xListIsEmpty == pdFALSE )
 8001306:	2d00      	cmp	r5, #0
 8001308:	d0eb      	beq.n	80012e2 <prvIdleTask+0xa>
				taskENTER_CRITICAL();
 800130a:	f000 f8b3 	bl	8001474 <vPortEnterCritical>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800130e:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
 8001312:	68dd      	ldr	r5, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 8001314:	1d28      	adds	r0, r5, #4
 8001316:	f7ff fd5b 	bl	8000dd0 <uxListRemove>
					--uxCurrentNumberOfTasks;
 800131a:	6923      	ldr	r3, [r4, #16]
 800131c:	3b01      	subs	r3, #1
 800131e:	6123      	str	r3, [r4, #16]
					--uxTasksDeleted;
 8001320:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
 8001324:	3b01      	subs	r3, #1
 8001326:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
				taskEXIT_CRITICAL();
 800132a:	f000 f8c5 	bl	80014b8 <vPortExitCritical>
			vPortFreeAligned( pxTCB->pxStack );
 800132e:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8001330:	f000 fa46 	bl	80017c0 <vPortFree>
		vPortFree( pxTCB );
 8001334:	4628      	mov	r0, r5
 8001336:	f000 fa43 	bl	80017c0 <vPortFree>
 800133a:	e7d2      	b.n	80012e2 <prvIdleTask+0xa>
 800133c:	20000028 	.word	0x20000028
 8001340:	e000ed04 	.word	0xe000ed04

08001344 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001344:	4b18      	ldr	r3, [pc, #96]	; (80013a8 <vTaskSwitchContext+0x64>)
 8001346:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
{
 800134a:	b510      	push	{r4, lr}
 800134c:	4618      	mov	r0, r3
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800134e:	b11a      	cbz	r2, 8001358 <vTaskSwitchContext+0x14>
		xYieldPending = pdTRUE;
 8001350:	2201      	movs	r2, #1
 8001352:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 8001356:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 8001358:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800135c:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 8001360:	fab2 f282 	clz	r2, r2
 8001364:	b2d2      	uxtb	r2, r2
 8001366:	f1c2 021f 	rsb	r2, r2, #31
 800136a:	2114      	movs	r1, #20
 800136c:	4351      	muls	r1, r2
 800136e:	440b      	add	r3, r1
 8001370:	695c      	ldr	r4, [r3, #20]
 8001372:	b944      	cbnz	r4, 8001386 <vTaskSwitchContext+0x42>
	__asm volatile
 8001374:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001378:	f383 8811 	msr	BASEPRI, r3
 800137c:	f3bf 8f6f 	isb	sy
 8001380:	f3bf 8f4f 	dsb	sy
 8001384:	e7fe      	b.n	8001384 <vTaskSwitchContext+0x40>
 8001386:	699c      	ldr	r4, [r3, #24]
 8001388:	4401      	add	r1, r0
 800138a:	6864      	ldr	r4, [r4, #4]
 800138c:	619c      	str	r4, [r3, #24]
 800138e:	311c      	adds	r1, #28
 8001390:	428c      	cmp	r4, r1
 8001392:	bf04      	itt	eq
 8001394:	6861      	ldreq	r1, [r4, #4]
 8001396:	6199      	streq	r1, [r3, #24]
 8001398:	2314      	movs	r3, #20
 800139a:	fb03 0202 	mla	r2, r3, r2, r0
 800139e:	6993      	ldr	r3, [r2, #24]
 80013a0:	68db      	ldr	r3, [r3, #12]
 80013a2:	6043      	str	r3, [r0, #4]
}
 80013a4:	e7d7      	b.n	8001356 <vTaskSwitchContext+0x12>
 80013a6:	bf00      	nop
 80013a8:	20000028 	.word	0x20000028

080013ac <xTaskGetSchedulerState>:

	BaseType_t xTaskGetSchedulerState( void )
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80013ac:	4b06      	ldr	r3, [pc, #24]	; (80013c8 <xTaskGetSchedulerState+0x1c>)
 80013ae:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 80013b2:	b132      	cbz	r2, 80013c2 <xTaskGetSchedulerState+0x16>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80013b4:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 80013b8:	2b00      	cmp	r3, #0
			{
				xReturn = taskSCHEDULER_RUNNING;
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80013ba:	bf0c      	ite	eq
 80013bc:	2002      	moveq	r0, #2
 80013be:	2000      	movne	r0, #0
 80013c0:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 80013c2:	2001      	movs	r0, #1
			}
		}

		return xReturn;
	}
 80013c4:	4770      	bx	lr
 80013c6:	bf00      	nop
 80013c8:	20000028 	.word	0x20000028

080013cc <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80013cc:	4b0a      	ldr	r3, [pc, #40]	; (80013f8 <prvTaskExitError+0x2c>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	3301      	adds	r3, #1
 80013d2:	d008      	beq.n	80013e6 <prvTaskExitError+0x1a>
 80013d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80013d8:	f383 8811 	msr	BASEPRI, r3
 80013dc:	f3bf 8f6f 	isb	sy
 80013e0:	f3bf 8f4f 	dsb	sy
 80013e4:	e7fe      	b.n	80013e4 <prvTaskExitError+0x18>
 80013e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80013ea:	f383 8811 	msr	BASEPRI, r3
 80013ee:	f3bf 8f6f 	isb	sy
 80013f2:	f3bf 8f4f 	dsb	sy
 80013f6:	e7fe      	b.n	80013f6 <prvTaskExitError+0x2a>
 80013f8:	20000008 	.word	0x20000008

080013fc <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80013fc:	4806      	ldr	r0, [pc, #24]	; (8001418 <prvPortStartFirstTask+0x1c>)
 80013fe:	6800      	ldr	r0, [r0, #0]
 8001400:	6800      	ldr	r0, [r0, #0]
 8001402:	f380 8808 	msr	MSP, r0
 8001406:	b662      	cpsie	i
 8001408:	b661      	cpsie	f
 800140a:	f3bf 8f4f 	dsb	sy
 800140e:	f3bf 8f6f 	isb	sy
 8001412:	df00      	svc	0
 8001414:	bf00      	nop
 8001416:	0000      	.short	0x0000
 8001418:	e000ed08 	.word	0xe000ed08

0800141c <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800141c:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800142c <vPortEnableVFP+0x10>
 8001420:	6801      	ldr	r1, [r0, #0]
 8001422:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8001426:	6001      	str	r1, [r0, #0]
 8001428:	4770      	bx	lr
 800142a:	0000      	.short	0x0000
 800142c:	e000ed88 	.word	0xe000ed88

08001430 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8001430:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 8001434:	e940 1302 	strd	r1, r3, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8001438:	4b05      	ldr	r3, [pc, #20]	; (8001450 <pxPortInitialiseStack+0x20>)
 800143a:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 800143e:	f06f 0302 	mvn.w	r3, #2
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8001442:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 8001446:	f840 3c24 	str.w	r3, [r0, #-36]
}
 800144a:	3844      	subs	r0, #68	; 0x44
 800144c:	4770      	bx	lr
 800144e:	bf00      	nop
 8001450:	080013cd 	.word	0x080013cd

08001454 <SVC_Handler>:
	__asm volatile (
 8001454:	4b06      	ldr	r3, [pc, #24]	; (8001470 <pxCurrentTCBConst2>)
 8001456:	6819      	ldr	r1, [r3, #0]
 8001458:	6808      	ldr	r0, [r1, #0]
 800145a:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800145e:	f380 8809 	msr	PSP, r0
 8001462:	f3bf 8f6f 	isb	sy
 8001466:	f04f 0000 	mov.w	r0, #0
 800146a:	f380 8811 	msr	BASEPRI, r0
 800146e:	4770      	bx	lr

08001470 <pxCurrentTCBConst2>:
 8001470:	2000002c 	.word	0x2000002c

08001474 <vPortEnterCritical>:
 8001474:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001478:	f383 8811 	msr	BASEPRI, r3
 800147c:	f3bf 8f6f 	isb	sy
 8001480:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8001484:	4a0a      	ldr	r2, [pc, #40]	; (80014b0 <vPortEnterCritical+0x3c>)
 8001486:	6813      	ldr	r3, [r2, #0]
 8001488:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 800148a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 800148c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800148e:	d10d      	bne.n	80014ac <vPortEnterCritical+0x38>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8001490:	4b08      	ldr	r3, [pc, #32]	; (80014b4 <vPortEnterCritical+0x40>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f013 0fff 	tst.w	r3, #255	; 0xff
 8001498:	d008      	beq.n	80014ac <vPortEnterCritical+0x38>
 800149a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800149e:	f383 8811 	msr	BASEPRI, r3
 80014a2:	f3bf 8f6f 	isb	sy
 80014a6:	f3bf 8f4f 	dsb	sy
 80014aa:	e7fe      	b.n	80014aa <vPortEnterCritical+0x36>
}
 80014ac:	4770      	bx	lr
 80014ae:	bf00      	nop
 80014b0:	20000008 	.word	0x20000008
 80014b4:	e000ed04 	.word	0xe000ed04

080014b8 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 80014b8:	4a08      	ldr	r2, [pc, #32]	; (80014dc <vPortExitCritical+0x24>)
 80014ba:	6813      	ldr	r3, [r2, #0]
 80014bc:	b943      	cbnz	r3, 80014d0 <vPortExitCritical+0x18>
 80014be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80014c2:	f383 8811 	msr	BASEPRI, r3
 80014c6:	f3bf 8f6f 	isb	sy
 80014ca:	f3bf 8f4f 	dsb	sy
 80014ce:	e7fe      	b.n	80014ce <vPortExitCritical+0x16>
	uxCriticalNesting--;
 80014d0:	3b01      	subs	r3, #1
 80014d2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80014d4:	b90b      	cbnz	r3, 80014da <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80014d6:	f383 8811 	msr	BASEPRI, r3
}
 80014da:	4770      	bx	lr
 80014dc:	20000008 	.word	0x20000008

080014e0 <PendSV_Handler>:
	__asm volatile
 80014e0:	f3ef 8009 	mrs	r0, PSP
 80014e4:	f3bf 8f6f 	isb	sy
 80014e8:	4b14      	ldr	r3, [pc, #80]	; (800153c <pxCurrentTCBConst>)
 80014ea:	681a      	ldr	r2, [r3, #0]
 80014ec:	f01e 0f10 	tst.w	lr, #16
 80014f0:	bf08      	it	eq
 80014f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80014f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80014fa:	6010      	str	r0, [r2, #0]
 80014fc:	f84d 3d04 	str.w	r3, [sp, #-4]!
 8001500:	f04f 0050 	mov.w	r0, #80	; 0x50
 8001504:	f380 8811 	msr	BASEPRI, r0
 8001508:	f3bf 8f4f 	dsb	sy
 800150c:	f3bf 8f6f 	isb	sy
 8001510:	f7ff ff18 	bl	8001344 <vTaskSwitchContext>
 8001514:	f04f 0000 	mov.w	r0, #0
 8001518:	f380 8811 	msr	BASEPRI, r0
 800151c:	bc08      	pop	{r3}
 800151e:	6819      	ldr	r1, [r3, #0]
 8001520:	6808      	ldr	r0, [r1, #0]
 8001522:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001526:	f01e 0f10 	tst.w	lr, #16
 800152a:	bf08      	it	eq
 800152c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8001530:	f380 8809 	msr	PSP, r0
 8001534:	f3bf 8f6f 	isb	sy
 8001538:	4770      	bx	lr
 800153a:	bf00      	nop

0800153c <pxCurrentTCBConst>:
 800153c:	2000002c 	.word	0x2000002c

08001540 <xPortSysTickHandler>:
{
 8001540:	b508      	push	{r3, lr}
	__asm volatile
 8001542:	f3ef 8311 	mrs	r3, BASEPRI
 8001546:	f04f 0250 	mov.w	r2, #80	; 0x50
 800154a:	f382 8811 	msr	BASEPRI, r2
 800154e:	f3bf 8f6f 	isb	sy
 8001552:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8001556:	f7ff fd99 	bl	800108c <xTaskIncrementTick>
 800155a:	b118      	cbz	r0, 8001564 <xPortSysTickHandler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800155c:	4b03      	ldr	r3, [pc, #12]	; (800156c <xPortSysTickHandler+0x2c>)
 800155e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001562:	601a      	str	r2, [r3, #0]
	__asm volatile
 8001564:	2300      	movs	r3, #0
 8001566:	f383 8811 	msr	BASEPRI, r3
}
 800156a:	bd08      	pop	{r3, pc}
 800156c:	e000ed04 	.word	0xe000ed04

08001570 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8001570:	4b06      	ldr	r3, [pc, #24]	; (800158c <vPortSetupTimerInterrupt+0x1c>)
 8001572:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	fbb3 f3f2 	udiv	r3, r3, r2
 800157c:	4a04      	ldr	r2, [pc, #16]	; (8001590 <vPortSetupTimerInterrupt+0x20>)
 800157e:	3b01      	subs	r3, #1
 8001580:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8001582:	4b04      	ldr	r3, [pc, #16]	; (8001594 <vPortSetupTimerInterrupt+0x24>)
 8001584:	2207      	movs	r2, #7
 8001586:	601a      	str	r2, [r3, #0]
}
 8001588:	4770      	bx	lr
 800158a:	bf00      	nop
 800158c:	20000000 	.word	0x20000000
 8001590:	e000e014 	.word	0xe000e014
 8001594:	e000e010 	.word	0xe000e010

08001598 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8001598:	4b30      	ldr	r3, [pc, #192]	; (800165c <xPortStartScheduler+0xc4>)
 800159a:	4a31      	ldr	r2, [pc, #196]	; (8001660 <xPortStartScheduler+0xc8>)
{
 800159c:	b513      	push	{r0, r1, r4, lr}
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800159e:	6819      	ldr	r1, [r3, #0]
 80015a0:	4291      	cmp	r1, r2
 80015a2:	d108      	bne.n	80015b6 <xPortStartScheduler+0x1e>
	__asm volatile
 80015a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80015a8:	f383 8811 	msr	BASEPRI, r3
 80015ac:	f3bf 8f6f 	isb	sy
 80015b0:	f3bf 8f4f 	dsb	sy
 80015b4:	e7fe      	b.n	80015b4 <xPortStartScheduler+0x1c>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80015b6:	681a      	ldr	r2, [r3, #0]
 80015b8:	4b2a      	ldr	r3, [pc, #168]	; (8001664 <xPortStartScheduler+0xcc>)
 80015ba:	429a      	cmp	r2, r3
 80015bc:	d108      	bne.n	80015d0 <xPortStartScheduler+0x38>
 80015be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80015c2:	f383 8811 	msr	BASEPRI, r3
 80015c6:	f3bf 8f6f 	isb	sy
 80015ca:	f3bf 8f4f 	dsb	sy
 80015ce:	e7fe      	b.n	80015ce <xPortStartScheduler+0x36>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80015d0:	4b25      	ldr	r3, [pc, #148]	; (8001668 <xPortStartScheduler+0xd0>)
 80015d2:	781a      	ldrb	r2, [r3, #0]
 80015d4:	b2d2      	uxtb	r2, r2
 80015d6:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80015d8:	22ff      	movs	r2, #255	; 0xff
 80015da:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80015dc:	781b      	ldrb	r3, [r3, #0]
 80015de:	b2db      	uxtb	r3, r3
 80015e0:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80015e4:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80015e8:	4b20      	ldr	r3, [pc, #128]	; (800166c <xPortStartScheduler+0xd4>)
 80015ea:	f002 0250 	and.w	r2, r2, #80	; 0x50
 80015ee:	701a      	strb	r2, [r3, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80015f0:	2207      	movs	r2, #7
 80015f2:	605a      	str	r2, [r3, #4]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80015f4:	2100      	movs	r1, #0
 80015f6:	f89d 0003 	ldrb.w	r0, [sp, #3]
 80015fa:	0600      	lsls	r0, r0, #24
 80015fc:	f102 34ff 	add.w	r4, r2, #4294967295	; 0xffffffff
 8001600:	d423      	bmi.n	800164a <xPortStartScheduler+0xb2>
 8001602:	b101      	cbz	r1, 8001606 <xPortStartScheduler+0x6e>
 8001604:	605a      	str	r2, [r3, #4]
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8001606:	685a      	ldr	r2, [r3, #4]
 8001608:	0212      	lsls	r2, r2, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800160a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 800160e:	605a      	str	r2, [r3, #4]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8001610:	9b01      	ldr	r3, [sp, #4]
 8001612:	4a15      	ldr	r2, [pc, #84]	; (8001668 <xPortStartScheduler+0xd0>)
 8001614:	b2db      	uxtb	r3, r3
 8001616:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8001618:	4b15      	ldr	r3, [pc, #84]	; (8001670 <xPortStartScheduler+0xd8>)
 800161a:	681a      	ldr	r2, [r3, #0]
 800161c:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8001620:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8001622:	681a      	ldr	r2, [r3, #0]
 8001624:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 8001628:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 800162a:	f7ff ffa1 	bl	8001570 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 800162e:	4b11      	ldr	r3, [pc, #68]	; (8001674 <xPortStartScheduler+0xdc>)
 8001630:	2200      	movs	r2, #0
 8001632:	601a      	str	r2, [r3, #0]
	vPortEnableVFP();
 8001634:	f7ff fef2 	bl	800141c <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8001638:	4a0f      	ldr	r2, [pc, #60]	; (8001678 <xPortStartScheduler+0xe0>)
 800163a:	6813      	ldr	r3, [r2, #0]
 800163c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8001640:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 8001642:	f7ff fedb 	bl	80013fc <prvPortStartFirstTask>
	prvTaskExitError();
 8001646:	f7ff fec1 	bl	80013cc <prvTaskExitError>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800164a:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800164e:	0052      	lsls	r2, r2, #1
 8001650:	b2d2      	uxtb	r2, r2
 8001652:	f88d 2003 	strb.w	r2, [sp, #3]
 8001656:	2101      	movs	r1, #1
 8001658:	4622      	mov	r2, r4
 800165a:	e7cc      	b.n	80015f6 <xPortStartScheduler+0x5e>
 800165c:	e000ed00 	.word	0xe000ed00
 8001660:	410fc271 	.word	0x410fc271
 8001664:	410fc270 	.word	0x410fc270
 8001668:	e000e400 	.word	0xe000e400
 800166c:	2000014c 	.word	0x2000014c
 8001670:	e000ed20 	.word	0xe000ed20
 8001674:	20000008 	.word	0x20000008
 8001678:	e000ef34 	.word	0xe000ef34

0800167c <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800167c:	4b0f      	ldr	r3, [pc, #60]	; (80016bc <prvInsertBlockIntoFreeList+0x40>)
{
 800167e:	b530      	push	{r4, r5, lr}
 8001680:	461d      	mov	r5, r3
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8001682:	681a      	ldr	r2, [r3, #0]
 8001684:	4282      	cmp	r2, r0
 8001686:	d317      	bcc.n	80016b8 <prvInsertBlockIntoFreeList+0x3c>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8001688:	685c      	ldr	r4, [r3, #4]
 800168a:	1919      	adds	r1, r3, r4
 800168c:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800168e:	bf01      	itttt	eq
 8001690:	6841      	ldreq	r1, [r0, #4]
 8001692:	4618      	moveq	r0, r3
 8001694:	1909      	addeq	r1, r1, r4
 8001696:	6059      	streq	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8001698:	6844      	ldr	r4, [r0, #4]
 800169a:	1901      	adds	r1, r0, r4
 800169c:	428a      	cmp	r2, r1
 800169e:	d106      	bne.n	80016ae <prvInsertBlockIntoFreeList+0x32>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80016a0:	68a9      	ldr	r1, [r5, #8]
 80016a2:	428a      	cmp	r2, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80016a4:	bf1f      	itttt	ne
 80016a6:	6851      	ldrne	r1, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80016a8:	6812      	ldrne	r2, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80016aa:	1909      	addne	r1, r1, r4
 80016ac:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80016ae:	4298      	cmp	r0, r3
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80016b0:	6002      	str	r2, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80016b2:	bf18      	it	ne
 80016b4:	6018      	strne	r0, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80016b6:	bd30      	pop	{r4, r5, pc}
 80016b8:	4613      	mov	r3, r2
 80016ba:	e7e2      	b.n	8001682 <prvInsertBlockIntoFreeList+0x6>
 80016bc:	20000154 	.word	0x20000154

080016c0 <pvPortMalloc>:
{
 80016c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if( pxEnd == NULL )
 80016c4:	4d3c      	ldr	r5, [pc, #240]	; (80017b8 <pvPortMalloc+0xf8>)
{
 80016c6:	4604      	mov	r4, r0
	vTaskSuspendAll();
 80016c8:	f7ff fcd6 	bl	8001078 <vTaskSuspendAll>
		if( pxEnd == NULL )
 80016cc:	68ab      	ldr	r3, [r5, #8]
 80016ce:	b9e3      	cbnz	r3, 800170a <pvPortMalloc+0x4a>
	ulAddress = ( uint32_t ) ucHeap;
 80016d0:	4a3a      	ldr	r2, [pc, #232]	; (80017bc <pvPortMalloc+0xfc>)
	if( ( ulAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80016d2:	0756      	lsls	r6, r2, #29
 80016d4:	f502 5370 	add.w	r3, r2, #15360	; 0x3c00
		ulAddress += ( portBYTE_ALIGNMENT - 1 );
 80016d8:	bf1d      	ittte	ne
 80016da:	3207      	addne	r2, #7
		ulAddress &= ~( ( uint32_t ) portBYTE_ALIGNMENT_MASK );
 80016dc:	f022 0207 	bicne.w	r2, r2, #7
		xTotalHeapSize -= ulAddress - ( uint32_t ) ucHeap;
 80016e0:	1a9b      	subne	r3, r3, r2
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80016e2:	f44f 5370 	moveq.w	r3, #15360	; 0x3c00
	ulAddress = ( ( uint32_t ) pucAlignedHeap ) + xTotalHeapSize;
 80016e6:	4413      	add	r3, r2
	ulAddress -= xHeapStructSize;
 80016e8:	3b08      	subs	r3, #8
	ulAddress &= ~( ( uint32_t ) portBYTE_ALIGNMENT_MASK );
 80016ea:	f023 0307 	bic.w	r3, r3, #7
	xStart.xBlockSize = ( size_t ) 0;
 80016ee:	2100      	movs	r1, #0
 80016f0:	6069      	str	r1, [r5, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80016f2:	602a      	str	r2, [r5, #0]
	pxEnd->pxNextFreeBlock = NULL;
 80016f4:	e9c3 1100 	strd	r1, r1, [r3]
	pxFirstFreeBlock->xBlockSize = ulAddress - ( uint32_t ) pxFirstFreeBlock;
 80016f8:	1a99      	subs	r1, r3, r2
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80016fa:	e9c5 1103 	strd	r1, r1, [r5, #12]
	pxEnd = ( void * ) ulAddress;
 80016fe:	60ab      	str	r3, [r5, #8]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8001700:	e9c2 3100 	strd	r3, r1, [r2]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8001704:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001708:	616b      	str	r3, [r5, #20]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800170a:	f8d5 8014 	ldr.w	r8, [r5, #20]
 800170e:	ea18 0f04 	tst.w	r8, r4
 8001712:	d14b      	bne.n	80017ac <pvPortMalloc+0xec>
			if( xWantedSize > 0 )
 8001714:	2c00      	cmp	r4, #0
 8001716:	d03c      	beq.n	8001792 <pvPortMalloc+0xd2>
				xWantedSize += xHeapStructSize;
 8001718:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800171c:	0758      	lsls	r0, r3, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800171e:	bf1c      	itt	ne
 8001720:	f023 0307 	bicne.w	r3, r3, #7
 8001724:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8001726:	2b00      	cmp	r3, #0
 8001728:	d040      	beq.n	80017ac <pvPortMalloc+0xec>
 800172a:	692f      	ldr	r7, [r5, #16]
 800172c:	429f      	cmp	r7, r3
 800172e:	d33d      	bcc.n	80017ac <pvPortMalloc+0xec>
				pxBlock = xStart.pxNextFreeBlock;
 8001730:	682e      	ldr	r6, [r5, #0]
				pxPreviousBlock = &xStart;
 8001732:	4821      	ldr	r0, [pc, #132]	; (80017b8 <pvPortMalloc+0xf8>)
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001734:	6872      	ldr	r2, [r6, #4]
 8001736:	429a      	cmp	r2, r3
 8001738:	d201      	bcs.n	800173e <pvPortMalloc+0x7e>
 800173a:	6831      	ldr	r1, [r6, #0]
 800173c:	b9a1      	cbnz	r1, 8001768 <pvPortMalloc+0xa8>
				if( pxBlock != pxEnd )
 800173e:	68a9      	ldr	r1, [r5, #8]
 8001740:	42b1      	cmp	r1, r6
 8001742:	d033      	beq.n	80017ac <pvPortMalloc+0xec>
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8001744:	1ad2      	subs	r2, r2, r3
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8001746:	6831      	ldr	r1, [r6, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001748:	6804      	ldr	r4, [r0, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800174a:	6001      	str	r1, [r0, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800174c:	2a10      	cmp	r2, #16
 800174e:	d912      	bls.n	8001776 <pvPortMalloc+0xb6>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8001750:	18f0      	adds	r0, r6, r3
						configASSERT( ( ( ( uint32_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001752:	0741      	lsls	r1, r0, #29
 8001754:	d00b      	beq.n	800176e <pvPortMalloc+0xae>
 8001756:	f04f 0350 	mov.w	r3, #80	; 0x50
 800175a:	f383 8811 	msr	BASEPRI, r3
 800175e:	f3bf 8f6f 	isb	sy
 8001762:	f3bf 8f4f 	dsb	sy
 8001766:	e7fe      	b.n	8001766 <pvPortMalloc+0xa6>
 8001768:	4630      	mov	r0, r6
 800176a:	460e      	mov	r6, r1
 800176c:	e7e2      	b.n	8001734 <pvPortMalloc+0x74>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800176e:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8001770:	6073      	str	r3, [r6, #4]
						prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
 8001772:	f7ff ff83 	bl	800167c <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001776:	6873      	ldr	r3, [r6, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001778:	68e9      	ldr	r1, [r5, #12]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800177a:	1aff      	subs	r7, r7, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800177c:	ea48 0303 	orr.w	r3, r8, r3
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001780:	428f      	cmp	r7, r1
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8001782:	6073      	str	r3, [r6, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8001784:	f04f 0300 	mov.w	r3, #0
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001788:	612f      	str	r7, [r5, #16]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800178a:	bf38      	it	cc
 800178c:	60ef      	strcc	r7, [r5, #12]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800178e:	3408      	adds	r4, #8
					pxBlock->pxNextFreeBlock = NULL;
 8001790:	6033      	str	r3, [r6, #0]
	( void ) xTaskResumeAll();
 8001792:	f7ff fcfb 	bl	800118c <xTaskResumeAll>
	configASSERT( ( ( ( uint32_t ) pvReturn ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001796:	0763      	lsls	r3, r4, #29
 8001798:	d00a      	beq.n	80017b0 <pvPortMalloc+0xf0>
 800179a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800179e:	f383 8811 	msr	BASEPRI, r3
 80017a2:	f3bf 8f6f 	isb	sy
 80017a6:	f3bf 8f4f 	dsb	sy
 80017aa:	e7fe      	b.n	80017aa <pvPortMalloc+0xea>
void *pvReturn = NULL;
 80017ac:	2400      	movs	r4, #0
 80017ae:	e7f0      	b.n	8001792 <pvPortMalloc+0xd2>
}
 80017b0:	4620      	mov	r0, r4
 80017b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80017b6:	bf00      	nop
 80017b8:	20000154 	.word	0x20000154
 80017bc:	2000016c 	.word	0x2000016c

080017c0 <vPortFree>:
{
 80017c0:	b538      	push	{r3, r4, r5, lr}
	if( pv != NULL )
 80017c2:	4604      	mov	r4, r0
 80017c4:	b368      	cbz	r0, 8001822 <vPortFree+0x62>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80017c6:	4d17      	ldr	r5, [pc, #92]	; (8001824 <vPortFree+0x64>)
 80017c8:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80017cc:	696a      	ldr	r2, [r5, #20]
 80017ce:	4213      	tst	r3, r2
 80017d0:	d108      	bne.n	80017e4 <vPortFree+0x24>
 80017d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80017d6:	f383 8811 	msr	BASEPRI, r3
 80017da:	f3bf 8f6f 	isb	sy
 80017de:	f3bf 8f4f 	dsb	sy
 80017e2:	e7fe      	b.n	80017e2 <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80017e4:	f850 1c08 	ldr.w	r1, [r0, #-8]
 80017e8:	b141      	cbz	r1, 80017fc <vPortFree+0x3c>
 80017ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80017ee:	f383 8811 	msr	BASEPRI, r3
 80017f2:	f3bf 8f6f 	isb	sy
 80017f6:	f3bf 8f4f 	dsb	sy
 80017fa:	e7fe      	b.n	80017fa <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80017fc:	ea23 0302 	bic.w	r3, r3, r2
 8001800:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8001804:	f7ff fc38 	bl	8001078 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8001808:	692a      	ldr	r2, [r5, #16]
 800180a:	f854 3c04 	ldr.w	r3, [r4, #-4]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800180e:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8001812:	4413      	add	r3, r2
 8001814:	612b      	str	r3, [r5, #16]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8001816:	f7ff ff31 	bl	800167c <prvInsertBlockIntoFreeList>
}
 800181a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				( void ) xTaskResumeAll();
 800181e:	f7ff bcb5 	b.w	800118c <xTaskResumeAll>
}
 8001822:	bd38      	pop	{r3, r4, r5, pc}
 8001824:	20000154 	.word	0x20000154

08001828 <vTaskBlinky1>:

/* USER CODE END 4 */

/* vTaskBlinky1 function */
void vTaskBlinky1(void const * argument)
{
 8001828:	b508      	push	{r3, lr}

  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
   HAL_GPIO_TogglePin(LD1_GPIO_Port,LD1_Pin);
 800182a:	4c05      	ldr	r4, [pc, #20]	; (8001840 <vTaskBlinky1+0x18>)
 800182c:	4620      	mov	r0, r4
 800182e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001832:	f7fe fea0 	bl	8000576 <HAL_GPIO_TogglePin>
    osDelay(100);
 8001836:	2064      	movs	r0, #100	; 0x64
 8001838:	f7ff fa87 	bl	8000d4a <osDelay>
 800183c:	e7f6      	b.n	800182c <vTaskBlinky1+0x4>
 800183e:	bf00      	nop
 8001840:	40020c00 	.word	0x40020c00

08001844 <vTaskBlinky2>:
  /* USER CODE END 5 */ 
}

/* vTaskBlinky2 function */
void vTaskBlinky2(void const * argument)
{
 8001844:	b508      	push	{r3, lr}

  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
   HAL_GPIO_TogglePin(LD2_GPIO_Port,LD2_Pin);
 8001846:	4c05      	ldr	r4, [pc, #20]	; (800185c <vTaskBlinky2+0x18>)
 8001848:	4620      	mov	r0, r4
 800184a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800184e:	f7fe fe92 	bl	8000576 <HAL_GPIO_TogglePin>
    osDelay(100);
 8001852:	2064      	movs	r0, #100	; 0x64
 8001854:	f7ff fa79 	bl	8000d4a <osDelay>
 8001858:	e7f6      	b.n	8001848 <vTaskBlinky2+0x4>
 800185a:	bf00      	nop
 800185c:	40020c00 	.word	0x40020c00

08001860 <SystemClock_Config>:
{
 8001860:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001862:	b095      	sub	sp, #84	; 0x54
  __HAL_RCC_PWR_CLK_ENABLE();
 8001864:	2400      	movs	r4, #0
 8001866:	4b24      	ldr	r3, [pc, #144]	; (80018f8 <SystemClock_Config+0x98>)
 8001868:	9401      	str	r4, [sp, #4]
 800186a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800186c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001870:	641a      	str	r2, [r3, #64]	; 0x40
 8001872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001874:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001878:	9301      	str	r3, [sp, #4]
 800187a:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800187c:	4b1f      	ldr	r3, [pc, #124]	; (80018fc <SystemClock_Config+0x9c>)
 800187e:	9402      	str	r4, [sp, #8]
 8001880:	681a      	ldr	r2, [r3, #0]
 8001882:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001886:	601a      	str	r2, [r3, #0]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800188e:	9302      	str	r3, [sp, #8]
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8001890:	2201      	movs	r2, #1
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001892:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8001894:	2310      	movs	r3, #16
 8001896:	e9cd 230b 	strd	r2, r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800189a:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLN = 168;
 800189c:	2108      	movs	r1, #8
 800189e:	23a8      	movs	r3, #168	; 0xa8
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80018a0:	2704      	movs	r7, #4
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 80018a2:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLN = 168;
 80018a4:	e9cd 1310 	strd	r1, r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80018a8:	9508      	str	r5, [sp, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80018aa:	e9cd 540e 	strd	r5, r4, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80018ae:	9512      	str	r5, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80018b0:	9713      	str	r7, [sp, #76]	; 0x4c
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 80018b2:	f7fe fe65 	bl	8000580 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80018b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018ba:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 80018be:	e9cd 0306 	strd	r0, r3, [sp, #24]
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 80018c2:	2105      	movs	r1, #5
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018c4:	260f      	movs	r6, #15
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 80018c6:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018c8:	e9cd 6503 	strd	r6, r5, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018cc:	9405      	str	r4, [sp, #20]
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 80018ce:	f7fe ffc3 	bl	8000858 <HAL_RCC_ClockConfig>
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80018d2:	f7ff f89b 	bl	8000a0c <HAL_RCC_GetHCLKFreq>
 80018d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018da:	fbb0 f0f3 	udiv	r0, r0, r3
 80018de:	f7fe fd3d 	bl	800035c <HAL_SYSTICK_Config>
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80018e2:	4638      	mov	r0, r7
 80018e4:	f7fe fd50 	bl	8000388 <HAL_SYSTICK_CLKSourceConfig>
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 80018e8:	4622      	mov	r2, r4
 80018ea:	4631      	mov	r1, r6
 80018ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80018f0:	f7fe fcf4 	bl	80002dc <HAL_NVIC_SetPriority>
}
 80018f4:	b015      	add	sp, #84	; 0x54
 80018f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018f8:	40023800 	.word	0x40023800
 80018fc:	40007000 	.word	0x40007000

08001900 <main>:
{
 8001900:	b500      	push	{lr}
 8001902:	b08d      	sub	sp, #52	; 0x34
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001904:	2500      	movs	r5, #0
  HAL_Init();
 8001906:	f7fe fcaf 	bl	8000268 <HAL_Init>
  SystemClock_Config();
 800190a:	f7ff ffa9 	bl	8001860 <SystemClock_Config>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800190e:	4b20      	ldr	r3, [pc, #128]	; (8001990 <main+0x90>)
 8001910:	9500      	str	r5, [sp, #0]
 8001912:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(GPIOD, LD1_Pin|LD2_Pin|LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8001914:	481f      	ldr	r0, [pc, #124]	; (8001994 <main+0x94>)
  osThreadDef(Blinky1, vTaskBlinky1, osPriorityNormal, 0, 128);
 8001916:	4c20      	ldr	r4, [pc, #128]	; (8001998 <main+0x98>)
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001918:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800191c:	631a      	str	r2, [r3, #48]	; 0x30
 800191e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001920:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8001924:	9200      	str	r2, [sp, #0]
 8001926:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001928:	9501      	str	r5, [sp, #4]
 800192a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800192c:	f042 0208 	orr.w	r2, r2, #8
 8001930:	631a      	str	r2, [r3, #48]	; 0x30
 8001932:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001934:	f003 0308 	and.w	r3, r3, #8
 8001938:	9301      	str	r3, [sp, #4]
  HAL_GPIO_WritePin(GPIOD, LD1_Pin|LD2_Pin|LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 800193a:	462a      	mov	r2, r5
 800193c:	f44f 4170 	mov.w	r1, #61440	; 0xf000
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001940:	9b01      	ldr	r3, [sp, #4]
  HAL_GPIO_WritePin(GPIOD, LD1_Pin|LD2_Pin|LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8001942:	f7fe fe13 	bl	800056c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001946:	f44f 4270 	mov.w	r2, #61440	; 0xf000
 800194a:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800194c:	a907      	add	r1, sp, #28
 800194e:	4811      	ldr	r0, [pc, #68]	; (8001994 <main+0x94>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001950:	e9cd 2307 	strd	r2, r3, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001954:	e9cd 5509 	strd	r5, r5, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001958:	f7fe fd22 	bl	80003a0 <HAL_GPIO_Init>
  osThreadDef(Blinky1, vTaskBlinky1, osPriorityNormal, 0, 128);
 800195c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800195e:	ae02      	add	r6, sp, #8
 8001960:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001962:	f854 3b04 	ldr.w	r3, [r4], #4
 8001966:	6033      	str	r3, [r6, #0]
  Thread1Handle = osThreadCreate(osThread(Blinky1), NULL);
 8001968:	4629      	mov	r1, r5
 800196a:	a802      	add	r0, sp, #8
 800196c:	f7ff f9d1 	bl	8000d12 <osThreadCreate>
 8001970:	4b0a      	ldr	r3, [pc, #40]	; (800199c <main+0x9c>)
 8001972:	6018      	str	r0, [r3, #0]
  osThreadDef(Blinky2, vTaskBlinky2, osPriorityNormal, 0, 128);
 8001974:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001976:	ae07      	add	r6, sp, #28
 8001978:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800197a:	6823      	ldr	r3, [r4, #0]
 800197c:	6033      	str	r3, [r6, #0]
  Blinky2Handle = osThreadCreate(osThread(Blinky2), NULL);
 800197e:	4629      	mov	r1, r5
 8001980:	a807      	add	r0, sp, #28
 8001982:	f7ff f9c6 	bl	8000d12 <osThreadCreate>
 8001986:	4b06      	ldr	r3, [pc, #24]	; (80019a0 <main+0xa0>)
 8001988:	6018      	str	r0, [r3, #0]
  osKernelStart();
 800198a:	f7ff f9bd 	bl	8000d08 <osKernelStart>
 800198e:	e7fe      	b.n	800198e <main+0x8e>
 8001990:	40023800 	.word	0x40023800
 8001994:	40020c00 	.word	0x40020c00
 8001998:	08001b08 	.word	0x08001b08
 800199c:	20003d74 	.word	0x20003d74
 80019a0:	20003d70 	.word	0x20003d70

080019a4 <HAL_MspInit>:

/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019a4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019a6:	2003      	movs	r0, #3
 80019a8:	f7fe fc86 	bl	80002b8 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 80019ac:	2200      	movs	r2, #0
 80019ae:	4611      	mov	r1, r2
 80019b0:	f06f 000b 	mvn.w	r0, #11
 80019b4:	f7fe fc92 	bl	80002dc <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 80019b8:	2200      	movs	r2, #0
 80019ba:	4611      	mov	r1, r2
 80019bc:	f06f 000a 	mvn.w	r0, #10
 80019c0:	f7fe fc8c 	bl	80002dc <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 80019c4:	2200      	movs	r2, #0
 80019c6:	4611      	mov	r1, r2
 80019c8:	f06f 0009 	mvn.w	r0, #9
 80019cc:	f7fe fc86 	bl	80002dc <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 80019d0:	2200      	movs	r2, #0
 80019d2:	4611      	mov	r1, r2
 80019d4:	f06f 0003 	mvn.w	r0, #3
 80019d8:	f7fe fc80 	bl	80002dc <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 80019dc:	2200      	movs	r2, #0
 80019de:	210f      	movs	r1, #15
 80019e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019e4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 80019e8:	f7fe bc78 	b.w	80002dc <HAL_NVIC_SetPriority>

080019ec <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priorty.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019ec:	b530      	push	{r4, r5, lr}
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 80019ee:	4601      	mov	r1, r0
{
 80019f0:	b089      	sub	sp, #36	; 0x24
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 80019f2:	2200      	movs	r2, #0
 80019f4:	2019      	movs	r0, #25
 80019f6:	f7fe fc71 	bl	80002dc <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 80019fa:	2019      	movs	r0, #25
 80019fc:	f7fe fca2 	bl	8000344 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001a00:	2500      	movs	r5, #0
 8001a02:	4b15      	ldr	r3, [pc, #84]	; (8001a58 <HAL_InitTick+0x6c>)
 8001a04:	9502      	str	r5, [sp, #8]
 8001a06:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001a08:	4c14      	ldr	r4, [pc, #80]	; (8001a5c <HAL_InitTick+0x70>)
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001a0a:	f042 0201 	orr.w	r2, r2, #1
 8001a0e:	645a      	str	r2, [r3, #68]	; 0x44
 8001a10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a12:	f003 0301 	and.w	r3, r3, #1
 8001a16:	9302      	str	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001a18:	a901      	add	r1, sp, #4
 8001a1a:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001a1c:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001a1e:	f7ff f825 	bl	8000a6c <HAL_RCC_GetClockConfig>
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8001a22:	f7ff f80d 	bl	8000a40 <HAL_RCC_GetPCLK2Freq>
  htim1.Instance = TIM1;
 8001a26:	4b0e      	ldr	r3, [pc, #56]	; (8001a60 <HAL_InitTick+0x74>)
 8001a28:	6023      	str	r3, [r4, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8001a2a:	f240 33e7 	movw	r3, #999	; 0x3e7
 8001a2e:	60e3      	str	r3, [r4, #12]
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8001a30:	0040      	lsls	r0, r0, #1
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001a32:	4b0c      	ldr	r3, [pc, #48]	; (8001a64 <HAL_InitTick+0x78>)
 8001a34:	fbb0 f0f3 	udiv	r0, r0, r3
 8001a38:	3801      	subs	r0, #1
  htim1.Init.Prescaler = uwPrescalerValue;
 8001a3a:	6060      	str	r0, [r4, #4]
  htim1.Init.ClockDivision = 0;
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001a3c:	4620      	mov	r0, r4
  htim1.Init.ClockDivision = 0;
 8001a3e:	6125      	str	r5, [r4, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a40:	60a5      	str	r5, [r4, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001a42:	f7ff f945 	bl	8000cd0 <HAL_TIM_Base_Init>
 8001a46:	b920      	cbnz	r0, 8001a52 <HAL_InitTick+0x66>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001a48:	4620      	mov	r0, r4
 8001a4a:	f7ff f82e 	bl	8000aaa <HAL_TIM_Base_Start_IT>
  }
  
  /* Return function status */
  return HAL_ERROR;
}
 8001a4e:	b009      	add	sp, #36	; 0x24
 8001a50:	bd30      	pop	{r4, r5, pc}
  return HAL_ERROR;
 8001a52:	2001      	movs	r0, #1
 8001a54:	e7fb      	b.n	8001a4e <HAL_InitTick+0x62>
 8001a56:	bf00      	nop
 8001a58:	40023800 	.word	0x40023800
 8001a5c:	20003d78 	.word	0x20003d78
 8001a60:	40010000 	.word	0x40010000
 8001a64:	000f4240 	.word	0x000f4240

08001a68 <HAL_TIM_PeriodElapsedCallback>:
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  HAL_IncTick();
 8001a68:	f7fe bc18 	b.w	800029c <HAL_IncTick>

08001a6c <NMI_Handler>:
  /* USER CODE END NonMaskableInt_IRQn 0 */
  
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001a6c:	4770      	bx	lr

08001a6e <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8001a6e:	e7fe      	b.n	8001a6e <HardFault_Handler>

08001a70 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8001a70:	e7fe      	b.n	8001a70 <MemManage_Handler>

08001a72 <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8001a72:	e7fe      	b.n	8001a72 <BusFault_Handler>

08001a74 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8001a74:	e7fe      	b.n	8001a74 <UsageFault_Handler>

08001a76 <DebugMon_Handler>:

/**
* @brief This function handles Debug monitor.
*/
void DebugMon_Handler(void)
{
 8001a76:	e7fe      	b.n	8001a76 <DebugMon_Handler>

08001a78 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  osSystickHandler();
 8001a78:	f7ff b96f 	b.w	8000d5a <osSystickHandler>

08001a7c <TIM1_UP_TIM10_IRQHandler>:
void TIM1_UP_TIM10_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001a7c:	4801      	ldr	r0, [pc, #4]	; (8001a84 <TIM1_UP_TIM10_IRQHandler+0x8>)
 8001a7e:	f7ff b823 	b.w	8000ac8 <HAL_TIM_IRQHandler>
 8001a82:	bf00      	nop
 8001a84:	20003d78 	.word	0x20003d78

08001a88 <__libc_init_array>:
 8001a88:	b570      	push	{r4, r5, r6, lr}
 8001a8a:	4e0d      	ldr	r6, [pc, #52]	; (8001ac0 <__libc_init_array+0x38>)
 8001a8c:	4c0d      	ldr	r4, [pc, #52]	; (8001ac4 <__libc_init_array+0x3c>)
 8001a8e:	1ba4      	subs	r4, r4, r6
 8001a90:	10a4      	asrs	r4, r4, #2
 8001a92:	2500      	movs	r5, #0
 8001a94:	42a5      	cmp	r5, r4
 8001a96:	d109      	bne.n	8001aac <__libc_init_array+0x24>
 8001a98:	4e0b      	ldr	r6, [pc, #44]	; (8001ac8 <__libc_init_array+0x40>)
 8001a9a:	4c0c      	ldr	r4, [pc, #48]	; (8001acc <__libc_init_array+0x44>)
 8001a9c:	f000 f820 	bl	8001ae0 <_init>
 8001aa0:	1ba4      	subs	r4, r4, r6
 8001aa2:	10a4      	asrs	r4, r4, #2
 8001aa4:	2500      	movs	r5, #0
 8001aa6:	42a5      	cmp	r5, r4
 8001aa8:	d105      	bne.n	8001ab6 <__libc_init_array+0x2e>
 8001aaa:	bd70      	pop	{r4, r5, r6, pc}
 8001aac:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001ab0:	4798      	blx	r3
 8001ab2:	3501      	adds	r5, #1
 8001ab4:	e7ee      	b.n	8001a94 <__libc_init_array+0xc>
 8001ab6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001aba:	4798      	blx	r3
 8001abc:	3501      	adds	r5, #1
 8001abe:	e7f2      	b.n	8001aa6 <__libc_init_array+0x1e>
 8001ac0:	08001b48 	.word	0x08001b48
 8001ac4:	08001b48 	.word	0x08001b48
 8001ac8:	08001b48 	.word	0x08001b48
 8001acc:	08001b4c 	.word	0x08001b4c

08001ad0 <memset>:
 8001ad0:	4402      	add	r2, r0
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	4293      	cmp	r3, r2
 8001ad6:	d100      	bne.n	8001ada <memset+0xa>
 8001ad8:	4770      	bx	lr
 8001ada:	f803 1b01 	strb.w	r1, [r3], #1
 8001ade:	e7f9      	b.n	8001ad4 <memset+0x4>

08001ae0 <_init>:
 8001ae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ae2:	bf00      	nop
 8001ae4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001ae6:	bc08      	pop	{r3}
 8001ae8:	469e      	mov	lr, r3
 8001aea:	4770      	bx	lr

08001aec <_fini>:
 8001aec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001aee:	bf00      	nop
 8001af0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001af2:	bc08      	pop	{r3}
 8001af4:	469e      	mov	lr, r3
 8001af6:	4770      	bx	lr
