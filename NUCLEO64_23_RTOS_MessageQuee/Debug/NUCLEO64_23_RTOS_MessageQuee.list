
NUCLEO64_23_RTOS_MessageQuee.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f5c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f8  0800412c  0800412c  0001412c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08004224  08004224  00014224  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800422c  0800422c  0001422c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08004230  08004230  00014230  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000074  20000000  08004234  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00003e64  20000074  080042a8  00020074  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20003ed8  080042a8  00023ed8  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001e8d2  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000038b5  00000000  00000000  0003e976  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000b53f  00000000  00000000  0004222b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00001150  00000000  00000000  0004d770  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001198  00000000  00000000  0004e8c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  00024cc2  00000000  00000000  0004fa58  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0000eff1  00000000  00000000  0007471a  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    000d61ef  00000000  00000000  0008370b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007b  00000000  00000000  001598fa  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000031f0  00000000  00000000  00159978  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000074 	.word	0x20000074
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004114 	.word	0x08004114

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000078 	.word	0x20000078
 800020c:	08004114 	.word	0x08004114

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002c4:	f000 b972 	b.w	80005ac <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	4688      	mov	r8, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14b      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4615      	mov	r5, r2
 80002f2:	d967      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0720 	rsb	r7, r2, #32
 80002fe:	fa01 f302 	lsl.w	r3, r1, r2
 8000302:	fa20 f707 	lsr.w	r7, r0, r7
 8000306:	4095      	lsls	r5, r2
 8000308:	ea47 0803 	orr.w	r8, r7, r3
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbb8 f7fe 	udiv	r7, r8, lr
 8000318:	fa1f fc85 	uxth.w	ip, r5
 800031c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000320:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000324:	fb07 f10c 	mul.w	r1, r7, ip
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18eb      	adds	r3, r5, r3
 800032e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000332:	f080 811b 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8118 	bls.w	800056c <__udivmoddi4+0x28c>
 800033c:	3f02      	subs	r7, #2
 800033e:	442b      	add	r3, r5
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0fe 	udiv	r0, r3, lr
 8000348:	fb0e 3310 	mls	r3, lr, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fc0c 	mul.w	ip, r0, ip
 8000354:	45a4      	cmp	ip, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	192c      	adds	r4, r5, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800035e:	f080 8107 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000362:	45a4      	cmp	ip, r4
 8000364:	f240 8104 	bls.w	8000570 <__udivmoddi4+0x290>
 8000368:	3802      	subs	r0, #2
 800036a:	442c      	add	r4, r5
 800036c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000370:	eba4 040c 	sub.w	r4, r4, ip
 8000374:	2700      	movs	r7, #0
 8000376:	b11e      	cbz	r6, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c6 4300 	strd	r4, r3, [r6]
 8000380:	4639      	mov	r1, r7
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0xbe>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80eb 	beq.w	8000566 <__udivmoddi4+0x286>
 8000390:	2700      	movs	r7, #0
 8000392:	e9c6 0100 	strd	r0, r1, [r6]
 8000396:	4638      	mov	r0, r7
 8000398:	4639      	mov	r1, r7
 800039a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039e:	fab3 f783 	clz	r7, r3
 80003a2:	2f00      	cmp	r7, #0
 80003a4:	d147      	bne.n	8000436 <__udivmoddi4+0x156>
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d302      	bcc.n	80003b0 <__udivmoddi4+0xd0>
 80003aa:	4282      	cmp	r2, r0
 80003ac:	f200 80fa 	bhi.w	80005a4 <__udivmoddi4+0x2c4>
 80003b0:	1a84      	subs	r4, r0, r2
 80003b2:	eb61 0303 	sbc.w	r3, r1, r3
 80003b6:	2001      	movs	r0, #1
 80003b8:	4698      	mov	r8, r3
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	d0e0      	beq.n	8000380 <__udivmoddi4+0xa0>
 80003be:	e9c6 4800 	strd	r4, r8, [r6]
 80003c2:	e7dd      	b.n	8000380 <__udivmoddi4+0xa0>
 80003c4:	b902      	cbnz	r2, 80003c8 <__udivmoddi4+0xe8>
 80003c6:	deff      	udf	#255	; 0xff
 80003c8:	fab2 f282 	clz	r2, r2
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f040 808f 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d2:	1b49      	subs	r1, r1, r5
 80003d4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003d8:	fa1f f885 	uxth.w	r8, r5
 80003dc:	2701      	movs	r7, #1
 80003de:	fbb1 fcfe 	udiv	ip, r1, lr
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003e8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ec:	fb08 f10c 	mul.w	r1, r8, ip
 80003f0:	4299      	cmp	r1, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f4:	18eb      	adds	r3, r5, r3
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4299      	cmp	r1, r3
 80003fe:	f200 80cd 	bhi.w	800059c <__udivmoddi4+0x2bc>
 8000402:	4684      	mov	ip, r0
 8000404:	1a59      	subs	r1, r3, r1
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000410:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x14c>
 800041c:	192c      	adds	r4, r5, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x14a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80b6 	bhi.w	8000596 <__udivmoddi4+0x2b6>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e79f      	b.n	8000376 <__udivmoddi4+0x96>
 8000436:	f1c7 0c20 	rsb	ip, r7, #32
 800043a:	40bb      	lsls	r3, r7
 800043c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000440:	ea4e 0e03 	orr.w	lr, lr, r3
 8000444:	fa01 f407 	lsl.w	r4, r1, r7
 8000448:	fa20 f50c 	lsr.w	r5, r0, ip
 800044c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000450:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000454:	4325      	orrs	r5, r4
 8000456:	fbb3 f9f8 	udiv	r9, r3, r8
 800045a:	0c2c      	lsrs	r4, r5, #16
 800045c:	fb08 3319 	mls	r3, r8, r9, r3
 8000460:	fa1f fa8e 	uxth.w	sl, lr
 8000464:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000468:	fb09 f40a 	mul.w	r4, r9, sl
 800046c:	429c      	cmp	r4, r3
 800046e:	fa02 f207 	lsl.w	r2, r2, r7
 8000472:	fa00 f107 	lsl.w	r1, r0, r7
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1e 0303 	adds.w	r3, lr, r3
 800047c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000480:	f080 8087 	bcs.w	8000592 <__udivmoddi4+0x2b2>
 8000484:	429c      	cmp	r4, r3
 8000486:	f240 8084 	bls.w	8000592 <__udivmoddi4+0x2b2>
 800048a:	f1a9 0902 	sub.w	r9, r9, #2
 800048e:	4473      	add	r3, lr
 8000490:	1b1b      	subs	r3, r3, r4
 8000492:	b2ad      	uxth	r5, r5
 8000494:	fbb3 f0f8 	udiv	r0, r3, r8
 8000498:	fb08 3310 	mls	r3, r8, r0, r3
 800049c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004a0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004a4:	45a2      	cmp	sl, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ac:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80004b0:	d26b      	bcs.n	800058a <__udivmoddi4+0x2aa>
 80004b2:	45a2      	cmp	sl, r4
 80004b4:	d969      	bls.n	800058a <__udivmoddi4+0x2aa>
 80004b6:	3802      	subs	r0, #2
 80004b8:	4474      	add	r4, lr
 80004ba:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004be:	fba0 8902 	umull	r8, r9, r0, r2
 80004c2:	eba4 040a 	sub.w	r4, r4, sl
 80004c6:	454c      	cmp	r4, r9
 80004c8:	46c2      	mov	sl, r8
 80004ca:	464b      	mov	r3, r9
 80004cc:	d354      	bcc.n	8000578 <__udivmoddi4+0x298>
 80004ce:	d051      	beq.n	8000574 <__udivmoddi4+0x294>
 80004d0:	2e00      	cmp	r6, #0
 80004d2:	d069      	beq.n	80005a8 <__udivmoddi4+0x2c8>
 80004d4:	ebb1 050a 	subs.w	r5, r1, sl
 80004d8:	eb64 0403 	sbc.w	r4, r4, r3
 80004dc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004e0:	40fd      	lsrs	r5, r7
 80004e2:	40fc      	lsrs	r4, r7
 80004e4:	ea4c 0505 	orr.w	r5, ip, r5
 80004e8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ec:	2700      	movs	r7, #0
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0xa0>
 80004f0:	f1c2 0320 	rsb	r3, r2, #32
 80004f4:	fa20 f703 	lsr.w	r7, r0, r3
 80004f8:	4095      	lsls	r5, r2
 80004fa:	fa01 f002 	lsl.w	r0, r1, r2
 80004fe:	fa21 f303 	lsr.w	r3, r1, r3
 8000502:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000506:	4338      	orrs	r0, r7
 8000508:	0c01      	lsrs	r1, r0, #16
 800050a:	fbb3 f7fe 	udiv	r7, r3, lr
 800050e:	fa1f f885 	uxth.w	r8, r5
 8000512:	fb0e 3317 	mls	r3, lr, r7, r3
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb07 f308 	mul.w	r3, r7, r8
 800051e:	428b      	cmp	r3, r1
 8000520:	fa04 f402 	lsl.w	r4, r4, r2
 8000524:	d907      	bls.n	8000536 <__udivmoddi4+0x256>
 8000526:	1869      	adds	r1, r5, r1
 8000528:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800052c:	d22f      	bcs.n	800058e <__udivmoddi4+0x2ae>
 800052e:	428b      	cmp	r3, r1
 8000530:	d92d      	bls.n	800058e <__udivmoddi4+0x2ae>
 8000532:	3f02      	subs	r7, #2
 8000534:	4429      	add	r1, r5
 8000536:	1acb      	subs	r3, r1, r3
 8000538:	b281      	uxth	r1, r0
 800053a:	fbb3 f0fe 	udiv	r0, r3, lr
 800053e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000542:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000546:	fb00 f308 	mul.w	r3, r0, r8
 800054a:	428b      	cmp	r3, r1
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x27e>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000554:	d217      	bcs.n	8000586 <__udivmoddi4+0x2a6>
 8000556:	428b      	cmp	r3, r1
 8000558:	d915      	bls.n	8000586 <__udivmoddi4+0x2a6>
 800055a:	3802      	subs	r0, #2
 800055c:	4429      	add	r1, r5
 800055e:	1ac9      	subs	r1, r1, r3
 8000560:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000564:	e73b      	b.n	80003de <__udivmoddi4+0xfe>
 8000566:	4637      	mov	r7, r6
 8000568:	4630      	mov	r0, r6
 800056a:	e709      	b.n	8000380 <__udivmoddi4+0xa0>
 800056c:	4607      	mov	r7, r0
 800056e:	e6e7      	b.n	8000340 <__udivmoddi4+0x60>
 8000570:	4618      	mov	r0, r3
 8000572:	e6fb      	b.n	800036c <__udivmoddi4+0x8c>
 8000574:	4541      	cmp	r1, r8
 8000576:	d2ab      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 8000578:	ebb8 0a02 	subs.w	sl, r8, r2
 800057c:	eb69 020e 	sbc.w	r2, r9, lr
 8000580:	3801      	subs	r0, #1
 8000582:	4613      	mov	r3, r2
 8000584:	e7a4      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000586:	4660      	mov	r0, ip
 8000588:	e7e9      	b.n	800055e <__udivmoddi4+0x27e>
 800058a:	4618      	mov	r0, r3
 800058c:	e795      	b.n	80004ba <__udivmoddi4+0x1da>
 800058e:	4667      	mov	r7, ip
 8000590:	e7d1      	b.n	8000536 <__udivmoddi4+0x256>
 8000592:	4681      	mov	r9, r0
 8000594:	e77c      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000596:	3802      	subs	r0, #2
 8000598:	442c      	add	r4, r5
 800059a:	e747      	b.n	800042c <__udivmoddi4+0x14c>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	442b      	add	r3, r5
 80005a2:	e72f      	b.n	8000404 <__udivmoddi4+0x124>
 80005a4:	4638      	mov	r0, r7
 80005a6:	e708      	b.n	80003ba <__udivmoddi4+0xda>
 80005a8:	4637      	mov	r7, r6
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0xa0>

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005b0:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80005b2:	4b0b      	ldr	r3, [pc, #44]	; (80005e0 <HAL_Init+0x30>)
 80005b4:	681a      	ldr	r2, [r3, #0]
 80005b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80005ba:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80005bc:	681a      	ldr	r2, [r3, #0]
 80005be:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80005c2:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005c4:	681a      	ldr	r2, [r3, #0]
 80005c6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80005ca:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005cc:	2003      	movs	r0, #3
 80005ce:	f000 f9a7 	bl	8000920 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005d2:	2000      	movs	r0, #0
 80005d4:	f003 f8cc 	bl	8003770 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005d8:	f003 f84c 	bl	8003674 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 80005dc:	2000      	movs	r0, #0
 80005de:	bd08      	pop	{r3, pc}
 80005e0:	40023c00 	.word	0x40023c00

080005e4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80005e4:	4a03      	ldr	r2, [pc, #12]	; (80005f4 <HAL_IncTick+0x10>)
 80005e6:	6811      	ldr	r1, [r2, #0]
 80005e8:	4b03      	ldr	r3, [pc, #12]	; (80005f8 <HAL_IncTick+0x14>)
 80005ea:	781b      	ldrb	r3, [r3, #0]
 80005ec:	440b      	add	r3, r1
 80005ee:	6013      	str	r3, [r2, #0]
}
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop
 80005f4:	20003de8 	.word	0x20003de8
 80005f8:	20000000 	.word	0x20000000

080005fc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80005fc:	4b01      	ldr	r3, [pc, #4]	; (8000604 <HAL_GetTick+0x8>)
 80005fe:	6818      	ldr	r0, [r3, #0]
}
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop
 8000604:	20003de8 	.word	0x20003de8

08000608 <ADC_Init>:
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8000608:	4b49      	ldr	r3, [pc, #292]	; (8000730 <ADC_Init+0x128>)
 800060a:	685a      	ldr	r2, [r3, #4]
 800060c:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8000610:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8000612:	685a      	ldr	r2, [r3, #4]
 8000614:	6841      	ldr	r1, [r0, #4]
 8000616:	430a      	orrs	r2, r1
 8000618:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800061a:	6802      	ldr	r2, [r0, #0]
 800061c:	6853      	ldr	r3, [r2, #4]
 800061e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000622:	6053      	str	r3, [r2, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000624:	6802      	ldr	r2, [r0, #0]
 8000626:	6853      	ldr	r3, [r2, #4]
 8000628:	6901      	ldr	r1, [r0, #16]
 800062a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800062e:	6053      	str	r3, [r2, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8000630:	6802      	ldr	r2, [r0, #0]
 8000632:	6853      	ldr	r3, [r2, #4]
 8000634:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8000638:	6053      	str	r3, [r2, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800063a:	6802      	ldr	r2, [r0, #0]
 800063c:	6853      	ldr	r3, [r2, #4]
 800063e:	6881      	ldr	r1, [r0, #8]
 8000640:	430b      	orrs	r3, r1
 8000642:	6053      	str	r3, [r2, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8000644:	6802      	ldr	r2, [r0, #0]
 8000646:	6893      	ldr	r3, [r2, #8]
 8000648:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800064c:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800064e:	6802      	ldr	r2, [r0, #0]
 8000650:	6893      	ldr	r3, [r2, #8]
 8000652:	68c1      	ldr	r1, [r0, #12]
 8000654:	430b      	orrs	r3, r1
 8000656:	6093      	str	r3, [r2, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000658:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800065a:	4b36      	ldr	r3, [pc, #216]	; (8000734 <ADC_Init+0x12c>)
 800065c:	429a      	cmp	r2, r3
 800065e:	d049      	beq.n	80006f4 <ADC_Init+0xec>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000660:	6802      	ldr	r2, [r0, #0]
 8000662:	6893      	ldr	r3, [r2, #8]
 8000664:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8000668:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800066a:	6802      	ldr	r2, [r0, #0]
 800066c:	6893      	ldr	r3, [r2, #8]
 800066e:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8000670:	430b      	orrs	r3, r1
 8000672:	6093      	str	r3, [r2, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000674:	6802      	ldr	r2, [r0, #0]
 8000676:	6893      	ldr	r3, [r2, #8]
 8000678:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800067c:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800067e:	6802      	ldr	r2, [r0, #0]
 8000680:	6893      	ldr	r3, [r2, #8]
 8000682:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8000684:	430b      	orrs	r3, r1
 8000686:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000688:	6802      	ldr	r2, [r0, #0]
 800068a:	6893      	ldr	r3, [r2, #8]
 800068c:	f023 0302 	bic.w	r3, r3, #2
 8000690:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 8000692:	6802      	ldr	r2, [r0, #0]
 8000694:	6893      	ldr	r3, [r2, #8]
 8000696:	6981      	ldr	r1, [r0, #24]
 8000698:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 800069c:	6093      	str	r3, [r2, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800069e:	6a03      	ldr	r3, [r0, #32]
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d132      	bne.n	800070a <ADC_Init+0x102>
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80006a4:	6802      	ldr	r2, [r0, #0]
 80006a6:	6853      	ldr	r3, [r2, #4]
 80006a8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80006ac:	6053      	str	r3, [r2, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80006ae:	6802      	ldr	r2, [r0, #0]
 80006b0:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80006b2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80006b6:	62d3      	str	r3, [r2, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80006b8:	6801      	ldr	r1, [r0, #0]
 80006ba:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 80006bc:	69c2      	ldr	r2, [r0, #28]
 80006be:	3a01      	subs	r2, #1
 80006c0:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 80006c4:	62cb      	str	r3, [r1, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80006c6:	6802      	ldr	r2, [r0, #0]
 80006c8:	6893      	ldr	r3, [r2, #8]
 80006ca:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80006ce:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 80006d0:	6802      	ldr	r2, [r0, #0]
 80006d2:	6893      	ldr	r3, [r2, #8]
 80006d4:	6b01      	ldr	r1, [r0, #48]	; 0x30
 80006d6:	ea43 2341 	orr.w	r3, r3, r1, lsl #9
 80006da:	6093      	str	r3, [r2, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80006dc:	6802      	ldr	r2, [r0, #0]
 80006de:	6893      	ldr	r3, [r2, #8]
 80006e0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80006e4:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80006e6:	6802      	ldr	r2, [r0, #0]
 80006e8:	6893      	ldr	r3, [r2, #8]
 80006ea:	6941      	ldr	r1, [r0, #20]
 80006ec:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 80006f0:	6093      	str	r3, [r2, #8]
}
 80006f2:	4770      	bx	lr
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80006f4:	6802      	ldr	r2, [r0, #0]
 80006f6:	6893      	ldr	r3, [r2, #8]
 80006f8:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 80006fc:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80006fe:	6802      	ldr	r2, [r0, #0]
 8000700:	6893      	ldr	r3, [r2, #8]
 8000702:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8000706:	6093      	str	r3, [r2, #8]
 8000708:	e7be      	b.n	8000688 <ADC_Init+0x80>
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800070a:	6802      	ldr	r2, [r0, #0]
 800070c:	6853      	ldr	r3, [r2, #4]
 800070e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000712:	6053      	str	r3, [r2, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8000714:	6802      	ldr	r2, [r0, #0]
 8000716:	6853      	ldr	r3, [r2, #4]
 8000718:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800071c:	6053      	str	r3, [r2, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800071e:	6801      	ldr	r1, [r0, #0]
 8000720:	684b      	ldr	r3, [r1, #4]
 8000722:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8000724:	3a01      	subs	r2, #1
 8000726:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 800072a:	604b      	str	r3, [r1, #4]
 800072c:	e7bf      	b.n	80006ae <ADC_Init+0xa6>
 800072e:	bf00      	nop
 8000730:	40012300 	.word	0x40012300
 8000734:	0f000001 	.word	0x0f000001

08000738 <HAL_ADC_Init>:
  if(hadc == NULL)
 8000738:	b330      	cbz	r0, 8000788 <HAL_ADC_Init+0x50>
{
 800073a:	b510      	push	{r4, lr}
 800073c:	4604      	mov	r4, r0
  if(hadc->State == HAL_ADC_STATE_RESET)
 800073e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8000740:	b143      	cbz	r3, 8000754 <HAL_ADC_Init+0x1c>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000742:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000744:	f013 0f10 	tst.w	r3, #16
 8000748:	d00a      	beq.n	8000760 <HAL_ADC_Init+0x28>
    tmp_hal_status = HAL_ERROR;
 800074a:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 800074c:	2300      	movs	r3, #0
 800074e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8000752:	bd10      	pop	{r4, pc}
    ADC_CLEAR_ERRORCODE(hadc);
 8000754:	6443      	str	r3, [r0, #68]	; 0x44
    hadc->Lock = HAL_UNLOCKED;
 8000756:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_ADC_MspInit(hadc);
 800075a:	f002 ffbb 	bl	80036d4 <HAL_ADC_MspInit>
 800075e:	e7f0      	b.n	8000742 <HAL_ADC_Init+0xa>
    ADC_STATE_CLR_SET(hadc->State,
 8000760:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000762:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000766:	f023 0302 	bic.w	r3, r3, #2
 800076a:	f043 0302 	orr.w	r3, r3, #2
 800076e:	6423      	str	r3, [r4, #64]	; 0x40
    ADC_Init(hadc);
 8000770:	4620      	mov	r0, r4
 8000772:	f7ff ff49 	bl	8000608 <ADC_Init>
    ADC_CLEAR_ERRORCODE(hadc);
 8000776:	2000      	movs	r0, #0
 8000778:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 800077a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800077c:	f023 0303 	bic.w	r3, r3, #3
 8000780:	f043 0301 	orr.w	r3, r3, #1
 8000784:	6423      	str	r3, [r4, #64]	; 0x40
 8000786:	e7e1      	b.n	800074c <HAL_ADC_Init+0x14>
    return HAL_ERROR;
 8000788:	2001      	movs	r0, #1
}
 800078a:	4770      	bx	lr

0800078c <HAL_ADC_ConfigChannel>:
{
 800078c:	b430      	push	{r4, r5}
 800078e:	b082      	sub	sp, #8
  __IO uint32_t counter = 0U;
 8000790:	2300      	movs	r3, #0
 8000792:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8000794:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8000798:	2b01      	cmp	r3, #1
 800079a:	f000 80b5 	beq.w	8000908 <HAL_ADC_ConfigChannel+0x17c>
 800079e:	2301      	movs	r3, #1
 80007a0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if (sConfig->Channel > ADC_CHANNEL_9)
 80007a4:	680b      	ldr	r3, [r1, #0]
 80007a6:	2b09      	cmp	r3, #9
 80007a8:	d93e      	bls.n	8000828 <HAL_ADC_ConfigChannel+0x9c>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80007aa:	6805      	ldr	r5, [r0, #0]
 80007ac:	68ea      	ldr	r2, [r5, #12]
 80007ae:	b29b      	uxth	r3, r3
 80007b0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80007b4:	3b1e      	subs	r3, #30
 80007b6:	2407      	movs	r4, #7
 80007b8:	fa04 f303 	lsl.w	r3, r4, r3
 80007bc:	ea22 0303 	bic.w	r3, r2, r3
 80007c0:	60eb      	str	r3, [r5, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80007c2:	6805      	ldr	r5, [r0, #0]
 80007c4:	68ea      	ldr	r2, [r5, #12]
 80007c6:	688c      	ldr	r4, [r1, #8]
 80007c8:	880b      	ldrh	r3, [r1, #0]
 80007ca:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80007ce:	3b1e      	subs	r3, #30
 80007d0:	fa04 f303 	lsl.w	r3, r4, r3
 80007d4:	4313      	orrs	r3, r2
 80007d6:	60eb      	str	r3, [r5, #12]
  if (sConfig->Rank < 7U)
 80007d8:	684b      	ldr	r3, [r1, #4]
 80007da:	2b06      	cmp	r3, #6
 80007dc:	d83a      	bhi.n	8000854 <HAL_ADC_ConfigChannel+0xc8>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80007de:	6805      	ldr	r5, [r0, #0]
 80007e0:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80007e2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80007e6:	3b05      	subs	r3, #5
 80007e8:	241f      	movs	r4, #31
 80007ea:	fa04 f303 	lsl.w	r3, r4, r3
 80007ee:	ea22 0303 	bic.w	r3, r2, r3
 80007f2:	636b      	str	r3, [r5, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80007f4:	6805      	ldr	r5, [r0, #0]
 80007f6:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80007f8:	684b      	ldr	r3, [r1, #4]
 80007fa:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80007fe:	3b05      	subs	r3, #5
 8000800:	880c      	ldrh	r4, [r1, #0]
 8000802:	fa04 f303 	lsl.w	r3, r4, r3
 8000806:	4313      	orrs	r3, r2
 8000808:	636b      	str	r3, [r5, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800080a:	6802      	ldr	r2, [r0, #0]
 800080c:	4b3f      	ldr	r3, [pc, #252]	; (800090c <HAL_ADC_ConfigChannel+0x180>)
 800080e:	429a      	cmp	r2, r3
 8000810:	d050      	beq.n	80008b4 <HAL_ADC_ConfigChannel+0x128>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8000812:	6802      	ldr	r2, [r0, #0]
 8000814:	4b3d      	ldr	r3, [pc, #244]	; (800090c <HAL_ADC_ConfigChannel+0x180>)
 8000816:	429a      	cmp	r2, r3
 8000818:	d055      	beq.n	80008c6 <HAL_ADC_ConfigChannel+0x13a>
  __HAL_UNLOCK(hadc);
 800081a:	2300      	movs	r3, #0
 800081c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8000820:	4618      	mov	r0, r3
}
 8000822:	b002      	add	sp, #8
 8000824:	bc30      	pop	{r4, r5}
 8000826:	4770      	bx	lr
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8000828:	6805      	ldr	r5, [r0, #0]
 800082a:	692a      	ldr	r2, [r5, #16]
 800082c:	b29b      	uxth	r3, r3
 800082e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8000832:	2407      	movs	r4, #7
 8000834:	fa04 f303 	lsl.w	r3, r4, r3
 8000838:	ea22 0303 	bic.w	r3, r2, r3
 800083c:	612b      	str	r3, [r5, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800083e:	6805      	ldr	r5, [r0, #0]
 8000840:	692a      	ldr	r2, [r5, #16]
 8000842:	688c      	ldr	r4, [r1, #8]
 8000844:	880b      	ldrh	r3, [r1, #0]
 8000846:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800084a:	fa04 f303 	lsl.w	r3, r4, r3
 800084e:	4313      	orrs	r3, r2
 8000850:	612b      	str	r3, [r5, #16]
 8000852:	e7c1      	b.n	80007d8 <HAL_ADC_ConfigChannel+0x4c>
  else if (sConfig->Rank < 13U)
 8000854:	2b0c      	cmp	r3, #12
 8000856:	d816      	bhi.n	8000886 <HAL_ADC_ConfigChannel+0xfa>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8000858:	6805      	ldr	r5, [r0, #0]
 800085a:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 800085c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000860:	3b23      	subs	r3, #35	; 0x23
 8000862:	241f      	movs	r4, #31
 8000864:	fa04 f303 	lsl.w	r3, r4, r3
 8000868:	ea22 0303 	bic.w	r3, r2, r3
 800086c:	632b      	str	r3, [r5, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800086e:	6805      	ldr	r5, [r0, #0]
 8000870:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8000872:	684b      	ldr	r3, [r1, #4]
 8000874:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000878:	3b23      	subs	r3, #35	; 0x23
 800087a:	880c      	ldrh	r4, [r1, #0]
 800087c:	fa04 f303 	lsl.w	r3, r4, r3
 8000880:	4313      	orrs	r3, r2
 8000882:	632b      	str	r3, [r5, #48]	; 0x30
 8000884:	e7c1      	b.n	800080a <HAL_ADC_ConfigChannel+0x7e>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8000886:	6805      	ldr	r5, [r0, #0]
 8000888:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 800088a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800088e:	3b41      	subs	r3, #65	; 0x41
 8000890:	241f      	movs	r4, #31
 8000892:	fa04 f303 	lsl.w	r3, r4, r3
 8000896:	ea22 0303 	bic.w	r3, r2, r3
 800089a:	62eb      	str	r3, [r5, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800089c:	6805      	ldr	r5, [r0, #0]
 800089e:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 80008a0:	684b      	ldr	r3, [r1, #4]
 80008a2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80008a6:	3b41      	subs	r3, #65	; 0x41
 80008a8:	880c      	ldrh	r4, [r1, #0]
 80008aa:	fa04 f303 	lsl.w	r3, r4, r3
 80008ae:	4313      	orrs	r3, r2
 80008b0:	62eb      	str	r3, [r5, #44]	; 0x2c
 80008b2:	e7aa      	b.n	800080a <HAL_ADC_ConfigChannel+0x7e>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80008b4:	680b      	ldr	r3, [r1, #0]
 80008b6:	2b12      	cmp	r3, #18
 80008b8:	d1ab      	bne.n	8000812 <HAL_ADC_ConfigChannel+0x86>
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80008ba:	4a15      	ldr	r2, [pc, #84]	; (8000910 <HAL_ADC_ConfigChannel+0x184>)
 80008bc:	6853      	ldr	r3, [r2, #4]
 80008be:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80008c2:	6053      	str	r3, [r2, #4]
 80008c4:	e7a5      	b.n	8000812 <HAL_ADC_ConfigChannel+0x86>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80008c6:	680b      	ldr	r3, [r1, #0]
 80008c8:	4a12      	ldr	r2, [pc, #72]	; (8000914 <HAL_ADC_ConfigChannel+0x188>)
 80008ca:	4293      	cmp	r3, r2
 80008cc:	d001      	beq.n	80008d2 <HAL_ADC_ConfigChannel+0x146>
 80008ce:	2b11      	cmp	r3, #17
 80008d0:	d1a3      	bne.n	800081a <HAL_ADC_ConfigChannel+0x8e>
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80008d2:	4a0f      	ldr	r2, [pc, #60]	; (8000910 <HAL_ADC_ConfigChannel+0x184>)
 80008d4:	6853      	ldr	r3, [r2, #4]
 80008d6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80008da:	6053      	str	r3, [r2, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80008dc:	680a      	ldr	r2, [r1, #0]
 80008de:	4b0d      	ldr	r3, [pc, #52]	; (8000914 <HAL_ADC_ConfigChannel+0x188>)
 80008e0:	429a      	cmp	r2, r3
 80008e2:	d19a      	bne.n	800081a <HAL_ADC_ConfigChannel+0x8e>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80008e4:	4b0c      	ldr	r3, [pc, #48]	; (8000918 <HAL_ADC_ConfigChannel+0x18c>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	4a0c      	ldr	r2, [pc, #48]	; (800091c <HAL_ADC_ConfigChannel+0x190>)
 80008ea:	fba2 2303 	umull	r2, r3, r2, r3
 80008ee:	0c9b      	lsrs	r3, r3, #18
 80008f0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80008f4:	005a      	lsls	r2, r3, #1
 80008f6:	9201      	str	r2, [sp, #4]
      while(counter != 0U)
 80008f8:	e002      	b.n	8000900 <HAL_ADC_ConfigChannel+0x174>
        counter--;
 80008fa:	9b01      	ldr	r3, [sp, #4]
 80008fc:	3b01      	subs	r3, #1
 80008fe:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 8000900:	9b01      	ldr	r3, [sp, #4]
 8000902:	2b00      	cmp	r3, #0
 8000904:	d1f9      	bne.n	80008fa <HAL_ADC_ConfigChannel+0x16e>
 8000906:	e788      	b.n	800081a <HAL_ADC_ConfigChannel+0x8e>
  __HAL_LOCK(hadc);
 8000908:	2002      	movs	r0, #2
 800090a:	e78a      	b.n	8000822 <HAL_ADC_ConfigChannel+0x96>
 800090c:	40012000 	.word	0x40012000
 8000910:	40012300 	.word	0x40012300
 8000914:	10000012 	.word	0x10000012
 8000918:	2000000c 	.word	0x2000000c
 800091c:	431bde83 	.word	0x431bde83

08000920 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000920:	4a07      	ldr	r2, [pc, #28]	; (8000940 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000922:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000924:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000928:	041b      	lsls	r3, r3, #16
 800092a:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800092c:	0200      	lsls	r0, r0, #8
 800092e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000932:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 8000934:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 8000938:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 800093c:	60d0      	str	r0, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800093e:	4770      	bx	lr
 8000940:	e000ed00 	.word	0xe000ed00

08000944 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000944:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000946:	4b17      	ldr	r3, [pc, #92]	; (80009a4 <HAL_NVIC_SetPriority+0x60>)
 8000948:	68db      	ldr	r3, [r3, #12]
 800094a:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800094e:	f1c3 0407 	rsb	r4, r3, #7
 8000952:	2c04      	cmp	r4, #4
 8000954:	bf28      	it	cs
 8000956:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000958:	1d1d      	adds	r5, r3, #4
 800095a:	2d06      	cmp	r5, #6
 800095c:	d918      	bls.n	8000990 <HAL_NVIC_SetPriority+0x4c>
 800095e:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000960:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8000964:	fa05 f404 	lsl.w	r4, r5, r4
 8000968:	ea21 0104 	bic.w	r1, r1, r4
 800096c:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800096e:	fa05 f303 	lsl.w	r3, r5, r3
 8000972:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000976:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) < 0)
 8000978:	2800      	cmp	r0, #0
 800097a:	db0b      	blt.n	8000994 <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800097c:	0109      	lsls	r1, r1, #4
 800097e:	b2c9      	uxtb	r1, r1
 8000980:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000984:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000988:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800098c:	bc30      	pop	{r4, r5}
 800098e:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000990:	2300      	movs	r3, #0
 8000992:	e7e5      	b.n	8000960 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000994:	f000 000f 	and.w	r0, r0, #15
 8000998:	0109      	lsls	r1, r1, #4
 800099a:	b2c9      	uxtb	r1, r1
 800099c:	4b02      	ldr	r3, [pc, #8]	; (80009a8 <HAL_NVIC_SetPriority+0x64>)
 800099e:	5419      	strb	r1, [r3, r0]
 80009a0:	e7f4      	b.n	800098c <HAL_NVIC_SetPriority+0x48>
 80009a2:	bf00      	nop
 80009a4:	e000ed00 	.word	0xe000ed00
 80009a8:	e000ed14 	.word	0xe000ed14

080009ac <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80009ac:	f000 021f 	and.w	r2, r0, #31
 80009b0:	0940      	lsrs	r0, r0, #5
 80009b2:	2301      	movs	r3, #1
 80009b4:	4093      	lsls	r3, r2
 80009b6:	4a02      	ldr	r2, [pc, #8]	; (80009c0 <HAL_NVIC_EnableIRQ+0x14>)
 80009b8:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80009bc:	4770      	bx	lr
 80009be:	bf00      	nop
 80009c0:	e000e100 	.word	0xe000e100

080009c4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009c4:	3801      	subs	r0, #1
 80009c6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80009ca:	d20a      	bcs.n	80009e2 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009cc:	4b06      	ldr	r3, [pc, #24]	; (80009e8 <HAL_SYSTICK_Config+0x24>)
 80009ce:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009d0:	4a06      	ldr	r2, [pc, #24]	; (80009ec <HAL_SYSTICK_Config+0x28>)
 80009d2:	21f0      	movs	r1, #240	; 0xf0
 80009d4:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009d8:	2000      	movs	r0, #0
 80009da:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009dc:	2207      	movs	r2, #7
 80009de:	601a      	str	r2, [r3, #0]
 80009e0:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80009e2:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80009e4:	4770      	bx	lr
 80009e6:	bf00      	nop
 80009e8:	e000e010 	.word	0xe000e010
 80009ec:	e000ed00 	.word	0xe000ed00

080009f0 <HAL_SYSTICK_CLKSourceConfig>:
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80009f0:	2804      	cmp	r0, #4
 80009f2:	d005      	beq.n	8000a00 <HAL_SYSTICK_CLKSourceConfig+0x10>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80009f4:	4a05      	ldr	r2, [pc, #20]	; (8000a0c <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 80009f6:	6813      	ldr	r3, [r2, #0]
 80009f8:	f023 0304 	bic.w	r3, r3, #4
 80009fc:	6013      	str	r3, [r2, #0]
  }
}
 80009fe:	4770      	bx	lr
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000a00:	4a02      	ldr	r2, [pc, #8]	; (8000a0c <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 8000a02:	6813      	ldr	r3, [r2, #0]
 8000a04:	f043 0304 	orr.w	r3, r3, #4
 8000a08:	6013      	str	r3, [r2, #0]
 8000a0a:	4770      	bx	lr
 8000a0c:	e000e010 	.word	0xe000e010

08000a10 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000a10:	2300      	movs	r3, #0
 8000a12:	2b0f      	cmp	r3, #15
 8000a14:	f200 80d1 	bhi.w	8000bba <HAL_GPIO_Init+0x1aa>
{
 8000a18:	b4f0      	push	{r4, r5, r6, r7}
 8000a1a:	b082      	sub	sp, #8
 8000a1c:	e039      	b.n	8000a92 <HAL_GPIO_Init+0x82>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000a1e:	2206      	movs	r2, #6
 8000a20:	e000      	b.n	8000a24 <HAL_GPIO_Init+0x14>
 8000a22:	2200      	movs	r2, #0
 8000a24:	40b2      	lsls	r2, r6
 8000a26:	433a      	orrs	r2, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000a28:	3402      	adds	r4, #2
 8000a2a:	4e64      	ldr	r6, [pc, #400]	; (8000bbc <HAL_GPIO_Init+0x1ac>)
 8000a2c:	f846 2024 	str.w	r2, [r6, r4, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000a30:	4a63      	ldr	r2, [pc, #396]	; (8000bc0 <HAL_GPIO_Init+0x1b0>)
 8000a32:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000a34:	43ea      	mvns	r2, r5
 8000a36:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a3a:	684f      	ldr	r7, [r1, #4]
 8000a3c:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8000a40:	d001      	beq.n	8000a46 <HAL_GPIO_Init+0x36>
        {
          temp |= iocurrent;
 8000a42:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->IMR = temp;
 8000a46:	4c5e      	ldr	r4, [pc, #376]	; (8000bc0 <HAL_GPIO_Init+0x1b0>)
 8000a48:	6026      	str	r6, [r4, #0]

        temp = EXTI->EMR;
 8000a4a:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8000a4c:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a50:	684f      	ldr	r7, [r1, #4]
 8000a52:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8000a56:	d001      	beq.n	8000a5c <HAL_GPIO_Init+0x4c>
        {
          temp |= iocurrent;
 8000a58:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->EMR = temp;
 8000a5c:	4c58      	ldr	r4, [pc, #352]	; (8000bc0 <HAL_GPIO_Init+0x1b0>)
 8000a5e:	6066      	str	r6, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000a60:	68a4      	ldr	r4, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 8000a62:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a66:	684f      	ldr	r7, [r1, #4]
 8000a68:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8000a6c:	d001      	beq.n	8000a72 <HAL_GPIO_Init+0x62>
        {
          temp |= iocurrent;
 8000a6e:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->RTSR = temp;
 8000a72:	4c53      	ldr	r4, [pc, #332]	; (8000bc0 <HAL_GPIO_Init+0x1b0>)
 8000a74:	60a6      	str	r6, [r4, #8]

        temp = EXTI->FTSR;
 8000a76:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8000a78:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a7a:	684e      	ldr	r6, [r1, #4]
 8000a7c:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 8000a80:	d001      	beq.n	8000a86 <HAL_GPIO_Init+0x76>
        {
          temp |= iocurrent;
 8000a82:	ea45 0204 	orr.w	r2, r5, r4
        }
        EXTI->FTSR = temp;
 8000a86:	4c4e      	ldr	r4, [pc, #312]	; (8000bc0 <HAL_GPIO_Init+0x1b0>)
 8000a88:	60e2      	str	r2, [r4, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000a8a:	3301      	adds	r3, #1
 8000a8c:	2b0f      	cmp	r3, #15
 8000a8e:	f200 8091 	bhi.w	8000bb4 <HAL_GPIO_Init+0x1a4>
    ioposition = 0x01U << position;
 8000a92:	2201      	movs	r2, #1
 8000a94:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a96:	680c      	ldr	r4, [r1, #0]
 8000a98:	ea04 0502 	and.w	r5, r4, r2
    if(iocurrent == ioposition)
 8000a9c:	42aa      	cmp	r2, r5
 8000a9e:	d1f4      	bne.n	8000a8a <HAL_GPIO_Init+0x7a>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000aa0:	684c      	ldr	r4, [r1, #4]
 8000aa2:	2c02      	cmp	r4, #2
 8000aa4:	d001      	beq.n	8000aaa <HAL_GPIO_Init+0x9a>
 8000aa6:	2c12      	cmp	r4, #18
 8000aa8:	d110      	bne.n	8000acc <HAL_GPIO_Init+0xbc>
        temp = GPIOx->AFR[position >> 3U];
 8000aaa:	08de      	lsrs	r6, r3, #3
 8000aac:	3608      	adds	r6, #8
 8000aae:	f850 c026 	ldr.w	ip, [r0, r6, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000ab2:	f003 0407 	and.w	r4, r3, #7
 8000ab6:	00a7      	lsls	r7, r4, #2
 8000ab8:	240f      	movs	r4, #15
 8000aba:	40bc      	lsls	r4, r7
 8000abc:	ea2c 0c04 	bic.w	ip, ip, r4
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ac0:	690c      	ldr	r4, [r1, #16]
 8000ac2:	40bc      	lsls	r4, r7
 8000ac4:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->AFR[position >> 3U] = temp;
 8000ac8:	f840 4026 	str.w	r4, [r0, r6, lsl #2]
      temp = GPIOx->MODER;
 8000acc:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000ace:	005f      	lsls	r7, r3, #1
 8000ad0:	2603      	movs	r6, #3
 8000ad2:	40be      	lsls	r6, r7
 8000ad4:	43f6      	mvns	r6, r6
 8000ad6:	ea06 0c04 	and.w	ip, r6, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ada:	684c      	ldr	r4, [r1, #4]
 8000adc:	f004 0403 	and.w	r4, r4, #3
 8000ae0:	40bc      	lsls	r4, r7
 8000ae2:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->MODER = temp;
 8000ae6:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ae8:	684c      	ldr	r4, [r1, #4]
 8000aea:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
 8000aee:	f1bc 0f01 	cmp.w	ip, #1
 8000af2:	d903      	bls.n	8000afc <HAL_GPIO_Init+0xec>
 8000af4:	2c11      	cmp	r4, #17
 8000af6:	d001      	beq.n	8000afc <HAL_GPIO_Init+0xec>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000af8:	2c12      	cmp	r4, #18
 8000afa:	d110      	bne.n	8000b1e <HAL_GPIO_Init+0x10e>
        temp = GPIOx->OSPEEDR; 
 8000afc:	6884      	ldr	r4, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000afe:	ea06 0c04 	and.w	ip, r6, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000b02:	68cc      	ldr	r4, [r1, #12]
 8000b04:	40bc      	lsls	r4, r7
 8000b06:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->OSPEEDR = temp;
 8000b0a:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8000b0c:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b0e:	ea24 0202 	bic.w	r2, r4, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000b12:	684c      	ldr	r4, [r1, #4]
 8000b14:	f3c4 1400 	ubfx	r4, r4, #4, #1
 8000b18:	409c      	lsls	r4, r3
 8000b1a:	4314      	orrs	r4, r2
        GPIOx->OTYPER = temp;
 8000b1c:	6044      	str	r4, [r0, #4]
      temp = GPIOx->PUPDR;
 8000b1e:	68c2      	ldr	r2, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000b20:	4016      	ands	r6, r2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000b22:	688a      	ldr	r2, [r1, #8]
 8000b24:	40ba      	lsls	r2, r7
 8000b26:	4332      	orrs	r2, r6
      GPIOx->PUPDR = temp;
 8000b28:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b2a:	684a      	ldr	r2, [r1, #4]
 8000b2c:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 8000b30:	d0ab      	beq.n	8000a8a <HAL_GPIO_Init+0x7a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b32:	2200      	movs	r2, #0
 8000b34:	9201      	str	r2, [sp, #4]
 8000b36:	4a23      	ldr	r2, [pc, #140]	; (8000bc4 <HAL_GPIO_Init+0x1b4>)
 8000b38:	6c54      	ldr	r4, [r2, #68]	; 0x44
 8000b3a:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8000b3e:	6454      	str	r4, [r2, #68]	; 0x44
 8000b40:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8000b42:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8000b46:	9201      	str	r2, [sp, #4]
 8000b48:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8000b4a:	089c      	lsrs	r4, r3, #2
 8000b4c:	1ca6      	adds	r6, r4, #2
 8000b4e:	4a1b      	ldr	r2, [pc, #108]	; (8000bbc <HAL_GPIO_Init+0x1ac>)
 8000b50:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000b54:	f003 0203 	and.w	r2, r3, #3
 8000b58:	0096      	lsls	r6, r2, #2
 8000b5a:	220f      	movs	r2, #15
 8000b5c:	40b2      	lsls	r2, r6
 8000b5e:	ea27 0702 	bic.w	r7, r7, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000b62:	4a19      	ldr	r2, [pc, #100]	; (8000bc8 <HAL_GPIO_Init+0x1b8>)
 8000b64:	4290      	cmp	r0, r2
 8000b66:	f43f af5c 	beq.w	8000a22 <HAL_GPIO_Init+0x12>
 8000b6a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000b6e:	4290      	cmp	r0, r2
 8000b70:	d016      	beq.n	8000ba0 <HAL_GPIO_Init+0x190>
 8000b72:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000b76:	4290      	cmp	r0, r2
 8000b78:	d014      	beq.n	8000ba4 <HAL_GPIO_Init+0x194>
 8000b7a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000b7e:	4290      	cmp	r0, r2
 8000b80:	d012      	beq.n	8000ba8 <HAL_GPIO_Init+0x198>
 8000b82:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000b86:	4290      	cmp	r0, r2
 8000b88:	d010      	beq.n	8000bac <HAL_GPIO_Init+0x19c>
 8000b8a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000b8e:	4290      	cmp	r0, r2
 8000b90:	d00e      	beq.n	8000bb0 <HAL_GPIO_Init+0x1a0>
 8000b92:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000b96:	4290      	cmp	r0, r2
 8000b98:	f43f af41 	beq.w	8000a1e <HAL_GPIO_Init+0xe>
 8000b9c:	2207      	movs	r2, #7
 8000b9e:	e741      	b.n	8000a24 <HAL_GPIO_Init+0x14>
 8000ba0:	2201      	movs	r2, #1
 8000ba2:	e73f      	b.n	8000a24 <HAL_GPIO_Init+0x14>
 8000ba4:	2202      	movs	r2, #2
 8000ba6:	e73d      	b.n	8000a24 <HAL_GPIO_Init+0x14>
 8000ba8:	2203      	movs	r2, #3
 8000baa:	e73b      	b.n	8000a24 <HAL_GPIO_Init+0x14>
 8000bac:	2204      	movs	r2, #4
 8000bae:	e739      	b.n	8000a24 <HAL_GPIO_Init+0x14>
 8000bb0:	2205      	movs	r2, #5
 8000bb2:	e737      	b.n	8000a24 <HAL_GPIO_Init+0x14>
      }
    }
  }
}
 8000bb4:	b002      	add	sp, #8
 8000bb6:	bcf0      	pop	{r4, r5, r6, r7}
 8000bb8:	4770      	bx	lr
 8000bba:	4770      	bx	lr
 8000bbc:	40013800 	.word	0x40013800
 8000bc0:	40013c00 	.word	0x40013c00
 8000bc4:	40023800 	.word	0x40023800
 8000bc8:	40020000 	.word	0x40020000

08000bcc <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000bcc:	b912      	cbnz	r2, 8000bd4 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000bce:	0409      	lsls	r1, r1, #16
 8000bd0:	6181      	str	r1, [r0, #24]
  }
}
 8000bd2:	4770      	bx	lr
    GPIOx->BSRR = GPIO_Pin;
 8000bd4:	6181      	str	r1, [r0, #24]
 8000bd6:	4770      	bx	lr

08000bd8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8000bd8:	b510      	push	{r4, lr}
 8000bda:	b082      	sub	sp, #8
  uint32_t tickstart = 0U;

  __HAL_RCC_PWR_CLK_ENABLE();
 8000bdc:	2300      	movs	r3, #0
 8000bde:	9301      	str	r3, [sp, #4]
 8000be0:	4b19      	ldr	r3, [pc, #100]	; (8000c48 <HAL_PWREx_EnableOverDrive+0x70>)
 8000be2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000be4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000be8:	641a      	str	r2, [r3, #64]	; 0x40
 8000bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bf0:	9301      	str	r3, [sp, #4]
 8000bf2:	9b01      	ldr	r3, [sp, #4]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8000bf4:	4b15      	ldr	r3, [pc, #84]	; (8000c4c <HAL_PWREx_EnableOverDrive+0x74>)
 8000bf6:	2201      	movs	r2, #1
 8000bf8:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000bfa:	f7ff fcff 	bl	80005fc <HAL_GetTick>
 8000bfe:	4604      	mov	r4, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000c00:	4b13      	ldr	r3, [pc, #76]	; (8000c50 <HAL_PWREx_EnableOverDrive+0x78>)
 8000c02:	685b      	ldr	r3, [r3, #4]
 8000c04:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8000c08:	d108      	bne.n	8000c1c <HAL_PWREx_EnableOverDrive+0x44>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000c0a:	f7ff fcf7 	bl	80005fc <HAL_GetTick>
 8000c0e:	1b00      	subs	r0, r0, r4
 8000c10:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8000c14:	d9f4      	bls.n	8000c00 <HAL_PWREx_EnableOverDrive+0x28>
    {
      return HAL_TIMEOUT;
 8000c16:	2003      	movs	r0, #3
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
}
 8000c18:	b002      	add	sp, #8
 8000c1a:	bd10      	pop	{r4, pc}
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8000c1c:	4b0d      	ldr	r3, [pc, #52]	; (8000c54 <HAL_PWREx_EnableOverDrive+0x7c>)
 8000c1e:	2201      	movs	r2, #1
 8000c20:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8000c22:	f7ff fceb 	bl	80005fc <HAL_GetTick>
 8000c26:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8000c28:	4b09      	ldr	r3, [pc, #36]	; (8000c50 <HAL_PWREx_EnableOverDrive+0x78>)
 8000c2a:	685b      	ldr	r3, [r3, #4]
 8000c2c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000c30:	d107      	bne.n	8000c42 <HAL_PWREx_EnableOverDrive+0x6a>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000c32:	f7ff fce3 	bl	80005fc <HAL_GetTick>
 8000c36:	1b00      	subs	r0, r0, r4
 8000c38:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8000c3c:	d9f4      	bls.n	8000c28 <HAL_PWREx_EnableOverDrive+0x50>
      return HAL_TIMEOUT;
 8000c3e:	2003      	movs	r0, #3
 8000c40:	e7ea      	b.n	8000c18 <HAL_PWREx_EnableOverDrive+0x40>
  return HAL_OK;
 8000c42:	2000      	movs	r0, #0
 8000c44:	e7e8      	b.n	8000c18 <HAL_PWREx_EnableOverDrive+0x40>
 8000c46:	bf00      	nop
 8000c48:	40023800 	.word	0x40023800
 8000c4c:	420e0040 	.word	0x420e0040
 8000c50:	40007000 	.word	0x40007000
 8000c54:	420e0044 	.word	0x420e0044

08000c58 <HAL_RCC_ClockConfig>:
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8000c58:	2800      	cmp	r0, #0
 8000c5a:	f000 809d 	beq.w	8000d98 <HAL_RCC_ClockConfig+0x140>
{
 8000c5e:	b570      	push	{r4, r5, r6, lr}
 8000c60:	4604      	mov	r4, r0
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000c62:	4b4f      	ldr	r3, [pc, #316]	; (8000da0 <HAL_RCC_ClockConfig+0x148>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	f003 030f 	and.w	r3, r3, #15
 8000c6a:	428b      	cmp	r3, r1
 8000c6c:	d209      	bcs.n	8000c82 <HAL_RCC_ClockConfig+0x2a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000c6e:	b2cb      	uxtb	r3, r1
 8000c70:	4a4b      	ldr	r2, [pc, #300]	; (8000da0 <HAL_RCC_ClockConfig+0x148>)
 8000c72:	7013      	strb	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000c74:	6813      	ldr	r3, [r2, #0]
 8000c76:	f003 030f 	and.w	r3, r3, #15
 8000c7a:	428b      	cmp	r3, r1
 8000c7c:	d001      	beq.n	8000c82 <HAL_RCC_ClockConfig+0x2a>
    {
      return HAL_ERROR;
 8000c7e:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);

  return HAL_OK;
}
 8000c80:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000c82:	6823      	ldr	r3, [r4, #0]
 8000c84:	f013 0f02 	tst.w	r3, #2
 8000c88:	d017      	beq.n	8000cba <HAL_RCC_ClockConfig+0x62>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000c8a:	f013 0f04 	tst.w	r3, #4
 8000c8e:	d004      	beq.n	8000c9a <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000c90:	4a44      	ldr	r2, [pc, #272]	; (8000da4 <HAL_RCC_ClockConfig+0x14c>)
 8000c92:	6893      	ldr	r3, [r2, #8]
 8000c94:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8000c98:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000c9a:	6823      	ldr	r3, [r4, #0]
 8000c9c:	f013 0f08 	tst.w	r3, #8
 8000ca0:	d004      	beq.n	8000cac <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000ca2:	4a40      	ldr	r2, [pc, #256]	; (8000da4 <HAL_RCC_ClockConfig+0x14c>)
 8000ca4:	6893      	ldr	r3, [r2, #8]
 8000ca6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8000caa:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000cac:	4a3d      	ldr	r2, [pc, #244]	; (8000da4 <HAL_RCC_ClockConfig+0x14c>)
 8000cae:	6893      	ldr	r3, [r2, #8]
 8000cb0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000cb4:	68a0      	ldr	r0, [r4, #8]
 8000cb6:	4303      	orrs	r3, r0
 8000cb8:	6093      	str	r3, [r2, #8]
 8000cba:	460d      	mov	r5, r1
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000cbc:	6823      	ldr	r3, [r4, #0]
 8000cbe:	f013 0f01 	tst.w	r3, #1
 8000cc2:	d032      	beq.n	8000d2a <HAL_RCC_ClockConfig+0xd2>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000cc4:	6863      	ldr	r3, [r4, #4]
 8000cc6:	2b01      	cmp	r3, #1
 8000cc8:	d021      	beq.n	8000d0e <HAL_RCC_ClockConfig+0xb6>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000cca:	1e9a      	subs	r2, r3, #2
 8000ccc:	2a01      	cmp	r2, #1
 8000cce:	d925      	bls.n	8000d1c <HAL_RCC_ClockConfig+0xc4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000cd0:	4a34      	ldr	r2, [pc, #208]	; (8000da4 <HAL_RCC_ClockConfig+0x14c>)
 8000cd2:	6812      	ldr	r2, [r2, #0]
 8000cd4:	f012 0f02 	tst.w	r2, #2
 8000cd8:	d060      	beq.n	8000d9c <HAL_RCC_ClockConfig+0x144>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000cda:	4932      	ldr	r1, [pc, #200]	; (8000da4 <HAL_RCC_ClockConfig+0x14c>)
 8000cdc:	688a      	ldr	r2, [r1, #8]
 8000cde:	f022 0203 	bic.w	r2, r2, #3
 8000ce2:	4313      	orrs	r3, r2
 8000ce4:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8000ce6:	f7ff fc89 	bl	80005fc <HAL_GetTick>
 8000cea:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000cec:	4b2d      	ldr	r3, [pc, #180]	; (8000da4 <HAL_RCC_ClockConfig+0x14c>)
 8000cee:	689b      	ldr	r3, [r3, #8]
 8000cf0:	f003 030c 	and.w	r3, r3, #12
 8000cf4:	6862      	ldr	r2, [r4, #4]
 8000cf6:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000cfa:	d016      	beq.n	8000d2a <HAL_RCC_ClockConfig+0xd2>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000cfc:	f7ff fc7e 	bl	80005fc <HAL_GetTick>
 8000d00:	1b80      	subs	r0, r0, r6
 8000d02:	f241 3388 	movw	r3, #5000	; 0x1388
 8000d06:	4298      	cmp	r0, r3
 8000d08:	d9f0      	bls.n	8000cec <HAL_RCC_ClockConfig+0x94>
        return HAL_TIMEOUT;
 8000d0a:	2003      	movs	r0, #3
 8000d0c:	e7b8      	b.n	8000c80 <HAL_RCC_ClockConfig+0x28>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d0e:	4a25      	ldr	r2, [pc, #148]	; (8000da4 <HAL_RCC_ClockConfig+0x14c>)
 8000d10:	6812      	ldr	r2, [r2, #0]
 8000d12:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8000d16:	d1e0      	bne.n	8000cda <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 8000d18:	2001      	movs	r0, #1
 8000d1a:	e7b1      	b.n	8000c80 <HAL_RCC_ClockConfig+0x28>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000d1c:	4a21      	ldr	r2, [pc, #132]	; (8000da4 <HAL_RCC_ClockConfig+0x14c>)
 8000d1e:	6812      	ldr	r2, [r2, #0]
 8000d20:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8000d24:	d1d9      	bne.n	8000cda <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 8000d26:	2001      	movs	r0, #1
 8000d28:	e7aa      	b.n	8000c80 <HAL_RCC_ClockConfig+0x28>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000d2a:	4b1d      	ldr	r3, [pc, #116]	; (8000da0 <HAL_RCC_ClockConfig+0x148>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	f003 030f 	and.w	r3, r3, #15
 8000d32:	42ab      	cmp	r3, r5
 8000d34:	d909      	bls.n	8000d4a <HAL_RCC_ClockConfig+0xf2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000d36:	b2ea      	uxtb	r2, r5
 8000d38:	4b19      	ldr	r3, [pc, #100]	; (8000da0 <HAL_RCC_ClockConfig+0x148>)
 8000d3a:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	f003 030f 	and.w	r3, r3, #15
 8000d42:	42ab      	cmp	r3, r5
 8000d44:	d001      	beq.n	8000d4a <HAL_RCC_ClockConfig+0xf2>
      return HAL_ERROR;
 8000d46:	2001      	movs	r0, #1
 8000d48:	e79a      	b.n	8000c80 <HAL_RCC_ClockConfig+0x28>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000d4a:	6823      	ldr	r3, [r4, #0]
 8000d4c:	f013 0f04 	tst.w	r3, #4
 8000d50:	d006      	beq.n	8000d60 <HAL_RCC_ClockConfig+0x108>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000d52:	4a14      	ldr	r2, [pc, #80]	; (8000da4 <HAL_RCC_ClockConfig+0x14c>)
 8000d54:	6893      	ldr	r3, [r2, #8]
 8000d56:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8000d5a:	68e1      	ldr	r1, [r4, #12]
 8000d5c:	430b      	orrs	r3, r1
 8000d5e:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000d60:	6823      	ldr	r3, [r4, #0]
 8000d62:	f013 0f08 	tst.w	r3, #8
 8000d66:	d007      	beq.n	8000d78 <HAL_RCC_ClockConfig+0x120>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000d68:	4a0e      	ldr	r2, [pc, #56]	; (8000da4 <HAL_RCC_ClockConfig+0x14c>)
 8000d6a:	6893      	ldr	r3, [r2, #8]
 8000d6c:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000d70:	6921      	ldr	r1, [r4, #16]
 8000d72:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000d76:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000d78:	f000 f85e 	bl	8000e38 <HAL_RCC_GetSysClockFreq>
 8000d7c:	4b09      	ldr	r3, [pc, #36]	; (8000da4 <HAL_RCC_ClockConfig+0x14c>)
 8000d7e:	689b      	ldr	r3, [r3, #8]
 8000d80:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000d84:	4a08      	ldr	r2, [pc, #32]	; (8000da8 <HAL_RCC_ClockConfig+0x150>)
 8000d86:	5cd3      	ldrb	r3, [r2, r3]
 8000d88:	40d8      	lsrs	r0, r3
 8000d8a:	4b08      	ldr	r3, [pc, #32]	; (8000dac <HAL_RCC_ClockConfig+0x154>)
 8000d8c:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000d8e:	2000      	movs	r0, #0
 8000d90:	f002 fcee 	bl	8003770 <HAL_InitTick>
  return HAL_OK;
 8000d94:	2000      	movs	r0, #0
 8000d96:	e773      	b.n	8000c80 <HAL_RCC_ClockConfig+0x28>
    return HAL_ERROR;
 8000d98:	2001      	movs	r0, #1
}
 8000d9a:	4770      	bx	lr
        return HAL_ERROR;
 8000d9c:	2001      	movs	r0, #1
 8000d9e:	e76f      	b.n	8000c80 <HAL_RCC_ClockConfig+0x28>
 8000da0:	40023c00 	.word	0x40023c00
 8000da4:	40023800 	.word	0x40023800
 8000da8:	08004184 	.word	0x08004184
 8000dac:	2000000c 	.word	0x2000000c

08000db0 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8000db0:	4b01      	ldr	r3, [pc, #4]	; (8000db8 <HAL_RCC_GetHCLKFreq+0x8>)
 8000db2:	6818      	ldr	r0, [r3, #0]
 8000db4:	4770      	bx	lr
 8000db6:	bf00      	nop
 8000db8:	2000000c 	.word	0x2000000c

08000dbc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8000dbc:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8000dbe:	f7ff fff7 	bl	8000db0 <HAL_RCC_GetHCLKFreq>
 8000dc2:	4b04      	ldr	r3, [pc, #16]	; (8000dd4 <HAL_RCC_GetPCLK1Freq+0x18>)
 8000dc4:	689b      	ldr	r3, [r3, #8]
 8000dc6:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8000dca:	4a03      	ldr	r2, [pc, #12]	; (8000dd8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000dcc:	5cd3      	ldrb	r3, [r2, r3]
}
 8000dce:	40d8      	lsrs	r0, r3
 8000dd0:	bd08      	pop	{r3, pc}
 8000dd2:	bf00      	nop
 8000dd4:	40023800 	.word	0x40023800
 8000dd8:	08004194 	.word	0x08004194

08000ddc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8000ddc:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8000dde:	f7ff ffe7 	bl	8000db0 <HAL_RCC_GetHCLKFreq>
 8000de2:	4b04      	ldr	r3, [pc, #16]	; (8000df4 <HAL_RCC_GetPCLK2Freq+0x18>)
 8000de4:	689b      	ldr	r3, [r3, #8]
 8000de6:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8000dea:	4a03      	ldr	r2, [pc, #12]	; (8000df8 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8000dec:	5cd3      	ldrb	r3, [r2, r3]
}
 8000dee:	40d8      	lsrs	r0, r3
 8000df0:	bd08      	pop	{r3, pc}
 8000df2:	bf00      	nop
 8000df4:	40023800 	.word	0x40023800
 8000df8:	08004194 	.word	0x08004194

08000dfc <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000dfc:	230f      	movs	r3, #15
 8000dfe:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8000e00:	4b0b      	ldr	r3, [pc, #44]	; (8000e30 <HAL_RCC_GetClockConfig+0x34>)
 8000e02:	689a      	ldr	r2, [r3, #8]
 8000e04:	f002 0203 	and.w	r2, r2, #3
 8000e08:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8000e0a:	689a      	ldr	r2, [r3, #8]
 8000e0c:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8000e10:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8000e12:	689a      	ldr	r2, [r3, #8]
 8000e14:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8000e18:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8000e1a:	689b      	ldr	r3, [r3, #8]
 8000e1c:	08db      	lsrs	r3, r3, #3
 8000e1e:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8000e22:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8000e24:	4b03      	ldr	r3, [pc, #12]	; (8000e34 <HAL_RCC_GetClockConfig+0x38>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	f003 030f 	and.w	r3, r3, #15
 8000e2c:	600b      	str	r3, [r1, #0]
}
 8000e2e:	4770      	bx	lr
 8000e30:	40023800 	.word	0x40023800
 8000e34:	40023c00 	.word	0x40023c00

08000e38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000e38:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
  uint32_t pllp = 0U;
  uint32_t pllr = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000e3c:	4b5c      	ldr	r3, [pc, #368]	; (8000fb0 <HAL_RCC_GetSysClockFreq+0x178>)
 8000e3e:	689b      	ldr	r3, [r3, #8]
 8000e40:	f003 030c 	and.w	r3, r3, #12
 8000e44:	2b08      	cmp	r3, #8
 8000e46:	d007      	beq.n	8000e58 <HAL_RCC_GetSysClockFreq+0x20>
 8000e48:	2b0c      	cmp	r3, #12
 8000e4a:	d05b      	beq.n	8000f04 <HAL_RCC_GetSysClockFreq+0xcc>
 8000e4c:	2b04      	cmp	r3, #4
 8000e4e:	f000 80ad 	beq.w	8000fac <HAL_RCC_GetSysClockFreq+0x174>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8000e52:	4858      	ldr	r0, [pc, #352]	; (8000fb4 <HAL_RCC_GetSysClockFreq+0x17c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000e54:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000e58:	4b55      	ldr	r3, [pc, #340]	; (8000fb0 <HAL_RCC_GetSysClockFreq+0x178>)
 8000e5a:	685a      	ldr	r2, [r3, #4]
 8000e5c:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000e60:	685b      	ldr	r3, [r3, #4]
 8000e62:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8000e66:	d02a      	beq.n	8000ebe <HAL_RCC_GetSysClockFreq+0x86>
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000e68:	4b51      	ldr	r3, [pc, #324]	; (8000fb0 <HAL_RCC_GetSysClockFreq+0x178>)
 8000e6a:	685b      	ldr	r3, [r3, #4]
 8000e6c:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8000e70:	461e      	mov	r6, r3
 8000e72:	2700      	movs	r7, #0
 8000e74:	015c      	lsls	r4, r3, #5
 8000e76:	2500      	movs	r5, #0
 8000e78:	1ae4      	subs	r4, r4, r3
 8000e7a:	eb65 0507 	sbc.w	r5, r5, r7
 8000e7e:	01a9      	lsls	r1, r5, #6
 8000e80:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 8000e84:	01a0      	lsls	r0, r4, #6
 8000e86:	1b00      	subs	r0, r0, r4
 8000e88:	eb61 0105 	sbc.w	r1, r1, r5
 8000e8c:	00cb      	lsls	r3, r1, #3
 8000e8e:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000e92:	00c4      	lsls	r4, r0, #3
 8000e94:	19a0      	adds	r0, r4, r6
 8000e96:	eb43 0107 	adc.w	r1, r3, r7
 8000e9a:	024b      	lsls	r3, r1, #9
 8000e9c:	ea43 53d0 	orr.w	r3, r3, r0, lsr #23
 8000ea0:	0244      	lsls	r4, r0, #9
 8000ea2:	4620      	mov	r0, r4
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	f7ff fa02 	bl	80002b0 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8000eac:	4b40      	ldr	r3, [pc, #256]	; (8000fb0 <HAL_RCC_GetSysClockFreq+0x178>)
 8000eae:	685b      	ldr	r3, [r3, #4]
 8000eb0:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8000eb4:	3301      	adds	r3, #1
 8000eb6:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8000eb8:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8000ebc:	e7ca      	b.n	8000e54 <HAL_RCC_GetSysClockFreq+0x1c>
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000ebe:	4b3c      	ldr	r3, [pc, #240]	; (8000fb0 <HAL_RCC_GetSysClockFreq+0x178>)
 8000ec0:	685b      	ldr	r3, [r3, #4]
 8000ec2:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8000ec6:	461e      	mov	r6, r3
 8000ec8:	2700      	movs	r7, #0
 8000eca:	015c      	lsls	r4, r3, #5
 8000ecc:	2500      	movs	r5, #0
 8000ece:	1ae4      	subs	r4, r4, r3
 8000ed0:	eb65 0507 	sbc.w	r5, r5, r7
 8000ed4:	01a9      	lsls	r1, r5, #6
 8000ed6:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 8000eda:	01a0      	lsls	r0, r4, #6
 8000edc:	1b00      	subs	r0, r0, r4
 8000ede:	eb61 0105 	sbc.w	r1, r1, r5
 8000ee2:	00cb      	lsls	r3, r1, #3
 8000ee4:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000ee8:	00c4      	lsls	r4, r0, #3
 8000eea:	19a0      	adds	r0, r4, r6
 8000eec:	eb43 0107 	adc.w	r1, r3, r7
 8000ef0:	028b      	lsls	r3, r1, #10
 8000ef2:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 8000ef6:	0284      	lsls	r4, r0, #10
 8000ef8:	4620      	mov	r0, r4
 8000efa:	4619      	mov	r1, r3
 8000efc:	2300      	movs	r3, #0
 8000efe:	f7ff f9d7 	bl	80002b0 <__aeabi_uldivmod>
 8000f02:	e7d3      	b.n	8000eac <HAL_RCC_GetSysClockFreq+0x74>
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000f04:	4b2a      	ldr	r3, [pc, #168]	; (8000fb0 <HAL_RCC_GetSysClockFreq+0x178>)
 8000f06:	685a      	ldr	r2, [r3, #4]
 8000f08:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000f0c:	685b      	ldr	r3, [r3, #4]
 8000f0e:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8000f12:	d028      	beq.n	8000f66 <HAL_RCC_GetSysClockFreq+0x12e>
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000f14:	4b26      	ldr	r3, [pc, #152]	; (8000fb0 <HAL_RCC_GetSysClockFreq+0x178>)
 8000f16:	685b      	ldr	r3, [r3, #4]
 8000f18:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8000f1c:	461e      	mov	r6, r3
 8000f1e:	2700      	movs	r7, #0
 8000f20:	015c      	lsls	r4, r3, #5
 8000f22:	2500      	movs	r5, #0
 8000f24:	1ae4      	subs	r4, r4, r3
 8000f26:	eb65 0507 	sbc.w	r5, r5, r7
 8000f2a:	01a9      	lsls	r1, r5, #6
 8000f2c:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 8000f30:	01a0      	lsls	r0, r4, #6
 8000f32:	1b00      	subs	r0, r0, r4
 8000f34:	eb61 0105 	sbc.w	r1, r1, r5
 8000f38:	00cb      	lsls	r3, r1, #3
 8000f3a:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000f3e:	00c4      	lsls	r4, r0, #3
 8000f40:	19a0      	adds	r0, r4, r6
 8000f42:	eb43 0107 	adc.w	r1, r3, r7
 8000f46:	024b      	lsls	r3, r1, #9
 8000f48:	ea43 53d0 	orr.w	r3, r3, r0, lsr #23
 8000f4c:	0244      	lsls	r4, r0, #9
 8000f4e:	4620      	mov	r0, r4
 8000f50:	4619      	mov	r1, r3
 8000f52:	2300      	movs	r3, #0
 8000f54:	f7ff f9ac 	bl	80002b0 <__aeabi_uldivmod>
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8000f58:	4b15      	ldr	r3, [pc, #84]	; (8000fb0 <HAL_RCC_GetSysClockFreq+0x178>)
 8000f5a:	685b      	ldr	r3, [r3, #4]
 8000f5c:	f3c3 7302 	ubfx	r3, r3, #28, #3
      sysclockfreq = pllvco/pllr;
 8000f60:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8000f64:	e776      	b.n	8000e54 <HAL_RCC_GetSysClockFreq+0x1c>
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000f66:	4b12      	ldr	r3, [pc, #72]	; (8000fb0 <HAL_RCC_GetSysClockFreq+0x178>)
 8000f68:	685b      	ldr	r3, [r3, #4]
 8000f6a:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8000f6e:	461e      	mov	r6, r3
 8000f70:	2700      	movs	r7, #0
 8000f72:	015c      	lsls	r4, r3, #5
 8000f74:	2500      	movs	r5, #0
 8000f76:	1ae4      	subs	r4, r4, r3
 8000f78:	eb65 0507 	sbc.w	r5, r5, r7
 8000f7c:	01a9      	lsls	r1, r5, #6
 8000f7e:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 8000f82:	01a0      	lsls	r0, r4, #6
 8000f84:	1b00      	subs	r0, r0, r4
 8000f86:	eb61 0105 	sbc.w	r1, r1, r5
 8000f8a:	00cb      	lsls	r3, r1, #3
 8000f8c:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000f90:	00c4      	lsls	r4, r0, #3
 8000f92:	19a0      	adds	r0, r4, r6
 8000f94:	eb43 0107 	adc.w	r1, r3, r7
 8000f98:	028b      	lsls	r3, r1, #10
 8000f9a:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 8000f9e:	0284      	lsls	r4, r0, #10
 8000fa0:	4620      	mov	r0, r4
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	f7ff f983 	bl	80002b0 <__aeabi_uldivmod>
 8000faa:	e7d5      	b.n	8000f58 <HAL_RCC_GetSysClockFreq+0x120>
      sysclockfreq = HSE_VALUE;
 8000fac:	4802      	ldr	r0, [pc, #8]	; (8000fb8 <HAL_RCC_GetSysClockFreq+0x180>)
  return sysclockfreq;
 8000fae:	e751      	b.n	8000e54 <HAL_RCC_GetSysClockFreq+0x1c>
 8000fb0:	40023800 	.word	0x40023800
 8000fb4:	00f42400 	.word	0x00f42400
 8000fb8:	007a1200 	.word	0x007a1200

08000fbc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000fbc:	b570      	push	{r4, r5, r6, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	4604      	mov	r4, r0
  uint32_t tickstart = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000fc2:	6803      	ldr	r3, [r0, #0]
 8000fc4:	f013 0f01 	tst.w	r3, #1
 8000fc8:	d041      	beq.n	800104e <HAL_RCC_OscConfig+0x92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8000fca:	4ba6      	ldr	r3, [pc, #664]	; (8001264 <HAL_RCC_OscConfig+0x2a8>)
 8000fcc:	689b      	ldr	r3, [r3, #8]
 8000fce:	f003 030c 	and.w	r3, r3, #12
 8000fd2:	2b04      	cmp	r3, #4
 8000fd4:	d032      	beq.n	800103c <HAL_RCC_OscConfig+0x80>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8000fd6:	4ba3      	ldr	r3, [pc, #652]	; (8001264 <HAL_RCC_OscConfig+0x2a8>)
 8000fd8:	689b      	ldr	r3, [r3, #8]
 8000fda:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8000fde:	2b08      	cmp	r3, #8
 8000fe0:	d027      	beq.n	8001032 <HAL_RCC_OscConfig+0x76>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000fe2:	4ba0      	ldr	r3, [pc, #640]	; (8001264 <HAL_RCC_OscConfig+0x2a8>)
 8000fe4:	689b      	ldr	r3, [r3, #8]
 8000fe6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8000fea:	2b0c      	cmp	r3, #12
 8000fec:	d059      	beq.n	80010a2 <HAL_RCC_OscConfig+0xe6>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fee:	6863      	ldr	r3, [r4, #4]
 8000ff0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ff4:	d05b      	beq.n	80010ae <HAL_RCC_OscConfig+0xf2>
 8000ff6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000ffa:	d05e      	beq.n	80010ba <HAL_RCC_OscConfig+0xfe>
 8000ffc:	4b99      	ldr	r3, [pc, #612]	; (8001264 <HAL_RCC_OscConfig+0x2a8>)
 8000ffe:	681a      	ldr	r2, [r3, #0]
 8001000:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001004:	601a      	str	r2, [r3, #0]
 8001006:	681a      	ldr	r2, [r3, #0]
 8001008:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800100c:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800100e:	6863      	ldr	r3, [r4, #4]
 8001010:	2b00      	cmp	r3, #0
 8001012:	d05c      	beq.n	80010ce <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001014:	f7ff faf2 	bl	80005fc <HAL_GetTick>
 8001018:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800101a:	4b92      	ldr	r3, [pc, #584]	; (8001264 <HAL_RCC_OscConfig+0x2a8>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001022:	d114      	bne.n	800104e <HAL_RCC_OscConfig+0x92>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001024:	f7ff faea 	bl	80005fc <HAL_GetTick>
 8001028:	1b40      	subs	r0, r0, r5
 800102a:	2864      	cmp	r0, #100	; 0x64
 800102c:	d9f5      	bls.n	800101a <HAL_RCC_OscConfig+0x5e>
          {
            return HAL_TIMEOUT;
 800102e:	2003      	movs	r0, #3
 8001030:	e19d      	b.n	800136e <HAL_RCC_OscConfig+0x3b2>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001032:	4b8c      	ldr	r3, [pc, #560]	; (8001264 <HAL_RCC_OscConfig+0x2a8>)
 8001034:	685b      	ldr	r3, [r3, #4]
 8001036:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800103a:	d0d2      	beq.n	8000fe2 <HAL_RCC_OscConfig+0x26>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800103c:	4b89      	ldr	r3, [pc, #548]	; (8001264 <HAL_RCC_OscConfig+0x2a8>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001044:	d003      	beq.n	800104e <HAL_RCC_OscConfig+0x92>
 8001046:	6863      	ldr	r3, [r4, #4]
 8001048:	2b00      	cmp	r3, #0
 800104a:	f000 818d 	beq.w	8001368 <HAL_RCC_OscConfig+0x3ac>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800104e:	6823      	ldr	r3, [r4, #0]
 8001050:	f013 0f02 	tst.w	r3, #2
 8001054:	d067      	beq.n	8001126 <HAL_RCC_OscConfig+0x16a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001056:	4b83      	ldr	r3, [pc, #524]	; (8001264 <HAL_RCC_OscConfig+0x2a8>)
 8001058:	689b      	ldr	r3, [r3, #8]
 800105a:	f013 0f0c 	tst.w	r3, #12
 800105e:	d04a      	beq.n	80010f6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001060:	4b80      	ldr	r3, [pc, #512]	; (8001264 <HAL_RCC_OscConfig+0x2a8>)
 8001062:	689b      	ldr	r3, [r3, #8]
 8001064:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001068:	2b08      	cmp	r3, #8
 800106a:	d03f      	beq.n	80010ec <HAL_RCC_OscConfig+0x130>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800106c:	4b7d      	ldr	r3, [pc, #500]	; (8001264 <HAL_RCC_OscConfig+0x2a8>)
 800106e:	689b      	ldr	r3, [r3, #8]
 8001070:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001074:	2b0c      	cmp	r3, #12
 8001076:	d048      	beq.n	800110a <HAL_RCC_OscConfig+0x14e>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001078:	68e3      	ldr	r3, [r4, #12]
 800107a:	2b00      	cmp	r3, #0
 800107c:	d074      	beq.n	8001168 <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800107e:	4b7a      	ldr	r3, [pc, #488]	; (8001268 <HAL_RCC_OscConfig+0x2ac>)
 8001080:	2201      	movs	r2, #1
 8001082:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001084:	f7ff faba 	bl	80005fc <HAL_GetTick>
 8001088:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800108a:	4b76      	ldr	r3, [pc, #472]	; (8001264 <HAL_RCC_OscConfig+0x2a8>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f013 0f02 	tst.w	r3, #2
 8001092:	d160      	bne.n	8001156 <HAL_RCC_OscConfig+0x19a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001094:	f7ff fab2 	bl	80005fc <HAL_GetTick>
 8001098:	1b40      	subs	r0, r0, r5
 800109a:	2802      	cmp	r0, #2
 800109c:	d9f5      	bls.n	800108a <HAL_RCC_OscConfig+0xce>
          {
            return HAL_TIMEOUT;
 800109e:	2003      	movs	r0, #3
 80010a0:	e165      	b.n	800136e <HAL_RCC_OscConfig+0x3b2>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80010a2:	4b70      	ldr	r3, [pc, #448]	; (8001264 <HAL_RCC_OscConfig+0x2a8>)
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80010aa:	d0a0      	beq.n	8000fee <HAL_RCC_OscConfig+0x32>
 80010ac:	e7c6      	b.n	800103c <HAL_RCC_OscConfig+0x80>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010ae:	4a6d      	ldr	r2, [pc, #436]	; (8001264 <HAL_RCC_OscConfig+0x2a8>)
 80010b0:	6813      	ldr	r3, [r2, #0]
 80010b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010b6:	6013      	str	r3, [r2, #0]
 80010b8:	e7a9      	b.n	800100e <HAL_RCC_OscConfig+0x52>
 80010ba:	4b6a      	ldr	r3, [pc, #424]	; (8001264 <HAL_RCC_OscConfig+0x2a8>)
 80010bc:	681a      	ldr	r2, [r3, #0]
 80010be:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80010c2:	601a      	str	r2, [r3, #0]
 80010c4:	681a      	ldr	r2, [r3, #0]
 80010c6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80010ca:	601a      	str	r2, [r3, #0]
 80010cc:	e79f      	b.n	800100e <HAL_RCC_OscConfig+0x52>
        tickstart = HAL_GetTick();
 80010ce:	f7ff fa95 	bl	80005fc <HAL_GetTick>
 80010d2:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010d4:	4b63      	ldr	r3, [pc, #396]	; (8001264 <HAL_RCC_OscConfig+0x2a8>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80010dc:	d0b7      	beq.n	800104e <HAL_RCC_OscConfig+0x92>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010de:	f7ff fa8d 	bl	80005fc <HAL_GetTick>
 80010e2:	1b40      	subs	r0, r0, r5
 80010e4:	2864      	cmp	r0, #100	; 0x64
 80010e6:	d9f5      	bls.n	80010d4 <HAL_RCC_OscConfig+0x118>
            return HAL_TIMEOUT;
 80010e8:	2003      	movs	r0, #3
 80010ea:	e140      	b.n	800136e <HAL_RCC_OscConfig+0x3b2>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80010ec:	4b5d      	ldr	r3, [pc, #372]	; (8001264 <HAL_RCC_OscConfig+0x2a8>)
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80010f4:	d1ba      	bne.n	800106c <HAL_RCC_OscConfig+0xb0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010f6:	4b5b      	ldr	r3, [pc, #364]	; (8001264 <HAL_RCC_OscConfig+0x2a8>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f013 0f02 	tst.w	r3, #2
 80010fe:	d00a      	beq.n	8001116 <HAL_RCC_OscConfig+0x15a>
 8001100:	68e3      	ldr	r3, [r4, #12]
 8001102:	2b01      	cmp	r3, #1
 8001104:	d007      	beq.n	8001116 <HAL_RCC_OscConfig+0x15a>
        return HAL_ERROR;
 8001106:	2001      	movs	r0, #1
 8001108:	e131      	b.n	800136e <HAL_RCC_OscConfig+0x3b2>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800110a:	4b56      	ldr	r3, [pc, #344]	; (8001264 <HAL_RCC_OscConfig+0x2a8>)
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001112:	d1b1      	bne.n	8001078 <HAL_RCC_OscConfig+0xbc>
 8001114:	e7ef      	b.n	80010f6 <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001116:	4a53      	ldr	r2, [pc, #332]	; (8001264 <HAL_RCC_OscConfig+0x2a8>)
 8001118:	6813      	ldr	r3, [r2, #0]
 800111a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800111e:	6921      	ldr	r1, [r4, #16]
 8001120:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001124:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001126:	6823      	ldr	r3, [r4, #0]
 8001128:	f013 0f08 	tst.w	r3, #8
 800112c:	d040      	beq.n	80011b0 <HAL_RCC_OscConfig+0x1f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800112e:	6963      	ldr	r3, [r4, #20]
 8001130:	b363      	cbz	r3, 800118c <HAL_RCC_OscConfig+0x1d0>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001132:	4b4e      	ldr	r3, [pc, #312]	; (800126c <HAL_RCC_OscConfig+0x2b0>)
 8001134:	2201      	movs	r2, #1
 8001136:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001138:	f7ff fa60 	bl	80005fc <HAL_GetTick>
 800113c:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800113e:	4b49      	ldr	r3, [pc, #292]	; (8001264 <HAL_RCC_OscConfig+0x2a8>)
 8001140:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001142:	f013 0f02 	tst.w	r3, #2
 8001146:	d133      	bne.n	80011b0 <HAL_RCC_OscConfig+0x1f4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001148:	f7ff fa58 	bl	80005fc <HAL_GetTick>
 800114c:	1b40      	subs	r0, r0, r5
 800114e:	2802      	cmp	r0, #2
 8001150:	d9f5      	bls.n	800113e <HAL_RCC_OscConfig+0x182>
        {
          return HAL_TIMEOUT;
 8001152:	2003      	movs	r0, #3
 8001154:	e10b      	b.n	800136e <HAL_RCC_OscConfig+0x3b2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001156:	4a43      	ldr	r2, [pc, #268]	; (8001264 <HAL_RCC_OscConfig+0x2a8>)
 8001158:	6813      	ldr	r3, [r2, #0]
 800115a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800115e:	6921      	ldr	r1, [r4, #16]
 8001160:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001164:	6013      	str	r3, [r2, #0]
 8001166:	e7de      	b.n	8001126 <HAL_RCC_OscConfig+0x16a>
        __HAL_RCC_HSI_DISABLE();
 8001168:	4b3f      	ldr	r3, [pc, #252]	; (8001268 <HAL_RCC_OscConfig+0x2ac>)
 800116a:	2200      	movs	r2, #0
 800116c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800116e:	f7ff fa45 	bl	80005fc <HAL_GetTick>
 8001172:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001174:	4b3b      	ldr	r3, [pc, #236]	; (8001264 <HAL_RCC_OscConfig+0x2a8>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f013 0f02 	tst.w	r3, #2
 800117c:	d0d3      	beq.n	8001126 <HAL_RCC_OscConfig+0x16a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800117e:	f7ff fa3d 	bl	80005fc <HAL_GetTick>
 8001182:	1b40      	subs	r0, r0, r5
 8001184:	2802      	cmp	r0, #2
 8001186:	d9f5      	bls.n	8001174 <HAL_RCC_OscConfig+0x1b8>
            return HAL_TIMEOUT;
 8001188:	2003      	movs	r0, #3
 800118a:	e0f0      	b.n	800136e <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800118c:	4b37      	ldr	r3, [pc, #220]	; (800126c <HAL_RCC_OscConfig+0x2b0>)
 800118e:	2200      	movs	r2, #0
 8001190:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001192:	f7ff fa33 	bl	80005fc <HAL_GetTick>
 8001196:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001198:	4b32      	ldr	r3, [pc, #200]	; (8001264 <HAL_RCC_OscConfig+0x2a8>)
 800119a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800119c:	f013 0f02 	tst.w	r3, #2
 80011a0:	d006      	beq.n	80011b0 <HAL_RCC_OscConfig+0x1f4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80011a2:	f7ff fa2b 	bl	80005fc <HAL_GetTick>
 80011a6:	1b40      	subs	r0, r0, r5
 80011a8:	2802      	cmp	r0, #2
 80011aa:	d9f5      	bls.n	8001198 <HAL_RCC_OscConfig+0x1dc>
        {
          return HAL_TIMEOUT;
 80011ac:	2003      	movs	r0, #3
 80011ae:	e0de      	b.n	800136e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80011b0:	6823      	ldr	r3, [r4, #0]
 80011b2:	f013 0f04 	tst.w	r3, #4
 80011b6:	d079      	beq.n	80012ac <HAL_RCC_OscConfig+0x2f0>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80011b8:	4b2a      	ldr	r3, [pc, #168]	; (8001264 <HAL_RCC_OscConfig+0x2a8>)
 80011ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011bc:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80011c0:	d133      	bne.n	800122a <HAL_RCC_OscConfig+0x26e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80011c2:	2300      	movs	r3, #0
 80011c4:	9301      	str	r3, [sp, #4]
 80011c6:	4b27      	ldr	r3, [pc, #156]	; (8001264 <HAL_RCC_OscConfig+0x2a8>)
 80011c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80011ca:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80011ce:	641a      	str	r2, [r3, #64]	; 0x40
 80011d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011d6:	9301      	str	r3, [sp, #4]
 80011d8:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80011da:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011dc:	4b24      	ldr	r3, [pc, #144]	; (8001270 <HAL_RCC_OscConfig+0x2b4>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f413 7f80 	tst.w	r3, #256	; 0x100
 80011e4:	d023      	beq.n	800122e <HAL_RCC_OscConfig+0x272>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011e6:	68a3      	ldr	r3, [r4, #8]
 80011e8:	2b01      	cmp	r3, #1
 80011ea:	d034      	beq.n	8001256 <HAL_RCC_OscConfig+0x29a>
 80011ec:	2b05      	cmp	r3, #5
 80011ee:	d041      	beq.n	8001274 <HAL_RCC_OscConfig+0x2b8>
 80011f0:	4b1c      	ldr	r3, [pc, #112]	; (8001264 <HAL_RCC_OscConfig+0x2a8>)
 80011f2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80011f4:	f022 0201 	bic.w	r2, r2, #1
 80011f8:	671a      	str	r2, [r3, #112]	; 0x70
 80011fa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80011fc:	f022 0204 	bic.w	r2, r2, #4
 8001200:	671a      	str	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001202:	68a3      	ldr	r3, [r4, #8]
 8001204:	2b00      	cmp	r3, #0
 8001206:	d03f      	beq.n	8001288 <HAL_RCC_OscConfig+0x2cc>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001208:	f7ff f9f8 	bl	80005fc <HAL_GetTick>
 800120c:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800120e:	4b15      	ldr	r3, [pc, #84]	; (8001264 <HAL_RCC_OscConfig+0x2a8>)
 8001210:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001212:	f013 0f02 	tst.w	r3, #2
 8001216:	d148      	bne.n	80012aa <HAL_RCC_OscConfig+0x2ee>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001218:	f7ff f9f0 	bl	80005fc <HAL_GetTick>
 800121c:	1b80      	subs	r0, r0, r6
 800121e:	f241 3388 	movw	r3, #5000	; 0x1388
 8001222:	4298      	cmp	r0, r3
 8001224:	d9f3      	bls.n	800120e <HAL_RCC_OscConfig+0x252>
        {
          return HAL_TIMEOUT;
 8001226:	2003      	movs	r0, #3
 8001228:	e0a1      	b.n	800136e <HAL_RCC_OscConfig+0x3b2>
    FlagStatus       pwrclkchanged = RESET;
 800122a:	2500      	movs	r5, #0
 800122c:	e7d6      	b.n	80011dc <HAL_RCC_OscConfig+0x220>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800122e:	4a10      	ldr	r2, [pc, #64]	; (8001270 <HAL_RCC_OscConfig+0x2b4>)
 8001230:	6813      	ldr	r3, [r2, #0]
 8001232:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001236:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8001238:	f7ff f9e0 	bl	80005fc <HAL_GetTick>
 800123c:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800123e:	4b0c      	ldr	r3, [pc, #48]	; (8001270 <HAL_RCC_OscConfig+0x2b4>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001246:	d1ce      	bne.n	80011e6 <HAL_RCC_OscConfig+0x22a>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001248:	f7ff f9d8 	bl	80005fc <HAL_GetTick>
 800124c:	1b80      	subs	r0, r0, r6
 800124e:	2802      	cmp	r0, #2
 8001250:	d9f5      	bls.n	800123e <HAL_RCC_OscConfig+0x282>
          return HAL_TIMEOUT;
 8001252:	2003      	movs	r0, #3
 8001254:	e08b      	b.n	800136e <HAL_RCC_OscConfig+0x3b2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001256:	4a03      	ldr	r2, [pc, #12]	; (8001264 <HAL_RCC_OscConfig+0x2a8>)
 8001258:	6f13      	ldr	r3, [r2, #112]	; 0x70
 800125a:	f043 0301 	orr.w	r3, r3, #1
 800125e:	6713      	str	r3, [r2, #112]	; 0x70
 8001260:	e7cf      	b.n	8001202 <HAL_RCC_OscConfig+0x246>
 8001262:	bf00      	nop
 8001264:	40023800 	.word	0x40023800
 8001268:	42470000 	.word	0x42470000
 800126c:	42470e80 	.word	0x42470e80
 8001270:	40007000 	.word	0x40007000
 8001274:	4b40      	ldr	r3, [pc, #256]	; (8001378 <HAL_RCC_OscConfig+0x3bc>)
 8001276:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001278:	f042 0204 	orr.w	r2, r2, #4
 800127c:	671a      	str	r2, [r3, #112]	; 0x70
 800127e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001280:	f042 0201 	orr.w	r2, r2, #1
 8001284:	671a      	str	r2, [r3, #112]	; 0x70
 8001286:	e7bc      	b.n	8001202 <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001288:	f7ff f9b8 	bl	80005fc <HAL_GetTick>
 800128c:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800128e:	4b3a      	ldr	r3, [pc, #232]	; (8001378 <HAL_RCC_OscConfig+0x3bc>)
 8001290:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001292:	f013 0f02 	tst.w	r3, #2
 8001296:	d008      	beq.n	80012aa <HAL_RCC_OscConfig+0x2ee>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001298:	f7ff f9b0 	bl	80005fc <HAL_GetTick>
 800129c:	1b80      	subs	r0, r0, r6
 800129e:	f241 3388 	movw	r3, #5000	; 0x1388
 80012a2:	4298      	cmp	r0, r3
 80012a4:	d9f3      	bls.n	800128e <HAL_RCC_OscConfig+0x2d2>
        {
          return HAL_TIMEOUT;
 80012a6:	2003      	movs	r0, #3
 80012a8:	e061      	b.n	800136e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80012aa:	b9e5      	cbnz	r5, 80012e6 <HAL_RCC_OscConfig+0x32a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80012ac:	69a3      	ldr	r3, [r4, #24]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d05c      	beq.n	800136c <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80012b2:	4a31      	ldr	r2, [pc, #196]	; (8001378 <HAL_RCC_OscConfig+0x3bc>)
 80012b4:	6892      	ldr	r2, [r2, #8]
 80012b6:	f002 020c 	and.w	r2, r2, #12
 80012ba:	2a08      	cmp	r2, #8
 80012bc:	d059      	beq.n	8001372 <HAL_RCC_OscConfig+0x3b6>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80012be:	2b02      	cmp	r3, #2
 80012c0:	d017      	beq.n	80012f2 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012c2:	4b2e      	ldr	r3, [pc, #184]	; (800137c <HAL_RCC_OscConfig+0x3c0>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012c8:	f7ff f998 	bl	80005fc <HAL_GetTick>
 80012cc:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80012ce:	4b2a      	ldr	r3, [pc, #168]	; (8001378 <HAL_RCC_OscConfig+0x3bc>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80012d6:	d045      	beq.n	8001364 <HAL_RCC_OscConfig+0x3a8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012d8:	f7ff f990 	bl	80005fc <HAL_GetTick>
 80012dc:	1b00      	subs	r0, r0, r4
 80012de:	2802      	cmp	r0, #2
 80012e0:	d9f5      	bls.n	80012ce <HAL_RCC_OscConfig+0x312>
          {
            return HAL_TIMEOUT;
 80012e2:	2003      	movs	r0, #3
 80012e4:	e043      	b.n	800136e <HAL_RCC_OscConfig+0x3b2>
      __HAL_RCC_PWR_CLK_DISABLE();
 80012e6:	4a24      	ldr	r2, [pc, #144]	; (8001378 <HAL_RCC_OscConfig+0x3bc>)
 80012e8:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80012ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80012ee:	6413      	str	r3, [r2, #64]	; 0x40
 80012f0:	e7dc      	b.n	80012ac <HAL_RCC_OscConfig+0x2f0>
        __HAL_RCC_PLL_DISABLE();
 80012f2:	4b22      	ldr	r3, [pc, #136]	; (800137c <HAL_RCC_OscConfig+0x3c0>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80012f8:	f7ff f980 	bl	80005fc <HAL_GetTick>
 80012fc:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80012fe:	4b1e      	ldr	r3, [pc, #120]	; (8001378 <HAL_RCC_OscConfig+0x3bc>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001306:	d006      	beq.n	8001316 <HAL_RCC_OscConfig+0x35a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001308:	f7ff f978 	bl	80005fc <HAL_GetTick>
 800130c:	1b40      	subs	r0, r0, r5
 800130e:	2802      	cmp	r0, #2
 8001310:	d9f5      	bls.n	80012fe <HAL_RCC_OscConfig+0x342>
            return HAL_TIMEOUT;
 8001312:	2003      	movs	r0, #3
 8001314:	e02b      	b.n	800136e <HAL_RCC_OscConfig+0x3b2>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001316:	69e3      	ldr	r3, [r4, #28]
 8001318:	6a22      	ldr	r2, [r4, #32]
 800131a:	4313      	orrs	r3, r2
 800131c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800131e:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001322:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001324:	0852      	lsrs	r2, r2, #1
 8001326:	3a01      	subs	r2, #1
 8001328:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800132c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800132e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001332:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001334:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8001338:	4a0f      	ldr	r2, [pc, #60]	; (8001378 <HAL_RCC_OscConfig+0x3bc>)
 800133a:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 800133c:	4b0f      	ldr	r3, [pc, #60]	; (800137c <HAL_RCC_OscConfig+0x3c0>)
 800133e:	2201      	movs	r2, #1
 8001340:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001342:	f7ff f95b 	bl	80005fc <HAL_GetTick>
 8001346:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001348:	4b0b      	ldr	r3, [pc, #44]	; (8001378 <HAL_RCC_OscConfig+0x3bc>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001350:	d106      	bne.n	8001360 <HAL_RCC_OscConfig+0x3a4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001352:	f7ff f953 	bl	80005fc <HAL_GetTick>
 8001356:	1b00      	subs	r0, r0, r4
 8001358:	2802      	cmp	r0, #2
 800135a:	d9f5      	bls.n	8001348 <HAL_RCC_OscConfig+0x38c>
            return HAL_TIMEOUT;
 800135c:	2003      	movs	r0, #3
 800135e:	e006      	b.n	800136e <HAL_RCC_OscConfig+0x3b2>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8001360:	2000      	movs	r0, #0
 8001362:	e004      	b.n	800136e <HAL_RCC_OscConfig+0x3b2>
 8001364:	2000      	movs	r0, #0
 8001366:	e002      	b.n	800136e <HAL_RCC_OscConfig+0x3b2>
        return HAL_ERROR;
 8001368:	2001      	movs	r0, #1
 800136a:	e000      	b.n	800136e <HAL_RCC_OscConfig+0x3b2>
  return HAL_OK;
 800136c:	2000      	movs	r0, #0
}
 800136e:	b002      	add	sp, #8
 8001370:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8001372:	2001      	movs	r0, #1
 8001374:	e7fb      	b.n	800136e <HAL_RCC_OscConfig+0x3b2>
 8001376:	bf00      	nop
 8001378:	40023800 	.word	0x40023800
 800137c:	42470060 	.word	0x42470060

08001380 <HAL_TIM_Base_MspInit>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001380:	4770      	bx	lr

08001382 <HAL_TIM_Base_Start_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001382:	6802      	ldr	r2, [r0, #0]
 8001384:	68d3      	ldr	r3, [r2, #12]
 8001386:	f043 0301 	orr.w	r3, r3, #1
 800138a:	60d3      	str	r3, [r2, #12]
      
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800138c:	6802      	ldr	r2, [r0, #0]
 800138e:	6813      	ldr	r3, [r2, #0]
 8001390:	f043 0301 	orr.w	r3, r3, #1
 8001394:	6013      	str	r3, [r2, #0]
      
  /* Return function status */
  return HAL_OK;
}
 8001396:	2000      	movs	r0, #0
 8001398:	4770      	bx	lr

0800139a <HAL_TIM_OC_DelayElapsedCallback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800139a:	4770      	bx	lr

0800139c <HAL_TIM_IC_CaptureCallback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800139c:	4770      	bx	lr

0800139e <HAL_TIM_PWM_PulseFinishedCallback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800139e:	4770      	bx	lr

080013a0 <HAL_TIM_TriggerCallback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80013a0:	4770      	bx	lr

080013a2 <HAL_TIM_IRQHandler>:
{
 80013a2:	b510      	push	{r4, lr}
 80013a4:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80013a6:	6803      	ldr	r3, [r0, #0]
 80013a8:	691a      	ldr	r2, [r3, #16]
 80013aa:	f012 0f02 	tst.w	r2, #2
 80013ae:	d011      	beq.n	80013d4 <HAL_TIM_IRQHandler+0x32>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 80013b0:	68da      	ldr	r2, [r3, #12]
 80013b2:	f012 0f02 	tst.w	r2, #2
 80013b6:	d00d      	beq.n	80013d4 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80013b8:	f06f 0202 	mvn.w	r2, #2
 80013bc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80013be:	2301      	movs	r3, #1
 80013c0:	7603      	strb	r3, [r0, #24]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80013c2:	6803      	ldr	r3, [r0, #0]
 80013c4:	699b      	ldr	r3, [r3, #24]
 80013c6:	f013 0f03 	tst.w	r3, #3
 80013ca:	d070      	beq.n	80014ae <HAL_TIM_IRQHandler+0x10c>
          HAL_TIM_IC_CaptureCallback(htim);
 80013cc:	f7ff ffe6 	bl	800139c <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80013d0:	2300      	movs	r3, #0
 80013d2:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80013d4:	6823      	ldr	r3, [r4, #0]
 80013d6:	691a      	ldr	r2, [r3, #16]
 80013d8:	f012 0f04 	tst.w	r2, #4
 80013dc:	d012      	beq.n	8001404 <HAL_TIM_IRQHandler+0x62>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 80013de:	68da      	ldr	r2, [r3, #12]
 80013e0:	f012 0f04 	tst.w	r2, #4
 80013e4:	d00e      	beq.n	8001404 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80013e6:	f06f 0204 	mvn.w	r2, #4
 80013ea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80013ec:	2302      	movs	r3, #2
 80013ee:	7623      	strb	r3, [r4, #24]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80013f0:	6823      	ldr	r3, [r4, #0]
 80013f2:	699b      	ldr	r3, [r3, #24]
 80013f4:	f413 7f40 	tst.w	r3, #768	; 0x300
 80013f8:	d05f      	beq.n	80014ba <HAL_TIM_IRQHandler+0x118>
        HAL_TIM_IC_CaptureCallback(htim);
 80013fa:	4620      	mov	r0, r4
 80013fc:	f7ff ffce 	bl	800139c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001400:	2300      	movs	r3, #0
 8001402:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001404:	6823      	ldr	r3, [r4, #0]
 8001406:	691a      	ldr	r2, [r3, #16]
 8001408:	f012 0f08 	tst.w	r2, #8
 800140c:	d012      	beq.n	8001434 <HAL_TIM_IRQHandler+0x92>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 800140e:	68da      	ldr	r2, [r3, #12]
 8001410:	f012 0f08 	tst.w	r2, #8
 8001414:	d00e      	beq.n	8001434 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001416:	f06f 0208 	mvn.w	r2, #8
 800141a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800141c:	2304      	movs	r3, #4
 800141e:	7623      	strb	r3, [r4, #24]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001420:	6823      	ldr	r3, [r4, #0]
 8001422:	69db      	ldr	r3, [r3, #28]
 8001424:	f013 0f03 	tst.w	r3, #3
 8001428:	d04e      	beq.n	80014c8 <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 800142a:	4620      	mov	r0, r4
 800142c:	f7ff ffb6 	bl	800139c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001430:	2300      	movs	r3, #0
 8001432:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001434:	6823      	ldr	r3, [r4, #0]
 8001436:	691a      	ldr	r2, [r3, #16]
 8001438:	f012 0f10 	tst.w	r2, #16
 800143c:	d012      	beq.n	8001464 <HAL_TIM_IRQHandler+0xc2>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 800143e:	68da      	ldr	r2, [r3, #12]
 8001440:	f012 0f10 	tst.w	r2, #16
 8001444:	d00e      	beq.n	8001464 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001446:	f06f 0210 	mvn.w	r2, #16
 800144a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800144c:	2308      	movs	r3, #8
 800144e:	7623      	strb	r3, [r4, #24]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001450:	6823      	ldr	r3, [r4, #0]
 8001452:	69db      	ldr	r3, [r3, #28]
 8001454:	f413 7f40 	tst.w	r3, #768	; 0x300
 8001458:	d03d      	beq.n	80014d6 <HAL_TIM_IRQHandler+0x134>
        HAL_TIM_IC_CaptureCallback(htim);
 800145a:	4620      	mov	r0, r4
 800145c:	f7ff ff9e 	bl	800139c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001460:	2300      	movs	r3, #0
 8001462:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001464:	6823      	ldr	r3, [r4, #0]
 8001466:	691a      	ldr	r2, [r3, #16]
 8001468:	f012 0f01 	tst.w	r2, #1
 800146c:	d003      	beq.n	8001476 <HAL_TIM_IRQHandler+0xd4>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 800146e:	68da      	ldr	r2, [r3, #12]
 8001470:	f012 0f01 	tst.w	r2, #1
 8001474:	d136      	bne.n	80014e4 <HAL_TIM_IRQHandler+0x142>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001476:	6823      	ldr	r3, [r4, #0]
 8001478:	691a      	ldr	r2, [r3, #16]
 800147a:	f012 0f80 	tst.w	r2, #128	; 0x80
 800147e:	d003      	beq.n	8001488 <HAL_TIM_IRQHandler+0xe6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8001480:	68da      	ldr	r2, [r3, #12]
 8001482:	f012 0f80 	tst.w	r2, #128	; 0x80
 8001486:	d134      	bne.n	80014f2 <HAL_TIM_IRQHandler+0x150>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001488:	6823      	ldr	r3, [r4, #0]
 800148a:	691a      	ldr	r2, [r3, #16]
 800148c:	f012 0f40 	tst.w	r2, #64	; 0x40
 8001490:	d003      	beq.n	800149a <HAL_TIM_IRQHandler+0xf8>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8001492:	68da      	ldr	r2, [r3, #12]
 8001494:	f012 0f40 	tst.w	r2, #64	; 0x40
 8001498:	d132      	bne.n	8001500 <HAL_TIM_IRQHandler+0x15e>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800149a:	6823      	ldr	r3, [r4, #0]
 800149c:	691a      	ldr	r2, [r3, #16]
 800149e:	f012 0f20 	tst.w	r2, #32
 80014a2:	d003      	beq.n	80014ac <HAL_TIM_IRQHandler+0x10a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 80014a4:	68da      	ldr	r2, [r3, #12]
 80014a6:	f012 0f20 	tst.w	r2, #32
 80014aa:	d130      	bne.n	800150e <HAL_TIM_IRQHandler+0x16c>
}
 80014ac:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80014ae:	f7ff ff74 	bl	800139a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80014b2:	4620      	mov	r0, r4
 80014b4:	f7ff ff73 	bl	800139e <HAL_TIM_PWM_PulseFinishedCallback>
 80014b8:	e78a      	b.n	80013d0 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80014ba:	4620      	mov	r0, r4
 80014bc:	f7ff ff6d 	bl	800139a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80014c0:	4620      	mov	r0, r4
 80014c2:	f7ff ff6c 	bl	800139e <HAL_TIM_PWM_PulseFinishedCallback>
 80014c6:	e79b      	b.n	8001400 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80014c8:	4620      	mov	r0, r4
 80014ca:	f7ff ff66 	bl	800139a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 80014ce:	4620      	mov	r0, r4
 80014d0:	f7ff ff65 	bl	800139e <HAL_TIM_PWM_PulseFinishedCallback>
 80014d4:	e7ac      	b.n	8001430 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80014d6:	4620      	mov	r0, r4
 80014d8:	f7ff ff5f 	bl	800139a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80014dc:	4620      	mov	r0, r4
 80014de:	f7ff ff5e 	bl	800139e <HAL_TIM_PWM_PulseFinishedCallback>
 80014e2:	e7bd      	b.n	8001460 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80014e4:	f06f 0201 	mvn.w	r2, #1
 80014e8:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80014ea:	4620      	mov	r0, r4
 80014ec:	f001 ff96 	bl	800341c <HAL_TIM_PeriodElapsedCallback>
 80014f0:	e7c1      	b.n	8001476 <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80014f2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80014f6:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80014f8:	4620      	mov	r0, r4
 80014fa:	f000 f889 	bl	8001610 <HAL_TIMEx_BreakCallback>
 80014fe:	e7c3      	b.n	8001488 <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001500:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001504:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8001506:	4620      	mov	r0, r4
 8001508:	f7ff ff4a 	bl	80013a0 <HAL_TIM_TriggerCallback>
 800150c:	e7c5      	b.n	800149a <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800150e:	f06f 0220 	mvn.w	r2, #32
 8001512:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8001514:	4620      	mov	r0, r4
 8001516:	f000 f87a 	bl	800160e <HAL_TIMEx_CommutationCallback>
}
 800151a:	e7c7      	b.n	80014ac <HAL_TIM_IRQHandler+0x10a>

0800151c <TIM_Base_SetConfig>:
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1 = 0U;
  tmpcr1 = TIMx->CR1;
 800151c:	6803      	ldr	r3, [r0, #0]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 800151e:	4a2e      	ldr	r2, [pc, #184]	; (80015d8 <TIM_Base_SetConfig+0xbc>)
 8001520:	4290      	cmp	r0, r2
 8001522:	d012      	beq.n	800154a <TIM_Base_SetConfig+0x2e>
 8001524:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001528:	d00f      	beq.n	800154a <TIM_Base_SetConfig+0x2e>
 800152a:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800152e:	4290      	cmp	r0, r2
 8001530:	d00b      	beq.n	800154a <TIM_Base_SetConfig+0x2e>
 8001532:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001536:	4290      	cmp	r0, r2
 8001538:	d007      	beq.n	800154a <TIM_Base_SetConfig+0x2e>
 800153a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800153e:	4290      	cmp	r0, r2
 8001540:	d003      	beq.n	800154a <TIM_Base_SetConfig+0x2e>
 8001542:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8001546:	4290      	cmp	r0, r2
 8001548:	d103      	bne.n	8001552 <TIM_Base_SetConfig+0x36>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800154a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800154e:	684a      	ldr	r2, [r1, #4]
 8001550:	4313      	orrs	r3, r2
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8001552:	4a21      	ldr	r2, [pc, #132]	; (80015d8 <TIM_Base_SetConfig+0xbc>)
 8001554:	4290      	cmp	r0, r2
 8001556:	d02a      	beq.n	80015ae <TIM_Base_SetConfig+0x92>
 8001558:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800155c:	d027      	beq.n	80015ae <TIM_Base_SetConfig+0x92>
 800155e:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8001562:	4290      	cmp	r0, r2
 8001564:	d023      	beq.n	80015ae <TIM_Base_SetConfig+0x92>
 8001566:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800156a:	4290      	cmp	r0, r2
 800156c:	d01f      	beq.n	80015ae <TIM_Base_SetConfig+0x92>
 800156e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001572:	4290      	cmp	r0, r2
 8001574:	d01b      	beq.n	80015ae <TIM_Base_SetConfig+0x92>
 8001576:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800157a:	4290      	cmp	r0, r2
 800157c:	d017      	beq.n	80015ae <TIM_Base_SetConfig+0x92>
 800157e:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8001582:	4290      	cmp	r0, r2
 8001584:	d013      	beq.n	80015ae <TIM_Base_SetConfig+0x92>
 8001586:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800158a:	4290      	cmp	r0, r2
 800158c:	d00f      	beq.n	80015ae <TIM_Base_SetConfig+0x92>
 800158e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001592:	4290      	cmp	r0, r2
 8001594:	d00b      	beq.n	80015ae <TIM_Base_SetConfig+0x92>
 8001596:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 800159a:	4290      	cmp	r0, r2
 800159c:	d007      	beq.n	80015ae <TIM_Base_SetConfig+0x92>
 800159e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80015a2:	4290      	cmp	r0, r2
 80015a4:	d003      	beq.n	80015ae <TIM_Base_SetConfig+0x92>
 80015a6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80015aa:	4290      	cmp	r0, r2
 80015ac:	d103      	bne.n	80015b6 <TIM_Base_SetConfig+0x9a>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80015ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80015b2:	68ca      	ldr	r2, [r1, #12]
 80015b4:	4313      	orrs	r3, r2
  }

  TIMx->CR1 = tmpcr1;
 80015b6:	6003      	str	r3, [r0, #0]

  /* Set the Auto-reload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80015b8:	688b      	ldr	r3, [r1, #8]
 80015ba:	62c3      	str	r3, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80015bc:	680b      	ldr	r3, [r1, #0]
 80015be:	6283      	str	r3, [r0, #40]	; 0x28
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 80015c0:	4b05      	ldr	r3, [pc, #20]	; (80015d8 <TIM_Base_SetConfig+0xbc>)
 80015c2:	4298      	cmp	r0, r3
 80015c4:	d003      	beq.n	80015ce <TIM_Base_SetConfig+0xb2>
 80015c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80015ca:	4298      	cmp	r0, r3
 80015cc:	d101      	bne.n	80015d2 <TIM_Base_SetConfig+0xb6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80015ce:	690b      	ldr	r3, [r1, #16]
 80015d0:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80015d2:	2301      	movs	r3, #1
 80015d4:	6143      	str	r3, [r0, #20]
}
 80015d6:	4770      	bx	lr
 80015d8:	40010000 	.word	0x40010000

080015dc <HAL_TIM_Base_Init>:
  if(htim == NULL)
 80015dc:	b1a8      	cbz	r0, 800160a <HAL_TIM_Base_Init+0x2e>
{ 
 80015de:	b510      	push	{r4, lr}
 80015e0:	4604      	mov	r4, r0
  if(htim->State == HAL_TIM_STATE_RESET)
 80015e2:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80015e6:	b15b      	cbz	r3, 8001600 <HAL_TIM_Base_Init+0x24>
  htim->State= HAL_TIM_STATE_BUSY;
 80015e8:	2302      	movs	r3, #2
 80015ea:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 80015ee:	1d21      	adds	r1, r4, #4
 80015f0:	6820      	ldr	r0, [r4, #0]
 80015f2:	f7ff ff93 	bl	800151c <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 80015f6:	2301      	movs	r3, #1
 80015f8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 80015fc:	2000      	movs	r0, #0
}
 80015fe:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8001600:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    HAL_TIM_Base_MspInit(htim);
 8001604:	f7ff febc 	bl	8001380 <HAL_TIM_Base_MspInit>
 8001608:	e7ee      	b.n	80015e8 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 800160a:	2001      	movs	r0, #1
}
 800160c:	4770      	bx	lr

0800160e <HAL_TIMEx_CommutationCallback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 800160e:	4770      	bx	lr

08001610 <HAL_TIMEx_BreakCallback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001610:	4770      	bx	lr
	...

08001614 <UART_SetConfig>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001614:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001618:	4604      	mov	r4, r0
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 800161a:	6801      	ldr	r1, [r0, #0]
 800161c:	690a      	ldr	r2, [r1, #16]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 800161e:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8001622:	68c3      	ldr	r3, [r0, #12]
 8001624:	4313      	orrs	r3, r2
  
  /* Write to USART CR2 */
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 8001626:	610b      	str	r3, [r1, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 8001628:	6801      	ldr	r1, [r0, #0]
 800162a:	68ca      	ldr	r2, [r1, #12]

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 800162c:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
 8001630:	f022 020c 	bic.w	r2, r2, #12
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001634:	6883      	ldr	r3, [r0, #8]
 8001636:	6900      	ldr	r0, [r0, #16]
 8001638:	4303      	orrs	r3, r0
 800163a:	6960      	ldr	r0, [r4, #20]
 800163c:	4303      	orrs	r3, r0
 800163e:	69e0      	ldr	r0, [r4, #28]
 8001640:	4303      	orrs	r3, r0
 8001642:	4313      	orrs	r3, r2
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8001644:	60cb      	str	r3, [r1, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 8001646:	6821      	ldr	r1, [r4, #0]
 8001648:	694a      	ldr	r2, [r1, #20]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 800164a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 800164e:	69a3      	ldr	r3, [r4, #24]
 8001650:	4313      	orrs	r3, r2
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 8001652:	614b      	str	r3, [r1, #20]
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001654:	69e3      	ldr	r3, [r4, #28]
 8001656:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800165a:	d060      	beq.n	800171e <UART_SetConfig+0x10a>
  }
  else
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 800165c:	6823      	ldr	r3, [r4, #0]
 800165e:	4ab8      	ldr	r2, [pc, #736]	; (8001940 <UART_SetConfig+0x32c>)
 8001660:	4293      	cmp	r3, r2
 8001662:	f000 8114 	beq.w	800188e <UART_SetConfig+0x27a>
 8001666:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800166a:	4293      	cmp	r3, r2
 800166c:	f000 810f 	beq.w	800188e <UART_SetConfig+0x27a>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001670:	f7ff fba4 	bl	8000dbc <HAL_RCC_GetPCLK1Freq>
 8001674:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001678:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800167c:	6865      	ldr	r5, [r4, #4]
 800167e:	00ad      	lsls	r5, r5, #2
 8001680:	fbb0 f5f5 	udiv	r5, r0, r5
 8001684:	4faf      	ldr	r7, [pc, #700]	; (8001944 <UART_SetConfig+0x330>)
 8001686:	fba7 3505 	umull	r3, r5, r7, r5
 800168a:	096d      	lsrs	r5, r5, #5
 800168c:	012e      	lsls	r6, r5, #4
 800168e:	f7ff fb95 	bl	8000dbc <HAL_RCC_GetPCLK1Freq>
 8001692:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001696:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800169a:	6865      	ldr	r5, [r4, #4]
 800169c:	00ad      	lsls	r5, r5, #2
 800169e:	fbb0 f9f5 	udiv	r9, r0, r5
 80016a2:	f7ff fb8b 	bl	8000dbc <HAL_RCC_GetPCLK1Freq>
 80016a6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80016aa:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80016ae:	6865      	ldr	r5, [r4, #4]
 80016b0:	00ad      	lsls	r5, r5, #2
 80016b2:	fbb0 f5f5 	udiv	r5, r0, r5
 80016b6:	fba7 3505 	umull	r3, r5, r7, r5
 80016ba:	096d      	lsrs	r5, r5, #5
 80016bc:	f04f 0864 	mov.w	r8, #100	; 0x64
 80016c0:	fb08 9515 	mls	r5, r8, r5, r9
 80016c4:	012d      	lsls	r5, r5, #4
 80016c6:	3532      	adds	r5, #50	; 0x32
 80016c8:	fba7 3505 	umull	r3, r5, r7, r5
 80016cc:	096d      	lsrs	r5, r5, #5
 80016ce:	f005 05f0 	and.w	r5, r5, #240	; 0xf0
 80016d2:	4435      	add	r5, r6
 80016d4:	f7ff fb72 	bl	8000dbc <HAL_RCC_GetPCLK1Freq>
 80016d8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80016dc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80016e0:	6866      	ldr	r6, [r4, #4]
 80016e2:	00b6      	lsls	r6, r6, #2
 80016e4:	fbb0 f6f6 	udiv	r6, r0, r6
 80016e8:	f7ff fb68 	bl	8000dbc <HAL_RCC_GetPCLK1Freq>
 80016ec:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80016f0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80016f4:	6863      	ldr	r3, [r4, #4]
 80016f6:	009b      	lsls	r3, r3, #2
 80016f8:	fbb0 f0f3 	udiv	r0, r0, r3
 80016fc:	fba7 3000 	umull	r3, r0, r7, r0
 8001700:	0940      	lsrs	r0, r0, #5
 8001702:	fb08 6810 	mls	r8, r8, r0, r6
 8001706:	ea4f 1808 	mov.w	r8, r8, lsl #4
 800170a:	f108 0832 	add.w	r8, r8, #50	; 0x32
 800170e:	fba7 3708 	umull	r3, r7, r7, r8
 8001712:	f3c7 1743 	ubfx	r7, r7, #5, #4
 8001716:	6823      	ldr	r3, [r4, #0]
 8001718:	442f      	add	r7, r5
 800171a:	609f      	str	r7, [r3, #8]
    }
  }
}
 800171c:	e10d      	b.n	800193a <UART_SetConfig+0x326>
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 800171e:	6823      	ldr	r3, [r4, #0]
 8001720:	4a87      	ldr	r2, [pc, #540]	; (8001940 <UART_SetConfig+0x32c>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d05b      	beq.n	80017de <UART_SetConfig+0x1ca>
 8001726:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800172a:	4293      	cmp	r3, r2
 800172c:	d057      	beq.n	80017de <UART_SetConfig+0x1ca>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800172e:	f7ff fb45 	bl	8000dbc <HAL_RCC_GetPCLK1Freq>
 8001732:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001736:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800173a:	6865      	ldr	r5, [r4, #4]
 800173c:	006d      	lsls	r5, r5, #1
 800173e:	fbb0 f5f5 	udiv	r5, r0, r5
 8001742:	4f80      	ldr	r7, [pc, #512]	; (8001944 <UART_SetConfig+0x330>)
 8001744:	fba7 3505 	umull	r3, r5, r7, r5
 8001748:	096d      	lsrs	r5, r5, #5
 800174a:	012e      	lsls	r6, r5, #4
 800174c:	f7ff fb36 	bl	8000dbc <HAL_RCC_GetPCLK1Freq>
 8001750:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001754:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001758:	6865      	ldr	r5, [r4, #4]
 800175a:	006d      	lsls	r5, r5, #1
 800175c:	fbb0 f9f5 	udiv	r9, r0, r5
 8001760:	f7ff fb2c 	bl	8000dbc <HAL_RCC_GetPCLK1Freq>
 8001764:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001768:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800176c:	6865      	ldr	r5, [r4, #4]
 800176e:	006d      	lsls	r5, r5, #1
 8001770:	fbb0 f5f5 	udiv	r5, r0, r5
 8001774:	fba7 3505 	umull	r3, r5, r7, r5
 8001778:	096d      	lsrs	r5, r5, #5
 800177a:	f04f 0864 	mov.w	r8, #100	; 0x64
 800177e:	fb08 9515 	mls	r5, r8, r5, r9
 8001782:	00ed      	lsls	r5, r5, #3
 8001784:	3532      	adds	r5, #50	; 0x32
 8001786:	fba7 3505 	umull	r3, r5, r7, r5
 800178a:	096d      	lsrs	r5, r5, #5
 800178c:	006d      	lsls	r5, r5, #1
 800178e:	f405 75f8 	and.w	r5, r5, #496	; 0x1f0
 8001792:	4435      	add	r5, r6
 8001794:	f7ff fb12 	bl	8000dbc <HAL_RCC_GetPCLK1Freq>
 8001798:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800179c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80017a0:	6866      	ldr	r6, [r4, #4]
 80017a2:	0076      	lsls	r6, r6, #1
 80017a4:	fbb0 f6f6 	udiv	r6, r0, r6
 80017a8:	f7ff fb08 	bl	8000dbc <HAL_RCC_GetPCLK1Freq>
 80017ac:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80017b0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80017b4:	6863      	ldr	r3, [r4, #4]
 80017b6:	005b      	lsls	r3, r3, #1
 80017b8:	fbb0 f3f3 	udiv	r3, r0, r3
 80017bc:	fba7 2303 	umull	r2, r3, r7, r3
 80017c0:	095b      	lsrs	r3, r3, #5
 80017c2:	fb08 6813 	mls	r8, r8, r3, r6
 80017c6:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 80017ca:	f108 0832 	add.w	r8, r8, #50	; 0x32
 80017ce:	fba7 3708 	umull	r3, r7, r7, r8
 80017d2:	f3c7 1742 	ubfx	r7, r7, #5, #3
 80017d6:	6823      	ldr	r3, [r4, #0]
 80017d8:	442f      	add	r7, r5
 80017da:	609f      	str	r7, [r3, #8]
 80017dc:	e0ad      	b.n	800193a <UART_SetConfig+0x326>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80017de:	f7ff fafd 	bl	8000ddc <HAL_RCC_GetPCLK2Freq>
 80017e2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80017e6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80017ea:	6865      	ldr	r5, [r4, #4]
 80017ec:	006d      	lsls	r5, r5, #1
 80017ee:	fbb0 f5f5 	udiv	r5, r0, r5
 80017f2:	4f54      	ldr	r7, [pc, #336]	; (8001944 <UART_SetConfig+0x330>)
 80017f4:	fba7 3505 	umull	r3, r5, r7, r5
 80017f8:	096d      	lsrs	r5, r5, #5
 80017fa:	012e      	lsls	r6, r5, #4
 80017fc:	f7ff faee 	bl	8000ddc <HAL_RCC_GetPCLK2Freq>
 8001800:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001804:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001808:	6865      	ldr	r5, [r4, #4]
 800180a:	006d      	lsls	r5, r5, #1
 800180c:	fbb0 f9f5 	udiv	r9, r0, r5
 8001810:	f7ff fae4 	bl	8000ddc <HAL_RCC_GetPCLK2Freq>
 8001814:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001818:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800181c:	6865      	ldr	r5, [r4, #4]
 800181e:	006d      	lsls	r5, r5, #1
 8001820:	fbb0 f5f5 	udiv	r5, r0, r5
 8001824:	fba7 3505 	umull	r3, r5, r7, r5
 8001828:	096d      	lsrs	r5, r5, #5
 800182a:	f04f 0864 	mov.w	r8, #100	; 0x64
 800182e:	fb08 9515 	mls	r5, r8, r5, r9
 8001832:	00ed      	lsls	r5, r5, #3
 8001834:	3532      	adds	r5, #50	; 0x32
 8001836:	fba7 3505 	umull	r3, r5, r7, r5
 800183a:	096d      	lsrs	r5, r5, #5
 800183c:	006d      	lsls	r5, r5, #1
 800183e:	f405 75f8 	and.w	r5, r5, #496	; 0x1f0
 8001842:	4435      	add	r5, r6
 8001844:	f7ff faca 	bl	8000ddc <HAL_RCC_GetPCLK2Freq>
 8001848:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800184c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001850:	6866      	ldr	r6, [r4, #4]
 8001852:	0076      	lsls	r6, r6, #1
 8001854:	fbb0 f6f6 	udiv	r6, r0, r6
 8001858:	f7ff fac0 	bl	8000ddc <HAL_RCC_GetPCLK2Freq>
 800185c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001860:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001864:	6863      	ldr	r3, [r4, #4]
 8001866:	005b      	lsls	r3, r3, #1
 8001868:	fbb0 f3f3 	udiv	r3, r0, r3
 800186c:	fba7 2303 	umull	r2, r3, r7, r3
 8001870:	095b      	lsrs	r3, r3, #5
 8001872:	fb08 6813 	mls	r8, r8, r3, r6
 8001876:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 800187a:	f108 0832 	add.w	r8, r8, #50	; 0x32
 800187e:	fba7 3708 	umull	r3, r7, r7, r8
 8001882:	f3c7 1742 	ubfx	r7, r7, #5, #3
 8001886:	6823      	ldr	r3, [r4, #0]
 8001888:	442f      	add	r7, r5
 800188a:	609f      	str	r7, [r3, #8]
 800188c:	e055      	b.n	800193a <UART_SetConfig+0x326>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800188e:	f7ff faa5 	bl	8000ddc <HAL_RCC_GetPCLK2Freq>
 8001892:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001896:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800189a:	6865      	ldr	r5, [r4, #4]
 800189c:	00ad      	lsls	r5, r5, #2
 800189e:	fbb0 f5f5 	udiv	r5, r0, r5
 80018a2:	4f28      	ldr	r7, [pc, #160]	; (8001944 <UART_SetConfig+0x330>)
 80018a4:	fba7 3505 	umull	r3, r5, r7, r5
 80018a8:	096d      	lsrs	r5, r5, #5
 80018aa:	012e      	lsls	r6, r5, #4
 80018ac:	f7ff fa96 	bl	8000ddc <HAL_RCC_GetPCLK2Freq>
 80018b0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80018b4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80018b8:	6865      	ldr	r5, [r4, #4]
 80018ba:	00ad      	lsls	r5, r5, #2
 80018bc:	fbb0 f9f5 	udiv	r9, r0, r5
 80018c0:	f7ff fa8c 	bl	8000ddc <HAL_RCC_GetPCLK2Freq>
 80018c4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80018c8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80018cc:	6865      	ldr	r5, [r4, #4]
 80018ce:	00ad      	lsls	r5, r5, #2
 80018d0:	fbb0 f5f5 	udiv	r5, r0, r5
 80018d4:	fba7 3505 	umull	r3, r5, r7, r5
 80018d8:	096d      	lsrs	r5, r5, #5
 80018da:	f04f 0864 	mov.w	r8, #100	; 0x64
 80018de:	fb08 9515 	mls	r5, r8, r5, r9
 80018e2:	012d      	lsls	r5, r5, #4
 80018e4:	3532      	adds	r5, #50	; 0x32
 80018e6:	fba7 3505 	umull	r3, r5, r7, r5
 80018ea:	096d      	lsrs	r5, r5, #5
 80018ec:	f005 05f0 	and.w	r5, r5, #240	; 0xf0
 80018f0:	4435      	add	r5, r6
 80018f2:	f7ff fa73 	bl	8000ddc <HAL_RCC_GetPCLK2Freq>
 80018f6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80018fa:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80018fe:	6866      	ldr	r6, [r4, #4]
 8001900:	00b6      	lsls	r6, r6, #2
 8001902:	fbb0 f6f6 	udiv	r6, r0, r6
 8001906:	f7ff fa69 	bl	8000ddc <HAL_RCC_GetPCLK2Freq>
 800190a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800190e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001912:	6863      	ldr	r3, [r4, #4]
 8001914:	009b      	lsls	r3, r3, #2
 8001916:	fbb0 f0f3 	udiv	r0, r0, r3
 800191a:	fba7 3000 	umull	r3, r0, r7, r0
 800191e:	0940      	lsrs	r0, r0, #5
 8001920:	fb08 6810 	mls	r8, r8, r0, r6
 8001924:	ea4f 1808 	mov.w	r8, r8, lsl #4
 8001928:	f108 0832 	add.w	r8, r8, #50	; 0x32
 800192c:	fba7 3708 	umull	r3, r7, r7, r8
 8001930:	f3c7 1743 	ubfx	r7, r7, #5, #4
 8001934:	6823      	ldr	r3, [r4, #0]
 8001936:	442f      	add	r7, r5
 8001938:	609f      	str	r7, [r3, #8]
}
 800193a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800193e:	bf00      	nop
 8001940:	40011000 	.word	0x40011000
 8001944:	51eb851f 	.word	0x51eb851f

08001948 <UART_WaitOnFlagUntilTimeout>:
{
 8001948:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800194c:	4605      	mov	r5, r0
 800194e:	460f      	mov	r7, r1
 8001950:	4616      	mov	r6, r2
 8001952:	4698      	mov	r8, r3
 8001954:	9c06      	ldr	r4, [sp, #24]
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8001956:	682b      	ldr	r3, [r5, #0]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	ea37 0303 	bics.w	r3, r7, r3
 800195e:	bf0c      	ite	eq
 8001960:	2301      	moveq	r3, #1
 8001962:	2300      	movne	r3, #0
 8001964:	42b3      	cmp	r3, r6
 8001966:	d11d      	bne.n	80019a4 <UART_WaitOnFlagUntilTimeout+0x5c>
    if(Timeout != HAL_MAX_DELAY)
 8001968:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 800196c:	d0f3      	beq.n	8001956 <UART_WaitOnFlagUntilTimeout+0xe>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 800196e:	b12c      	cbz	r4, 800197c <UART_WaitOnFlagUntilTimeout+0x34>
 8001970:	f7fe fe44 	bl	80005fc <HAL_GetTick>
 8001974:	eba0 0008 	sub.w	r0, r0, r8
 8001978:	42a0      	cmp	r0, r4
 800197a:	d9ec      	bls.n	8001956 <UART_WaitOnFlagUntilTimeout+0xe>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800197c:	682a      	ldr	r2, [r5, #0]
 800197e:	68d3      	ldr	r3, [r2, #12]
 8001980:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8001984:	60d3      	str	r3, [r2, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001986:	682a      	ldr	r2, [r5, #0]
 8001988:	6953      	ldr	r3, [r2, #20]
 800198a:	f023 0301 	bic.w	r3, r3, #1
 800198e:	6153      	str	r3, [r2, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8001990:	2320      	movs	r3, #32
 8001992:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8001996:	f885 303a 	strb.w	r3, [r5, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 800199a:	2300      	movs	r3, #0
 800199c:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
        return HAL_TIMEOUT;
 80019a0:	2003      	movs	r0, #3
 80019a2:	e000      	b.n	80019a6 <UART_WaitOnFlagUntilTimeout+0x5e>
  return HAL_OK;
 80019a4:	2000      	movs	r0, #0
}
 80019a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080019aa <HAL_UART_Init>:
  if(huart == NULL)
 80019aa:	b358      	cbz	r0, 8001a04 <HAL_UART_Init+0x5a>
{
 80019ac:	b510      	push	{r4, lr}
 80019ae:	4604      	mov	r4, r0
  if(huart->gState == HAL_UART_STATE_RESET)
 80019b0:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80019b4:	b30b      	cbz	r3, 80019fa <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 80019b6:	2324      	movs	r3, #36	; 0x24
 80019b8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 80019bc:	6822      	ldr	r2, [r4, #0]
 80019be:	68d3      	ldr	r3, [r2, #12]
 80019c0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80019c4:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80019c6:	4620      	mov	r0, r4
 80019c8:	f7ff fe24 	bl	8001614 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80019cc:	6822      	ldr	r2, [r4, #0]
 80019ce:	6913      	ldr	r3, [r2, #16]
 80019d0:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80019d4:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80019d6:	6822      	ldr	r2, [r4, #0]
 80019d8:	6953      	ldr	r3, [r2, #20]
 80019da:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 80019de:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 80019e0:	6822      	ldr	r2, [r4, #0]
 80019e2:	68d3      	ldr	r3, [r2, #12]
 80019e4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80019e8:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80019ea:	2000      	movs	r0, #0
 80019ec:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 80019ee:	2320      	movs	r3, #32
 80019f0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 80019f4:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
}
 80019f8:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 80019fa:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 80019fe:	f001 fe8d 	bl	800371c <HAL_UART_MspInit>
 8001a02:	e7d8      	b.n	80019b6 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 8001a04:	2001      	movs	r0, #1
}
 8001a06:	4770      	bx	lr

08001a08 <HAL_UART_Transmit>:
{
 8001a08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001a0c:	b082      	sub	sp, #8
 8001a0e:	461e      	mov	r6, r3
  if(huart->gState == HAL_UART_STATE_READY) 
 8001a10:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001a14:	b2db      	uxtb	r3, r3
 8001a16:	2b20      	cmp	r3, #32
 8001a18:	d155      	bne.n	8001ac6 <HAL_UART_Transmit+0xbe>
 8001a1a:	4604      	mov	r4, r0
 8001a1c:	460d      	mov	r5, r1
 8001a1e:	4690      	mov	r8, r2
    if((pData == NULL ) || (Size == 0)) 
 8001a20:	2900      	cmp	r1, #0
 8001a22:	d055      	beq.n	8001ad0 <HAL_UART_Transmit+0xc8>
 8001a24:	2a00      	cmp	r2, #0
 8001a26:	d055      	beq.n	8001ad4 <HAL_UART_Transmit+0xcc>
    __HAL_LOCK(huart);
 8001a28:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001a2c:	2b01      	cmp	r3, #1
 8001a2e:	d053      	beq.n	8001ad8 <HAL_UART_Transmit+0xd0>
 8001a30:	2301      	movs	r3, #1
 8001a32:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a36:	2300      	movs	r3, #0
 8001a38:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001a3a:	2321      	movs	r3, #33	; 0x21
 8001a3c:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8001a40:	f7fe fddc 	bl	80005fc <HAL_GetTick>
 8001a44:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 8001a46:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 8001a4a:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 8001a4e:	e010      	b.n	8001a72 <HAL_UART_Transmit+0x6a>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001a50:	9600      	str	r6, [sp, #0]
 8001a52:	463b      	mov	r3, r7
 8001a54:	2200      	movs	r2, #0
 8001a56:	2180      	movs	r1, #128	; 0x80
 8001a58:	4620      	mov	r0, r4
 8001a5a:	f7ff ff75 	bl	8001948 <UART_WaitOnFlagUntilTimeout>
 8001a5e:	2800      	cmp	r0, #0
 8001a60:	d13c      	bne.n	8001adc <HAL_UART_Transmit+0xd4>
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8001a62:	882b      	ldrh	r3, [r5, #0]
 8001a64:	6822      	ldr	r2, [r4, #0]
 8001a66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a6a:	6053      	str	r3, [r2, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8001a6c:	6923      	ldr	r3, [r4, #16]
 8001a6e:	b9c3      	cbnz	r3, 8001aa2 <HAL_UART_Transmit+0x9a>
          pData +=2U;
 8001a70:	3502      	adds	r5, #2
    while(huart->TxXferCount > 0U)
 8001a72:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8001a74:	b29b      	uxth	r3, r3
 8001a76:	b1b3      	cbz	r3, 8001aa6 <HAL_UART_Transmit+0x9e>
      huart->TxXferCount--;
 8001a78:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8001a7a:	3b01      	subs	r3, #1
 8001a7c:	b29b      	uxth	r3, r3
 8001a7e:	84e3      	strh	r3, [r4, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001a80:	68a3      	ldr	r3, [r4, #8]
 8001a82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a86:	d0e3      	beq.n	8001a50 <HAL_UART_Transmit+0x48>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001a88:	9600      	str	r6, [sp, #0]
 8001a8a:	463b      	mov	r3, r7
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	2180      	movs	r1, #128	; 0x80
 8001a90:	4620      	mov	r0, r4
 8001a92:	f7ff ff59 	bl	8001948 <UART_WaitOnFlagUntilTimeout>
 8001a96:	bb18      	cbnz	r0, 8001ae0 <HAL_UART_Transmit+0xd8>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8001a98:	782a      	ldrb	r2, [r5, #0]
 8001a9a:	6823      	ldr	r3, [r4, #0]
 8001a9c:	605a      	str	r2, [r3, #4]
 8001a9e:	3501      	adds	r5, #1
 8001aa0:	e7e7      	b.n	8001a72 <HAL_UART_Transmit+0x6a>
          pData +=1U;
 8001aa2:	3501      	adds	r5, #1
 8001aa4:	e7e5      	b.n	8001a72 <HAL_UART_Transmit+0x6a>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001aa6:	9600      	str	r6, [sp, #0]
 8001aa8:	463b      	mov	r3, r7
 8001aaa:	2200      	movs	r2, #0
 8001aac:	2140      	movs	r1, #64	; 0x40
 8001aae:	4620      	mov	r0, r4
 8001ab0:	f7ff ff4a 	bl	8001948 <UART_WaitOnFlagUntilTimeout>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	b9a8      	cbnz	r0, 8001ae4 <HAL_UART_Transmit+0xdc>
      huart->gState = HAL_UART_STATE_READY;
 8001ab8:	2220      	movs	r2, #32
 8001aba:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
    __HAL_UNLOCK(huart);
 8001abe:	2200      	movs	r2, #0
 8001ac0:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
    return HAL_OK;
 8001ac4:	e000      	b.n	8001ac8 <HAL_UART_Transmit+0xc0>
    return HAL_BUSY;
 8001ac6:	2302      	movs	r3, #2
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	b002      	add	sp, #8
 8001acc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	e7f9      	b.n	8001ac8 <HAL_UART_Transmit+0xc0>
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	e7f7      	b.n	8001ac8 <HAL_UART_Transmit+0xc0>
    __HAL_LOCK(huart);
 8001ad8:	2302      	movs	r3, #2
 8001ada:	e7f5      	b.n	8001ac8 <HAL_UART_Transmit+0xc0>
          return HAL_TIMEOUT;
 8001adc:	2303      	movs	r3, #3
 8001ade:	e7f3      	b.n	8001ac8 <HAL_UART_Transmit+0xc0>
          return HAL_TIMEOUT;
 8001ae0:	2303      	movs	r3, #3
 8001ae2:	e7f1      	b.n	8001ac8 <HAL_UART_Transmit+0xc0>
      return HAL_TIMEOUT;
 8001ae4:	2303      	movs	r3, #3
 8001ae6:	e7ef      	b.n	8001ac8 <HAL_UART_Transmit+0xc0>

08001ae8 <makeFreeRtosPriority>:
/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
  
  if (priority != osPriorityError) {
 8001ae8:	2884      	cmp	r0, #132	; 0x84
 8001aea:	d001      	beq.n	8001af0 <makeFreeRtosPriority+0x8>
    fpriority += (priority - osPriorityIdle);
 8001aec:	3003      	adds	r0, #3
 8001aee:	4770      	bx	lr
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8001af0:	2000      	movs	r0, #0
  }
  
  return fpriority;
}
 8001af2:	4770      	bx	lr

08001af4 <inHandlerMode>:
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001af4:	f3ef 8005 	mrs	r0, IPSR

/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
  return __get_IPSR() != 0;
}
 8001af8:	3000      	adds	r0, #0
 8001afa:	bf18      	it	ne
 8001afc:	2001      	movne	r0, #1
 8001afe:	4770      	bx	lr

08001b00 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8001b00:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 8001b02:	f000 fdd1 	bl	80026a8 <vTaskStartScheduler>
  
  return osOK;
}
 8001b06:	2000      	movs	r0, #0
 8001b08:	bd08      	pop	{r3, pc}

08001b0a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8001b0a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b0c:	b085      	sub	sp, #20
 8001b0e:	460f      	mov	r7, r1

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001b10:	6844      	ldr	r4, [r0, #4]
 8001b12:	6805      	ldr	r5, [r0, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8001b14:	6906      	ldr	r6, [r0, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001b16:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 8001b1a:	f7ff ffe5 	bl	8001ae8 <makeFreeRtosPriority>
 8001b1e:	ab03      	add	r3, sp, #12
 8001b20:	9301      	str	r3, [sp, #4]
 8001b22:	9000      	str	r0, [sp, #0]
 8001b24:	463b      	mov	r3, r7
 8001b26:	b2b2      	uxth	r2, r6
 8001b28:	4629      	mov	r1, r5
 8001b2a:	4620      	mov	r0, r4
 8001b2c:	f000 fd8a 	bl	8002644 <xTaskCreate>
 8001b30:	2801      	cmp	r0, #1
 8001b32:	d102      	bne.n	8001b3a <osThreadCreate+0x30>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8001b34:	9803      	ldr	r0, [sp, #12]
}
 8001b36:	b005      	add	sp, #20
 8001b38:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return NULL;
 8001b3a:	2000      	movs	r0, #0
 8001b3c:	e7fb      	b.n	8001b36 <osThreadCreate+0x2c>

08001b3e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8001b3e:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8001b40:	4603      	mov	r3, r0
 8001b42:	b900      	cbnz	r0, 8001b46 <osDelay+0x8>
 8001b44:	2301      	movs	r3, #1
 8001b46:	4618      	mov	r0, r3
 8001b48:	f000 fef0 	bl	800292c <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8001b4c:	2000      	movs	r0, #0
 8001b4e:	bd08      	pop	{r3, pc}

08001b50 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8001b50:	b508      	push	{r3, lr}
    return xSemaphoreCreateMutex(); 
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
#else  
    return xSemaphoreCreateMutex(); 
 8001b52:	2001      	movs	r0, #1
 8001b54:	f000 faba 	bl	80020cc <xQueueCreateMutex>
#endif
#else
  return NULL;
#endif
}
 8001b58:	bd08      	pop	{r3, pc}

08001b5a <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8001b5a:	b508      	push	{r3, lr}
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	6841      	ldr	r1, [r0, #4]
 8001b60:	6800      	ldr	r0, [r0, #0]
 8001b62:	f000 f9c5 	bl	8001ef0 <xQueueGenericCreate>
#endif
}
 8001b66:	bd08      	pop	{r3, pc}

08001b68 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8001b68:	b530      	push	{r4, r5, lr}
 8001b6a:	b085      	sub	sp, #20
 8001b6c:	4604      	mov	r4, r0
 8001b6e:	9101      	str	r1, [sp, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8001b70:	2300      	movs	r3, #0
 8001b72:	9303      	str	r3, [sp, #12]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
  if (ticks == 0) {
 8001b74:	4615      	mov	r5, r2
 8001b76:	b902      	cbnz	r2, 8001b7a <osMessagePut+0x12>
    ticks = 1;
 8001b78:	2501      	movs	r5, #1
  }
  
  if (inHandlerMode()) {
 8001b7a:	f7ff ffbb 	bl	8001af4 <inHandlerMode>
 8001b7e:	b198      	cbz	r0, 8001ba8 <osMessagePut+0x40>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8001b80:	2300      	movs	r3, #0
 8001b82:	aa03      	add	r2, sp, #12
 8001b84:	a901      	add	r1, sp, #4
 8001b86:	4620      	mov	r0, r4
 8001b88:	f000 faab 	bl	80020e2 <xQueueGenericSendFromISR>
 8001b8c:	2801      	cmp	r0, #1
 8001b8e:	d118      	bne.n	8001bc2 <osMessagePut+0x5a>
      return osErrorOS;
    }
    portEND_SWITCHING_ISR(taskWoken);
 8001b90:	9b03      	ldr	r3, [sp, #12]
 8001b92:	b1c3      	cbz	r3, 8001bc6 <osMessagePut+0x5e>
 8001b94:	4b0d      	ldr	r3, [pc, #52]	; (8001bcc <osMessagePut+0x64>)
 8001b96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001b9a:	601a      	str	r2, [r3, #0]
 8001b9c:	f3bf 8f4f 	dsb	sy
 8001ba0:	f3bf 8f6f 	isb	sy
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
      return osErrorOS;
    }
  }
  
  return osOK;
 8001ba4:	2000      	movs	r0, #0
 8001ba6:	e008      	b.n	8001bba <osMessagePut+0x52>
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8001ba8:	2300      	movs	r3, #0
 8001baa:	462a      	mov	r2, r5
 8001bac:	a901      	add	r1, sp, #4
 8001bae:	4620      	mov	r0, r4
 8001bb0:	f000 f9c2 	bl	8001f38 <xQueueGenericSend>
 8001bb4:	2801      	cmp	r0, #1
 8001bb6:	d102      	bne.n	8001bbe <osMessagePut+0x56>
  return osOK;
 8001bb8:	2000      	movs	r0, #0
}
 8001bba:	b005      	add	sp, #20
 8001bbc:	bd30      	pop	{r4, r5, pc}
      return osErrorOS;
 8001bbe:	20ff      	movs	r0, #255	; 0xff
 8001bc0:	e7fb      	b.n	8001bba <osMessagePut+0x52>
      return osErrorOS;
 8001bc2:	20ff      	movs	r0, #255	; 0xff
 8001bc4:	e7f9      	b.n	8001bba <osMessagePut+0x52>
  return osOK;
 8001bc6:	2000      	movs	r0, #0
 8001bc8:	e7f7      	b.n	8001bba <osMessagePut+0x52>
 8001bca:	bf00      	nop
 8001bcc:	e000ed04 	.word	0xe000ed04

08001bd0 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8001bd0:	b570      	push	{r4, r5, r6, lr}
 8001bd2:	b084      	sub	sp, #16
 8001bd4:	4604      	mov	r4, r0
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8001bd6:	9102      	str	r1, [sp, #8]
  event.value.v = 0;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	9301      	str	r3, [sp, #4]
  
  if (queue_id == NULL) {
 8001bdc:	b149      	cbz	r1, 8001bf2 <osMessageGet+0x22>
 8001bde:	460d      	mov	r5, r1
 8001be0:	4616      	mov	r6, r2
    event.status = osErrorParameter;
    return event;
  }
  
  taskWoken = pdFALSE;
 8001be2:	2300      	movs	r3, #0
 8001be4:	9303      	str	r3, [sp, #12]
  
  ticks = 0;
  if (millisec == osWaitForever) {
 8001be6:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 8001bea:	d00b      	beq.n	8001c04 <osMessageGet+0x34>
    ticks = portMAX_DELAY;
  }
  else if (millisec != 0) {
 8001bec:	b962      	cbnz	r2, 8001c08 <osMessageGet+0x38>
  ticks = 0;
 8001bee:	461e      	mov	r6, r3
 8001bf0:	e00a      	b.n	8001c08 <osMessageGet+0x38>
    event.status = osErrorParameter;
 8001bf2:	ab04      	add	r3, sp, #16
 8001bf4:	2280      	movs	r2, #128	; 0x80
 8001bf6:	f843 2d10 	str.w	r2, [r3, #-16]!
    return event;
 8001bfa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001bfe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001c02:	e02b      	b.n	8001c5c <osMessageGet+0x8c>
    ticks = portMAX_DELAY;
 8001c04:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 8001c08:	f7ff ff74 	bl	8001af4 <inHandlerMode>
 8001c0c:	b1b0      	cbz	r0, 8001c3c <osMessageGet+0x6c>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8001c0e:	aa03      	add	r2, sp, #12
 8001c10:	a901      	add	r1, sp, #4
 8001c12:	4628      	mov	r0, r5
 8001c14:	f000 fb9e 	bl	8002354 <xQueueReceiveFromISR>
 8001c18:	2801      	cmp	r0, #1
 8001c1a:	d00c      	beq.n	8001c36 <osMessageGet+0x66>
      /* We have mail */
      event.status = osEventMessage;
    }
    else {
      event.status = osOK;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	9300      	str	r3, [sp, #0]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8001c20:	9b03      	ldr	r3, [sp, #12]
 8001c22:	b1b3      	cbz	r3, 8001c52 <osMessageGet+0x82>
 8001c24:	4b11      	ldr	r3, [pc, #68]	; (8001c6c <osMessageGet+0x9c>)
 8001c26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001c2a:	601a      	str	r2, [r3, #0]
 8001c2c:	f3bf 8f4f 	dsb	sy
 8001c30:	f3bf 8f6f 	isb	sy
 8001c34:	e00d      	b.n	8001c52 <osMessageGet+0x82>
      event.status = osEventMessage;
 8001c36:	2310      	movs	r3, #16
 8001c38:	9300      	str	r3, [sp, #0]
 8001c3a:	e7f1      	b.n	8001c20 <osMessageGet+0x50>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	4632      	mov	r2, r6
 8001c40:	a901      	add	r1, sp, #4
 8001c42:	4628      	mov	r0, r5
 8001c44:	f000 fab4 	bl	80021b0 <xQueueGenericReceive>
 8001c48:	2801      	cmp	r0, #1
 8001c4a:	d00a      	beq.n	8001c62 <osMessageGet+0x92>
      /* We have mail */
      event.status = osEventMessage;
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8001c4c:	b966      	cbnz	r6, 8001c68 <osMessageGet+0x98>
 8001c4e:	2300      	movs	r3, #0
 8001c50:	9300      	str	r3, [sp, #0]
    }
  }
  
  return event;
 8001c52:	466b      	mov	r3, sp
 8001c54:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001c58:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8001c5c:	4620      	mov	r0, r4
 8001c5e:	b004      	add	sp, #16
 8001c60:	bd70      	pop	{r4, r5, r6, pc}
      event.status = osEventMessage;
 8001c62:	2310      	movs	r3, #16
 8001c64:	9300      	str	r3, [sp, #0]
 8001c66:	e7f4      	b.n	8001c52 <osMessageGet+0x82>
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8001c68:	2340      	movs	r3, #64	; 0x40
 8001c6a:	e7f1      	b.n	8001c50 <osMessageGet+0x80>
 8001c6c:	e000ed04 	.word	0xe000ed04

08001c70 <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 8001c70:	b508      	push	{r3, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001c72:	f000 ffbf 	bl	8002bf4 <xTaskGetSchedulerState>
 8001c76:	2801      	cmp	r0, #1
 8001c78:	d001      	beq.n	8001c7e <osSystickHandler+0xe>
  {
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
 8001c7a:	f001 f95b 	bl	8002f34 <xPortSysTickHandler>
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 8001c7e:	bd08      	pop	{r3, pc}

08001c80 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001c80:	f100 0308 	add.w	r3, r0, #8
 8001c84:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001c86:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001c8a:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001c8c:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001c8e:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001c90:	2300      	movs	r3, #0
 8001c92:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001c94:	4770      	bx	lr

08001c96 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8001c96:	2300      	movs	r3, #0
 8001c98:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001c9a:	4770      	bx	lr

08001c9c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8001c9c:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001c9e:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001ca0:	689a      	ldr	r2, [r3, #8]
 8001ca2:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001ca4:	689a      	ldr	r2, [r3, #8]
 8001ca6:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001ca8:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001caa:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8001cac:	6803      	ldr	r3, [r0, #0]
 8001cae:	3301      	adds	r3, #1
 8001cb0:	6003      	str	r3, [r0, #0]
}
 8001cb2:	4770      	bx	lr

08001cb4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001cb4:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001cb6:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001cb8:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8001cbc:	d002      	beq.n	8001cc4 <vListInsert+0x10>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001cbe:	f100 0208 	add.w	r2, r0, #8
 8001cc2:	e002      	b.n	8001cca <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
 8001cc4:	6902      	ldr	r2, [r0, #16]
 8001cc6:	e004      	b.n	8001cd2 <vListInsert+0x1e>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001cc8:	461a      	mov	r2, r3
 8001cca:	6853      	ldr	r3, [r2, #4]
 8001ccc:	681c      	ldr	r4, [r3, #0]
 8001cce:	42ac      	cmp	r4, r5
 8001cd0:	d9fa      	bls.n	8001cc8 <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001cd2:	6853      	ldr	r3, [r2, #4]
 8001cd4:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001cd6:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001cd8:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8001cda:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001cdc:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8001cde:	6803      	ldr	r3, [r0, #0]
 8001ce0:	3301      	adds	r3, #1
 8001ce2:	6003      	str	r3, [r0, #0]
}
 8001ce4:	bc30      	pop	{r4, r5}
 8001ce6:	4770      	bx	lr

08001ce8 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8001ce8:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001cea:	6842      	ldr	r2, [r0, #4]
 8001cec:	6881      	ldr	r1, [r0, #8]
 8001cee:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001cf0:	6882      	ldr	r2, [r0, #8]
 8001cf2:	6841      	ldr	r1, [r0, #4]
 8001cf4:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001cf6:	685a      	ldr	r2, [r3, #4]
 8001cf8:	4282      	cmp	r2, r0
 8001cfa:	d005      	beq.n	8001d08 <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8001d00:	6818      	ldr	r0, [r3, #0]
 8001d02:	3801      	subs	r0, #1
 8001d04:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
 8001d06:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001d08:	6882      	ldr	r2, [r0, #8]
 8001d0a:	605a      	str	r2, [r3, #4]
 8001d0c:	e7f6      	b.n	8001cfc <uxListRemove+0x14>

08001d0e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8001d0e:	b510      	push	{r4, lr}
 8001d10:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8001d12:	f001 f89f 	bl	8002e54 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8001d16:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001d18:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001d1a:	429a      	cmp	r2, r3
 8001d1c:	d004      	beq.n	8001d28 <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
 8001d1e:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
 8001d20:	f001 f8ba 	bl	8002e98 <vPortExitCritical>

	return xReturn;
}
 8001d24:	4620      	mov	r0, r4
 8001d26:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 8001d28:	2401      	movs	r4, #1
 8001d2a:	e7f9      	b.n	8001d20 <prvIsQueueFull+0x12>

08001d2c <prvIsQueueEmpty>:
{
 8001d2c:	b510      	push	{r4, lr}
 8001d2e:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8001d30:	f001 f890 	bl	8002e54 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8001d34:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001d36:	b123      	cbz	r3, 8001d42 <prvIsQueueEmpty+0x16>
			xReturn = pdFALSE;
 8001d38:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8001d3a:	f001 f8ad 	bl	8002e98 <vPortExitCritical>
}
 8001d3e:	4620      	mov	r0, r4
 8001d40:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 8001d42:	2401      	movs	r4, #1
 8001d44:	e7f9      	b.n	8001d3a <prvIsQueueEmpty+0xe>

08001d46 <prvCopyDataToQueue>:
{
 8001d46:	b570      	push	{r4, r5, r6, lr}
 8001d48:	4604      	mov	r4, r0
 8001d4a:	4616      	mov	r6, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001d4c:	6b85      	ldr	r5, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8001d4e:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8001d50:	b95a      	cbnz	r2, 8001d6a <prvCopyDataToQueue+0x24>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001d52:	6803      	ldr	r3, [r0, #0]
 8001d54:	b11b      	cbz	r3, 8001d5e <prvCopyDataToQueue+0x18>
BaseType_t xReturn = pdFALSE;
 8001d56:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 8001d58:	3501      	adds	r5, #1
 8001d5a:	63a5      	str	r5, [r4, #56]	; 0x38
}
 8001d5c:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8001d5e:	6840      	ldr	r0, [r0, #4]
 8001d60:	f000 ffae 	bl	8002cc0 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 8001d64:	2300      	movs	r3, #0
 8001d66:	6063      	str	r3, [r4, #4]
 8001d68:	e7f6      	b.n	8001d58 <prvCopyDataToQueue+0x12>
	else if( xPosition == queueSEND_TO_BACK )
 8001d6a:	b96e      	cbnz	r6, 8001d88 <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8001d6c:	6880      	ldr	r0, [r0, #8]
 8001d6e:	f001 fdbb 	bl	80038e8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8001d72:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001d74:	68a3      	ldr	r3, [r4, #8]
 8001d76:	4413      	add	r3, r2
 8001d78:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001d7a:	6862      	ldr	r2, [r4, #4]
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d319      	bcc.n	8001db4 <prvCopyDataToQueue+0x6e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8001d80:	6823      	ldr	r3, [r4, #0]
 8001d82:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
 8001d84:	2000      	movs	r0, #0
 8001d86:	e7e7      	b.n	8001d58 <prvCopyDataToQueue+0x12>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001d88:	68c0      	ldr	r0, [r0, #12]
 8001d8a:	f001 fdad 	bl	80038e8 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8001d8e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001d90:	4252      	negs	r2, r2
 8001d92:	68e3      	ldr	r3, [r4, #12]
 8001d94:	4413      	add	r3, r2
 8001d96:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001d98:	6821      	ldr	r1, [r4, #0]
 8001d9a:	428b      	cmp	r3, r1
 8001d9c:	d202      	bcs.n	8001da4 <prvCopyDataToQueue+0x5e>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8001d9e:	6863      	ldr	r3, [r4, #4]
 8001da0:	441a      	add	r2, r3
 8001da2:	60e2      	str	r2, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8001da4:	2e02      	cmp	r6, #2
 8001da6:	d001      	beq.n	8001dac <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
 8001da8:	2000      	movs	r0, #0
 8001daa:	e7d5      	b.n	8001d58 <prvCopyDataToQueue+0x12>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001dac:	b125      	cbz	r5, 8001db8 <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
 8001dae:	3d01      	subs	r5, #1
BaseType_t xReturn = pdFALSE;
 8001db0:	2000      	movs	r0, #0
 8001db2:	e7d1      	b.n	8001d58 <prvCopyDataToQueue+0x12>
 8001db4:	2000      	movs	r0, #0
 8001db6:	e7cf      	b.n	8001d58 <prvCopyDataToQueue+0x12>
 8001db8:	2000      	movs	r0, #0
 8001dba:	e7cd      	b.n	8001d58 <prvCopyDataToQueue+0x12>

08001dbc <prvCopyDataFromQueue>:
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8001dbc:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8001dbe:	b172      	cbz	r2, 8001dde <prvCopyDataFromQueue+0x22>
{
 8001dc0:	b510      	push	{r4, lr}
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8001dc2:	68c3      	ldr	r3, [r0, #12]
 8001dc4:	4413      	add	r3, r2
 8001dc6:	60c3      	str	r3, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8001dc8:	6844      	ldr	r4, [r0, #4]
 8001dca:	42a3      	cmp	r3, r4
 8001dcc:	d301      	bcc.n	8001dd2 <prvCopyDataFromQueue+0x16>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8001dce:	6803      	ldr	r3, [r0, #0]
 8001dd0:	60c3      	str	r3, [r0, #12]
 8001dd2:	460c      	mov	r4, r1
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8001dd4:	68c1      	ldr	r1, [r0, #12]
 8001dd6:	4620      	mov	r0, r4
 8001dd8:	f001 fd86 	bl	80038e8 <memcpy>
}
 8001ddc:	bd10      	pop	{r4, pc}
 8001dde:	4770      	bx	lr

08001de0 <prvUnlockQueue>:
{
 8001de0:	b538      	push	{r3, r4, r5, lr}
 8001de2:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
 8001de4:	f001 f836 	bl	8002e54 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8001de8:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
 8001dec:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001dee:	e003      	b.n	8001df8 <prvUnlockQueue+0x18>
						vTaskMissedYield();
 8001df0:	f000 fef8 	bl	8002be4 <vTaskMissedYield>
			--cTxLock;
 8001df4:	3c01      	subs	r4, #1
 8001df6:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001df8:	2c00      	cmp	r4, #0
 8001dfa:	dd08      	ble.n	8001e0e <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001dfc:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8001dfe:	b133      	cbz	r3, 8001e0e <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001e00:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8001e04:	f000 fe58 	bl	8002ab8 <xTaskRemoveFromEventList>
 8001e08:	2800      	cmp	r0, #0
 8001e0a:	d0f3      	beq.n	8001df4 <prvUnlockQueue+0x14>
 8001e0c:	e7f0      	b.n	8001df0 <prvUnlockQueue+0x10>
		pxQueue->cTxLock = queueUNLOCKED;
 8001e0e:	23ff      	movs	r3, #255	; 0xff
 8001e10:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
 8001e14:	f001 f840 	bl	8002e98 <vPortExitCritical>
	taskENTER_CRITICAL();
 8001e18:	f001 f81c 	bl	8002e54 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8001e1c:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
 8001e20:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8001e22:	e003      	b.n	8001e2c <prvUnlockQueue+0x4c>
					vTaskMissedYield();
 8001e24:	f000 fede 	bl	8002be4 <vTaskMissedYield>
				--cRxLock;
 8001e28:	3c01      	subs	r4, #1
 8001e2a:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8001e2c:	2c00      	cmp	r4, #0
 8001e2e:	dd08      	ble.n	8001e42 <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001e30:	692b      	ldr	r3, [r5, #16]
 8001e32:	b133      	cbz	r3, 8001e42 <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001e34:	f105 0010 	add.w	r0, r5, #16
 8001e38:	f000 fe3e 	bl	8002ab8 <xTaskRemoveFromEventList>
 8001e3c:	2800      	cmp	r0, #0
 8001e3e:	d0f3      	beq.n	8001e28 <prvUnlockQueue+0x48>
 8001e40:	e7f0      	b.n	8001e24 <prvUnlockQueue+0x44>
		pxQueue->cRxLock = queueUNLOCKED;
 8001e42:	23ff      	movs	r3, #255	; 0xff
 8001e44:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
 8001e48:	f001 f826 	bl	8002e98 <vPortExitCritical>
}
 8001e4c:	bd38      	pop	{r3, r4, r5, pc}
	...

08001e50 <xQueueGenericReset>:
{
 8001e50:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 8001e52:	b940      	cbnz	r0, 8001e66 <xQueueGenericReset+0x16>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001e54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e58:	f383 8811 	msr	BASEPRI, r3
 8001e5c:	f3bf 8f6f 	isb	sy
 8001e60:	f3bf 8f4f 	dsb	sy
 8001e64:	e7fe      	b.n	8001e64 <xQueueGenericReset+0x14>
 8001e66:	4604      	mov	r4, r0
 8001e68:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
 8001e6a:	f000 fff3 	bl	8002e54 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8001e6e:	6821      	ldr	r1, [r4, #0]
 8001e70:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8001e72:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001e74:	fb03 1002 	mla	r0, r3, r2, r1
 8001e78:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001e7a:	2000      	movs	r0, #0
 8001e7c:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8001e7e:	60a1      	str	r1, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8001e80:	3a01      	subs	r2, #1
 8001e82:	fb02 1303 	mla	r3, r2, r3, r1
 8001e86:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8001e88:	23ff      	movs	r3, #255	; 0xff
 8001e8a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8001e8e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 8001e92:	b9a5      	cbnz	r5, 8001ebe <xQueueGenericReset+0x6e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001e94:	6923      	ldr	r3, [r4, #16]
 8001e96:	b91b      	cbnz	r3, 8001ea0 <xQueueGenericReset+0x50>
	taskEXIT_CRITICAL();
 8001e98:	f000 fffe 	bl	8002e98 <vPortExitCritical>
}
 8001e9c:	2001      	movs	r0, #1
 8001e9e:	bd38      	pop	{r3, r4, r5, pc}
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001ea0:	f104 0010 	add.w	r0, r4, #16
 8001ea4:	f000 fe08 	bl	8002ab8 <xTaskRemoveFromEventList>
 8001ea8:	2800      	cmp	r0, #0
 8001eaa:	d0f5      	beq.n	8001e98 <xQueueGenericReset+0x48>
					queueYIELD_IF_USING_PREEMPTION();
 8001eac:	4b08      	ldr	r3, [pc, #32]	; (8001ed0 <xQueueGenericReset+0x80>)
 8001eae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001eb2:	601a      	str	r2, [r3, #0]
 8001eb4:	f3bf 8f4f 	dsb	sy
 8001eb8:	f3bf 8f6f 	isb	sy
 8001ebc:	e7ec      	b.n	8001e98 <xQueueGenericReset+0x48>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001ebe:	f104 0010 	add.w	r0, r4, #16
 8001ec2:	f7ff fedd 	bl	8001c80 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001ec6:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8001eca:	f7ff fed9 	bl	8001c80 <vListInitialise>
 8001ece:	e7e3      	b.n	8001e98 <xQueueGenericReset+0x48>
 8001ed0:	e000ed04 	.word	0xe000ed04

08001ed4 <prvInitialiseNewQueue>:
{
 8001ed4:	b510      	push	{r4, lr}
 8001ed6:	9b02      	ldr	r3, [sp, #8]
	if( uxItemSize == ( UBaseType_t ) 0 )
 8001ed8:	460c      	mov	r4, r1
 8001eda:	b139      	cbz	r1, 8001eec <prvInitialiseNewQueue+0x18>
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8001edc:	601a      	str	r2, [r3, #0]
	pxNewQueue->uxLength = uxQueueLength;
 8001ede:	63d8      	str	r0, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8001ee0:	641c      	str	r4, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001ee2:	2101      	movs	r1, #1
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f7ff ffb3 	bl	8001e50 <xQueueGenericReset>
}
 8001eea:	bd10      	pop	{r4, pc}
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001eec:	601b      	str	r3, [r3, #0]
 8001eee:	e7f6      	b.n	8001ede <prvInitialiseNewQueue+0xa>

08001ef0 <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001ef0:	b940      	cbnz	r0, 8001f04 <xQueueGenericCreate+0x14>
 8001ef2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ef6:	f383 8811 	msr	BASEPRI, r3
 8001efa:	f3bf 8f6f 	isb	sy
 8001efe:	f3bf 8f4f 	dsb	sy
 8001f02:	e7fe      	b.n	8001f02 <xQueueGenericCreate+0x12>
	{
 8001f04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f06:	b083      	sub	sp, #12
 8001f08:	4605      	mov	r5, r0
		if( uxItemSize == ( UBaseType_t ) 0 )
 8001f0a:	b111      	cbz	r1, 8001f12 <xQueueGenericCreate+0x22>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001f0c:	fb01 f000 	mul.w	r0, r1, r0
 8001f10:	e000      	b.n	8001f14 <xQueueGenericCreate+0x24>
			xQueueSizeInBytes = ( size_t ) 0;
 8001f12:	2000      	movs	r0, #0
 8001f14:	4617      	mov	r7, r2
 8001f16:	460c      	mov	r4, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8001f18:	3048      	adds	r0, #72	; 0x48
 8001f1a:	f001 f927 	bl	800316c <pvPortMalloc>
		if( pxNewQueue != NULL )
 8001f1e:	4606      	mov	r6, r0
 8001f20:	b138      	cbz	r0, 8001f32 <xQueueGenericCreate+0x42>
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001f22:	9000      	str	r0, [sp, #0]
 8001f24:	463b      	mov	r3, r7
 8001f26:	f100 0248 	add.w	r2, r0, #72	; 0x48
 8001f2a:	4621      	mov	r1, r4
 8001f2c:	4628      	mov	r0, r5
 8001f2e:	f7ff ffd1 	bl	8001ed4 <prvInitialiseNewQueue>
	}
 8001f32:	4630      	mov	r0, r6
 8001f34:	b003      	add	sp, #12
 8001f36:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001f38 <xQueueGenericSend>:
{
 8001f38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f3a:	b085      	sub	sp, #20
 8001f3c:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 8001f3e:	b160      	cbz	r0, 8001f5a <xQueueGenericSend+0x22>
 8001f40:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001f42:	b999      	cbnz	r1, 8001f6c <xQueueGenericSend+0x34>
 8001f44:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8001f46:	b18a      	cbz	r2, 8001f6c <xQueueGenericSend+0x34>
 8001f48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f4c:	f383 8811 	msr	BASEPRI, r3
 8001f50:	f3bf 8f6f 	isb	sy
 8001f54:	f3bf 8f4f 	dsb	sy
 8001f58:	e7fe      	b.n	8001f58 <xQueueGenericSend+0x20>
 8001f5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f5e:	f383 8811 	msr	BASEPRI, r3
 8001f62:	f3bf 8f6f 	isb	sy
 8001f66:	f3bf 8f4f 	dsb	sy
 8001f6a:	e7fe      	b.n	8001f6a <xQueueGenericSend+0x32>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001f6c:	2b02      	cmp	r3, #2
 8001f6e:	d10b      	bne.n	8001f88 <xQueueGenericSend+0x50>
 8001f70:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8001f72:	2a01      	cmp	r2, #1
 8001f74:	d008      	beq.n	8001f88 <xQueueGenericSend+0x50>
 8001f76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f7a:	f383 8811 	msr	BASEPRI, r3
 8001f7e:	f3bf 8f6f 	isb	sy
 8001f82:	f3bf 8f4f 	dsb	sy
 8001f86:	e7fe      	b.n	8001f86 <xQueueGenericSend+0x4e>
 8001f88:	461e      	mov	r6, r3
 8001f8a:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001f8c:	f000 fe32 	bl	8002bf4 <xTaskGetSchedulerState>
 8001f90:	b950      	cbnz	r0, 8001fa8 <xQueueGenericSend+0x70>
 8001f92:	9b01      	ldr	r3, [sp, #4]
 8001f94:	b153      	cbz	r3, 8001fac <xQueueGenericSend+0x74>
 8001f96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f9a:	f383 8811 	msr	BASEPRI, r3
 8001f9e:	f3bf 8f6f 	isb	sy
 8001fa2:	f3bf 8f4f 	dsb	sy
 8001fa6:	e7fe      	b.n	8001fa6 <xQueueGenericSend+0x6e>
 8001fa8:	2500      	movs	r5, #0
 8001faa:	e03a      	b.n	8002022 <xQueueGenericSend+0xea>
 8001fac:	2500      	movs	r5, #0
 8001fae:	e038      	b.n	8002022 <xQueueGenericSend+0xea>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001fb0:	4632      	mov	r2, r6
 8001fb2:	4639      	mov	r1, r7
 8001fb4:	4620      	mov	r0, r4
 8001fb6:	f7ff fec6 	bl	8001d46 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001fba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001fbc:	b94b      	cbnz	r3, 8001fd2 <xQueueGenericSend+0x9a>
					else if( xYieldRequired != pdFALSE )
 8001fbe:	b1a8      	cbz	r0, 8001fec <xQueueGenericSend+0xb4>
						queueYIELD_IF_USING_PREEMPTION();
 8001fc0:	4b3b      	ldr	r3, [pc, #236]	; (80020b0 <xQueueGenericSend+0x178>)
 8001fc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001fc6:	601a      	str	r2, [r3, #0]
 8001fc8:	f3bf 8f4f 	dsb	sy
 8001fcc:	f3bf 8f6f 	isb	sy
 8001fd0:	e00c      	b.n	8001fec <xQueueGenericSend+0xb4>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001fd2:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8001fd6:	f000 fd6f 	bl	8002ab8 <xTaskRemoveFromEventList>
 8001fda:	b138      	cbz	r0, 8001fec <xQueueGenericSend+0xb4>
							queueYIELD_IF_USING_PREEMPTION();
 8001fdc:	4b34      	ldr	r3, [pc, #208]	; (80020b0 <xQueueGenericSend+0x178>)
 8001fde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001fe2:	601a      	str	r2, [r3, #0]
 8001fe4:	f3bf 8f4f 	dsb	sy
 8001fe8:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8001fec:	f000 ff54 	bl	8002e98 <vPortExitCritical>
				return pdPASS;
 8001ff0:	2001      	movs	r0, #1
}
 8001ff2:	b005      	add	sp, #20
 8001ff4:	bdf0      	pop	{r4, r5, r6, r7, pc}
					taskEXIT_CRITICAL();
 8001ff6:	f000 ff4f 	bl	8002e98 <vPortExitCritical>
					return errQUEUE_FULL;
 8001ffa:	2000      	movs	r0, #0
 8001ffc:	e7f9      	b.n	8001ff2 <xQueueGenericSend+0xba>
					vTaskSetTimeOutState( &xTimeOut );
 8001ffe:	a802      	add	r0, sp, #8
 8002000:	f000 fd9c 	bl	8002b3c <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002004:	2501      	movs	r5, #1
 8002006:	e019      	b.n	800203c <xQueueGenericSend+0x104>
		prvLockQueue( pxQueue );
 8002008:	2300      	movs	r3, #0
 800200a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800200e:	e021      	b.n	8002054 <xQueueGenericSend+0x11c>
 8002010:	2300      	movs	r3, #0
 8002012:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002016:	e023      	b.n	8002060 <xQueueGenericSend+0x128>
				prvUnlockQueue( pxQueue );
 8002018:	4620      	mov	r0, r4
 800201a:	f7ff fee1 	bl	8001de0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800201e:	f000 fc0d 	bl	800283c <xTaskResumeAll>
		taskENTER_CRITICAL();
 8002022:	f000 ff17 	bl	8002e54 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002026:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002028:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800202a:	429a      	cmp	r2, r3
 800202c:	d3c0      	bcc.n	8001fb0 <xQueueGenericSend+0x78>
 800202e:	2e02      	cmp	r6, #2
 8002030:	d0be      	beq.n	8001fb0 <xQueueGenericSend+0x78>
				if( xTicksToWait == ( TickType_t ) 0 )
 8002032:	9b01      	ldr	r3, [sp, #4]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d0de      	beq.n	8001ff6 <xQueueGenericSend+0xbe>
				else if( xEntryTimeSet == pdFALSE )
 8002038:	2d00      	cmp	r5, #0
 800203a:	d0e0      	beq.n	8001ffe <xQueueGenericSend+0xc6>
		taskEXIT_CRITICAL();
 800203c:	f000 ff2c 	bl	8002e98 <vPortExitCritical>
		vTaskSuspendAll();
 8002040:	f000 fb6c 	bl	800271c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002044:	f000 ff06 	bl	8002e54 <vPortEnterCritical>
 8002048:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800204c:	b25b      	sxtb	r3, r3
 800204e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002052:	d0d9      	beq.n	8002008 <xQueueGenericSend+0xd0>
 8002054:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8002058:	b25b      	sxtb	r3, r3
 800205a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800205e:	d0d7      	beq.n	8002010 <xQueueGenericSend+0xd8>
 8002060:	f000 ff1a 	bl	8002e98 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002064:	a901      	add	r1, sp, #4
 8002066:	a802      	add	r0, sp, #8
 8002068:	f000 fd7c 	bl	8002b64 <xTaskCheckForTimeOut>
 800206c:	b9c8      	cbnz	r0, 80020a2 <xQueueGenericSend+0x16a>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800206e:	4620      	mov	r0, r4
 8002070:	f7ff fe4d 	bl	8001d0e <prvIsQueueFull>
 8002074:	2800      	cmp	r0, #0
 8002076:	d0cf      	beq.n	8002018 <xQueueGenericSend+0xe0>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002078:	9901      	ldr	r1, [sp, #4]
 800207a:	f104 0010 	add.w	r0, r4, #16
 800207e:	f000 fd01 	bl	8002a84 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002082:	4620      	mov	r0, r4
 8002084:	f7ff feac 	bl	8001de0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002088:	f000 fbd8 	bl	800283c <xTaskResumeAll>
 800208c:	2800      	cmp	r0, #0
 800208e:	d1c8      	bne.n	8002022 <xQueueGenericSend+0xea>
					portYIELD_WITHIN_API();
 8002090:	4b07      	ldr	r3, [pc, #28]	; (80020b0 <xQueueGenericSend+0x178>)
 8002092:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002096:	601a      	str	r2, [r3, #0]
 8002098:	f3bf 8f4f 	dsb	sy
 800209c:	f3bf 8f6f 	isb	sy
 80020a0:	e7bf      	b.n	8002022 <xQueueGenericSend+0xea>
			prvUnlockQueue( pxQueue );
 80020a2:	4620      	mov	r0, r4
 80020a4:	f7ff fe9c 	bl	8001de0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80020a8:	f000 fbc8 	bl	800283c <xTaskResumeAll>
			return errQUEUE_FULL;
 80020ac:	2000      	movs	r0, #0
 80020ae:	e7a0      	b.n	8001ff2 <xQueueGenericSend+0xba>
 80020b0:	e000ed04 	.word	0xe000ed04

080020b4 <prvInitialiseMutex>:
		if( pxNewQueue != NULL )
 80020b4:	b148      	cbz	r0, 80020ca <prvInitialiseMutex+0x16>
	{
 80020b6:	b508      	push	{r3, lr}
			pxNewQueue->pxMutexHolder = NULL;
 80020b8:	2100      	movs	r1, #0
 80020ba:	6041      	str	r1, [r0, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80020bc:	6001      	str	r1, [r0, #0]
			pxNewQueue->u.uxRecursiveCallCount = 0;
 80020be:	60c1      	str	r1, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80020c0:	460b      	mov	r3, r1
 80020c2:	460a      	mov	r2, r1
 80020c4:	f7ff ff38 	bl	8001f38 <xQueueGenericSend>
	}
 80020c8:	bd08      	pop	{r3, pc}
 80020ca:	4770      	bx	lr

080020cc <xQueueCreateMutex>:
	{
 80020cc:	b510      	push	{r4, lr}
		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80020ce:	4602      	mov	r2, r0
 80020d0:	2100      	movs	r1, #0
 80020d2:	2001      	movs	r0, #1
 80020d4:	f7ff ff0c 	bl	8001ef0 <xQueueGenericCreate>
 80020d8:	4604      	mov	r4, r0
		prvInitialiseMutex( pxNewQueue );
 80020da:	f7ff ffeb 	bl	80020b4 <prvInitialiseMutex>
	}
 80020de:	4620      	mov	r0, r4
 80020e0:	bd10      	pop	{r4, pc}

080020e2 <xQueueGenericSendFromISR>:
{
 80020e2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 80020e6:	b160      	cbz	r0, 8002102 <xQueueGenericSendFromISR+0x20>
 80020e8:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80020ea:	b999      	cbnz	r1, 8002114 <xQueueGenericSendFromISR+0x32>
 80020ec:	6c00      	ldr	r0, [r0, #64]	; 0x40
 80020ee:	b188      	cbz	r0, 8002114 <xQueueGenericSendFromISR+0x32>
 80020f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020f4:	f383 8811 	msr	BASEPRI, r3
 80020f8:	f3bf 8f6f 	isb	sy
 80020fc:	f3bf 8f4f 	dsb	sy
 8002100:	e7fe      	b.n	8002100 <xQueueGenericSendFromISR+0x1e>
 8002102:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002106:	f383 8811 	msr	BASEPRI, r3
 800210a:	f3bf 8f6f 	isb	sy
 800210e:	f3bf 8f4f 	dsb	sy
 8002112:	e7fe      	b.n	8002112 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002114:	2b02      	cmp	r3, #2
 8002116:	d10b      	bne.n	8002130 <xQueueGenericSendFromISR+0x4e>
 8002118:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800211a:	2801      	cmp	r0, #1
 800211c:	d008      	beq.n	8002130 <xQueueGenericSendFromISR+0x4e>
 800211e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002122:	f383 8811 	msr	BASEPRI, r3
 8002126:	f3bf 8f6f 	isb	sy
 800212a:	f3bf 8f4f 	dsb	sy
 800212e:	e7fe      	b.n	800212e <xQueueGenericSendFromISR+0x4c>
 8002130:	461f      	mov	r7, r3
 8002132:	4690      	mov	r8, r2
 8002134:	4689      	mov	r9, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002136:	f000 ff9d 	bl	8003074 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800213a:	f3ef 8611 	mrs	r6, BASEPRI
 800213e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002142:	f383 8811 	msr	BASEPRI, r3
 8002146:	f3bf 8f6f 	isb	sy
 800214a:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800214e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002150:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002152:	429a      	cmp	r2, r3
 8002154:	d303      	bcc.n	800215e <xQueueGenericSendFromISR+0x7c>
 8002156:	2f02      	cmp	r7, #2
 8002158:	d001      	beq.n	800215e <xQueueGenericSendFromISR+0x7c>
			xReturn = errQUEUE_FULL;
 800215a:	2000      	movs	r0, #0
 800215c:	e00f      	b.n	800217e <xQueueGenericSendFromISR+0x9c>
			const int8_t cTxLock = pxQueue->cTxLock;
 800215e:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 8002162:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002164:	463a      	mov	r2, r7
 8002166:	4649      	mov	r1, r9
 8002168:	4620      	mov	r0, r4
 800216a:	f7ff fdec 	bl	8001d46 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 800216e:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8002172:	d008      	beq.n	8002186 <xQueueGenericSendFromISR+0xa4>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002174:	1c6b      	adds	r3, r5, #1
 8002176:	b25b      	sxtb	r3, r3
 8002178:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
 800217c:	2001      	movs	r0, #1
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800217e:	f386 8811 	msr	BASEPRI, r6
}
 8002182:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002186:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002188:	b15b      	cbz	r3, 80021a2 <xQueueGenericSendFromISR+0xc0>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800218a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800218e:	f000 fc93 	bl	8002ab8 <xTaskRemoveFromEventList>
 8002192:	b140      	cbz	r0, 80021a6 <xQueueGenericSendFromISR+0xc4>
							if( pxHigherPriorityTaskWoken != NULL )
 8002194:	f1b8 0f00 	cmp.w	r8, #0
 8002198:	d007      	beq.n	80021aa <xQueueGenericSendFromISR+0xc8>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800219a:	2001      	movs	r0, #1
 800219c:	f8c8 0000 	str.w	r0, [r8]
 80021a0:	e7ed      	b.n	800217e <xQueueGenericSendFromISR+0x9c>
			xReturn = pdPASS;
 80021a2:	2001      	movs	r0, #1
 80021a4:	e7eb      	b.n	800217e <xQueueGenericSendFromISR+0x9c>
 80021a6:	2001      	movs	r0, #1
 80021a8:	e7e9      	b.n	800217e <xQueueGenericSendFromISR+0x9c>
 80021aa:	2001      	movs	r0, #1
 80021ac:	e7e7      	b.n	800217e <xQueueGenericSendFromISR+0x9c>
	...

080021b0 <xQueueGenericReceive>:
{
 80021b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80021b4:	b084      	sub	sp, #16
 80021b6:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 80021b8:	b160      	cbz	r0, 80021d4 <xQueueGenericReceive+0x24>
 80021ba:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80021bc:	b999      	cbnz	r1, 80021e6 <xQueueGenericReceive+0x36>
 80021be:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80021c0:	b18a      	cbz	r2, 80021e6 <xQueueGenericReceive+0x36>
	__asm volatile
 80021c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021c6:	f383 8811 	msr	BASEPRI, r3
 80021ca:	f3bf 8f6f 	isb	sy
 80021ce:	f3bf 8f4f 	dsb	sy
 80021d2:	e7fe      	b.n	80021d2 <xQueueGenericReceive+0x22>
 80021d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021d8:	f383 8811 	msr	BASEPRI, r3
 80021dc:	f3bf 8f6f 	isb	sy
 80021e0:	f3bf 8f4f 	dsb	sy
 80021e4:	e7fe      	b.n	80021e4 <xQueueGenericReceive+0x34>
 80021e6:	461f      	mov	r7, r3
 80021e8:	4688      	mov	r8, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80021ea:	f000 fd03 	bl	8002bf4 <xTaskGetSchedulerState>
 80021ee:	b950      	cbnz	r0, 8002206 <xQueueGenericReceive+0x56>
 80021f0:	9b01      	ldr	r3, [sp, #4]
 80021f2:	b153      	cbz	r3, 800220a <xQueueGenericReceive+0x5a>
 80021f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021f8:	f383 8811 	msr	BASEPRI, r3
 80021fc:	f3bf 8f6f 	isb	sy
 8002200:	f3bf 8f4f 	dsb	sy
 8002204:	e7fe      	b.n	8002204 <xQueueGenericReceive+0x54>
 8002206:	2600      	movs	r6, #0
 8002208:	e05f      	b.n	80022ca <xQueueGenericReceive+0x11a>
 800220a:	2600      	movs	r6, #0
 800220c:	e05d      	b.n	80022ca <xQueueGenericReceive+0x11a>
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 800220e:	68e6      	ldr	r6, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002210:	4641      	mov	r1, r8
 8002212:	4620      	mov	r0, r4
 8002214:	f7ff fdd2 	bl	8001dbc <prvCopyDataFromQueue>
				if( xJustPeeking == pdFALSE )
 8002218:	b9df      	cbnz	r7, 8002252 <xQueueGenericReceive+0xa2>
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 800221a:	3d01      	subs	r5, #1
 800221c:	63a5      	str	r5, [r4, #56]	; 0x38
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800221e:	6823      	ldr	r3, [r4, #0]
 8002220:	b913      	cbnz	r3, 8002228 <xQueueGenericReceive+0x78>
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8002222:	f000 fda5 	bl	8002d70 <pvTaskIncrementMutexHeldCount>
 8002226:	6060      	str	r0, [r4, #4]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002228:	6923      	ldr	r3, [r4, #16]
 800222a:	b163      	cbz	r3, 8002246 <xQueueGenericReceive+0x96>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800222c:	f104 0010 	add.w	r0, r4, #16
 8002230:	f000 fc42 	bl	8002ab8 <xTaskRemoveFromEventList>
 8002234:	b138      	cbz	r0, 8002246 <xQueueGenericReceive+0x96>
							queueYIELD_IF_USING_PREEMPTION();
 8002236:	4b46      	ldr	r3, [pc, #280]	; (8002350 <xQueueGenericReceive+0x1a0>)
 8002238:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800223c:	601a      	str	r2, [r3, #0]
 800223e:	f3bf 8f4f 	dsb	sy
 8002242:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8002246:	f000 fe27 	bl	8002e98 <vPortExitCritical>
				return pdPASS;
 800224a:	2001      	movs	r0, #1
}
 800224c:	b004      	add	sp, #16
 800224e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 8002252:	60e6      	str	r6, [r4, #12]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002254:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002256:	2b00      	cmp	r3, #0
 8002258:	d0f5      	beq.n	8002246 <xQueueGenericReceive+0x96>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800225a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800225e:	f000 fc2b 	bl	8002ab8 <xTaskRemoveFromEventList>
 8002262:	2800      	cmp	r0, #0
 8002264:	d0ef      	beq.n	8002246 <xQueueGenericReceive+0x96>
							queueYIELD_IF_USING_PREEMPTION();
 8002266:	4b3a      	ldr	r3, [pc, #232]	; (8002350 <xQueueGenericReceive+0x1a0>)
 8002268:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800226c:	601a      	str	r2, [r3, #0]
 800226e:	f3bf 8f4f 	dsb	sy
 8002272:	f3bf 8f6f 	isb	sy
 8002276:	e7e6      	b.n	8002246 <xQueueGenericReceive+0x96>
					taskEXIT_CRITICAL();
 8002278:	f000 fe0e 	bl	8002e98 <vPortExitCritical>
					return errQUEUE_EMPTY;
 800227c:	2000      	movs	r0, #0
 800227e:	e7e5      	b.n	800224c <xQueueGenericReceive+0x9c>
					vTaskSetTimeOutState( &xTimeOut );
 8002280:	a802      	add	r0, sp, #8
 8002282:	f000 fc5b 	bl	8002b3c <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002286:	2601      	movs	r6, #1
 8002288:	e029      	b.n	80022de <xQueueGenericReceive+0x12e>
		prvLockQueue( pxQueue );
 800228a:	2300      	movs	r3, #0
 800228c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8002290:	e031      	b.n	80022f6 <xQueueGenericReceive+0x146>
 8002292:	2300      	movs	r3, #0
 8002294:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002298:	e033      	b.n	8002302 <xQueueGenericReceive+0x152>
						taskENTER_CRITICAL();
 800229a:	f000 fddb 	bl	8002e54 <vPortEnterCritical>
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800229e:	6860      	ldr	r0, [r4, #4]
 80022a0:	f000 fcb8 	bl	8002c14 <vTaskPriorityInherit>
						taskEXIT_CRITICAL();
 80022a4:	f000 fdf8 	bl	8002e98 <vPortExitCritical>
 80022a8:	e03b      	b.n	8002322 <xQueueGenericReceive+0x172>
				prvUnlockQueue( pxQueue );
 80022aa:	4620      	mov	r0, r4
 80022ac:	f7ff fd98 	bl	8001de0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80022b0:	f000 fac4 	bl	800283c <xTaskResumeAll>
 80022b4:	e009      	b.n	80022ca <xQueueGenericReceive+0x11a>
			prvUnlockQueue( pxQueue );
 80022b6:	4620      	mov	r0, r4
 80022b8:	f7ff fd92 	bl	8001de0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80022bc:	f000 fabe 	bl	800283c <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80022c0:	4620      	mov	r0, r4
 80022c2:	f7ff fd33 	bl	8001d2c <prvIsQueueEmpty>
 80022c6:	2800      	cmp	r0, #0
 80022c8:	d140      	bne.n	800234c <xQueueGenericReceive+0x19c>
		taskENTER_CRITICAL();
 80022ca:	f000 fdc3 	bl	8002e54 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80022ce:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80022d0:	2d00      	cmp	r5, #0
 80022d2:	d19c      	bne.n	800220e <xQueueGenericReceive+0x5e>
				if( xTicksToWait == ( TickType_t ) 0 )
 80022d4:	9b01      	ldr	r3, [sp, #4]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d0ce      	beq.n	8002278 <xQueueGenericReceive+0xc8>
				else if( xEntryTimeSet == pdFALSE )
 80022da:	2e00      	cmp	r6, #0
 80022dc:	d0d0      	beq.n	8002280 <xQueueGenericReceive+0xd0>
		taskEXIT_CRITICAL();
 80022de:	f000 fddb 	bl	8002e98 <vPortExitCritical>
		vTaskSuspendAll();
 80022e2:	f000 fa1b 	bl	800271c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80022e6:	f000 fdb5 	bl	8002e54 <vPortEnterCritical>
 80022ea:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80022ee:	b25b      	sxtb	r3, r3
 80022f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80022f4:	d0c9      	beq.n	800228a <xQueueGenericReceive+0xda>
 80022f6:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80022fa:	b25b      	sxtb	r3, r3
 80022fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002300:	d0c7      	beq.n	8002292 <xQueueGenericReceive+0xe2>
 8002302:	f000 fdc9 	bl	8002e98 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002306:	a901      	add	r1, sp, #4
 8002308:	a802      	add	r0, sp, #8
 800230a:	f000 fc2b 	bl	8002b64 <xTaskCheckForTimeOut>
 800230e:	2800      	cmp	r0, #0
 8002310:	d1d1      	bne.n	80022b6 <xQueueGenericReceive+0x106>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002312:	4620      	mov	r0, r4
 8002314:	f7ff fd0a 	bl	8001d2c <prvIsQueueEmpty>
 8002318:	2800      	cmp	r0, #0
 800231a:	d0c6      	beq.n	80022aa <xQueueGenericReceive+0xfa>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800231c:	6823      	ldr	r3, [r4, #0]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d0bb      	beq.n	800229a <xQueueGenericReceive+0xea>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002322:	9901      	ldr	r1, [sp, #4]
 8002324:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002328:	f000 fbac 	bl	8002a84 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800232c:	4620      	mov	r0, r4
 800232e:	f7ff fd57 	bl	8001de0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002332:	f000 fa83 	bl	800283c <xTaskResumeAll>
 8002336:	2800      	cmp	r0, #0
 8002338:	d1c7      	bne.n	80022ca <xQueueGenericReceive+0x11a>
					portYIELD_WITHIN_API();
 800233a:	4b05      	ldr	r3, [pc, #20]	; (8002350 <xQueueGenericReceive+0x1a0>)
 800233c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002340:	601a      	str	r2, [r3, #0]
 8002342:	f3bf 8f4f 	dsb	sy
 8002346:	f3bf 8f6f 	isb	sy
 800234a:	e7be      	b.n	80022ca <xQueueGenericReceive+0x11a>
				return errQUEUE_EMPTY;
 800234c:	2000      	movs	r0, #0
 800234e:	e77d      	b.n	800224c <xQueueGenericReceive+0x9c>
 8002350:	e000ed04 	.word	0xe000ed04

08002354 <xQueueReceiveFromISR>:
{
 8002354:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 8002358:	b160      	cbz	r0, 8002374 <xQueueReceiveFromISR+0x20>
 800235a:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800235c:	b999      	cbnz	r1, 8002386 <xQueueReceiveFromISR+0x32>
 800235e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002360:	b18b      	cbz	r3, 8002386 <xQueueReceiveFromISR+0x32>
 8002362:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002366:	f383 8811 	msr	BASEPRI, r3
 800236a:	f3bf 8f6f 	isb	sy
 800236e:	f3bf 8f4f 	dsb	sy
 8002372:	e7fe      	b.n	8002372 <xQueueReceiveFromISR+0x1e>
 8002374:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002378:	f383 8811 	msr	BASEPRI, r3
 800237c:	f3bf 8f6f 	isb	sy
 8002380:	f3bf 8f4f 	dsb	sy
 8002384:	e7fe      	b.n	8002384 <xQueueReceiveFromISR+0x30>
 8002386:	4617      	mov	r7, r2
 8002388:	4689      	mov	r9, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800238a:	f000 fe73 	bl	8003074 <vPortValidateInterruptPriority>
	__asm volatile
 800238e:	f3ef 8611 	mrs	r6, BASEPRI
 8002392:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002396:	f383 8811 	msr	BASEPRI, r3
 800239a:	f3bf 8f6f 	isb	sy
 800239e:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80023a2:	f8d4 8038 	ldr.w	r8, [r4, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80023a6:	f1b8 0f00 	cmp.w	r8, #0
 80023aa:	d01d      	beq.n	80023e8 <xQueueReceiveFromISR+0x94>
			const int8_t cRxLock = pxQueue->cRxLock;
 80023ac:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 80023b0:	b26d      	sxtb	r5, r5
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80023b2:	4649      	mov	r1, r9
 80023b4:	4620      	mov	r0, r4
 80023b6:	f7ff fd01 	bl	8001dbc <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 80023ba:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 80023be:	63a3      	str	r3, [r4, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 80023c0:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 80023c4:	d005      	beq.n	80023d2 <xQueueReceiveFromISR+0x7e>
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80023c6:	1c6b      	adds	r3, r5, #1
 80023c8:	b25b      	sxtb	r3, r3
 80023ca:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
			xReturn = pdPASS;
 80023ce:	2001      	movs	r0, #1
 80023d0:	e00b      	b.n	80023ea <xQueueReceiveFromISR+0x96>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80023d2:	6923      	ldr	r3, [r4, #16]
 80023d4:	b16b      	cbz	r3, 80023f2 <xQueueReceiveFromISR+0x9e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80023d6:	f104 0010 	add.w	r0, r4, #16
 80023da:	f000 fb6d 	bl	8002ab8 <xTaskRemoveFromEventList>
 80023de:	b150      	cbz	r0, 80023f6 <xQueueReceiveFromISR+0xa2>
						if( pxHigherPriorityTaskWoken != NULL )
 80023e0:	b15f      	cbz	r7, 80023fa <xQueueReceiveFromISR+0xa6>
							*pxHigherPriorityTaskWoken = pdTRUE;
 80023e2:	2001      	movs	r0, #1
 80023e4:	6038      	str	r0, [r7, #0]
 80023e6:	e000      	b.n	80023ea <xQueueReceiveFromISR+0x96>
			xReturn = pdFAIL;
 80023e8:	2000      	movs	r0, #0
	__asm volatile
 80023ea:	f386 8811 	msr	BASEPRI, r6
}
 80023ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			xReturn = pdPASS;
 80023f2:	2001      	movs	r0, #1
 80023f4:	e7f9      	b.n	80023ea <xQueueReceiveFromISR+0x96>
 80023f6:	2001      	movs	r0, #1
 80023f8:	e7f7      	b.n	80023ea <xQueueReceiveFromISR+0x96>
 80023fa:	2001      	movs	r0, #1
 80023fc:	e7f5      	b.n	80023ea <xQueueReceiveFromISR+0x96>
	...

08002400 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002400:	4b07      	ldr	r3, [pc, #28]	; (8002420 <prvResetNextTaskUnblockTime+0x20>)
 8002402:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	b133      	cbz	r3, 8002416 <prvResetNextTaskUnblockTime+0x16>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002408:	4b05      	ldr	r3, [pc, #20]	; (8002420 <prvResetNextTaskUnblockTime+0x20>)
 800240a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800240c:	68d2      	ldr	r2, [r2, #12]
 800240e:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002410:	6852      	ldr	r2, [r2, #4]
 8002412:	62da      	str	r2, [r3, #44]	; 0x2c
	}
}
 8002414:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
 8002416:	4b02      	ldr	r3, [pc, #8]	; (8002420 <prvResetNextTaskUnblockTime+0x20>)
 8002418:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800241c:	62da      	str	r2, [r3, #44]	; 0x2c
 800241e:	4770      	bx	lr
 8002420:	20000090 	.word	0x20000090

08002424 <prvDeleteTCB>:
	{
 8002424:	b510      	push	{r4, lr}
 8002426:	4604      	mov	r4, r0
			vPortFree( pxTCB->pxStack );
 8002428:	6b00      	ldr	r0, [r0, #48]	; 0x30
 800242a:	f000 ff19 	bl	8003260 <vPortFree>
			vPortFree( pxTCB );
 800242e:	4620      	mov	r0, r4
 8002430:	f000 ff16 	bl	8003260 <vPortFree>
	}
 8002434:	bd10      	pop	{r4, pc}

08002436 <prvInitialiseNewTask>:
{
 8002436:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800243a:	4680      	mov	r8, r0
 800243c:	4699      	mov	r9, r3
 800243e:	9d08      	ldr	r5, [sp, #32]
 8002440:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8002442:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8002444:	6b26      	ldr	r6, [r4, #48]	; 0x30
 8002446:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800244a:	3a01      	subs	r2, #1
 800244c:	eb06 0682 	add.w	r6, r6, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8002450:	f026 0607 	bic.w	r6, r6, #7
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002454:	2300      	movs	r3, #0
 8002456:	2b0f      	cmp	r3, #15
 8002458:	d807      	bhi.n	800246a <prvInitialiseNewTask+0x34>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800245a:	5cc8      	ldrb	r0, [r1, r3]
 800245c:	18e2      	adds	r2, r4, r3
 800245e:	f882 0034 	strb.w	r0, [r2, #52]	; 0x34
		if( pcName[ x ] == 0x00 )
 8002462:	5cca      	ldrb	r2, [r1, r3]
 8002464:	b10a      	cbz	r2, 800246a <prvInitialiseNewTask+0x34>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002466:	3301      	adds	r3, #1
 8002468:	e7f5      	b.n	8002456 <prvInitialiseNewTask+0x20>
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800246a:	2300      	movs	r3, #0
 800246c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002470:	2d06      	cmp	r5, #6
 8002472:	d900      	bls.n	8002476 <prvInitialiseNewTask+0x40>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002474:	2506      	movs	r5, #6
	pxNewTCB->uxPriority = uxPriority;
 8002476:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8002478:	6465      	str	r5, [r4, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800247a:	f04f 0a00 	mov.w	sl, #0
 800247e:	f8c4 a048 	str.w	sl, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002482:	1d20      	adds	r0, r4, #4
 8002484:	f7ff fc07 	bl	8001c96 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002488:	f104 0018 	add.w	r0, r4, #24
 800248c:	f7ff fc03 	bl	8001c96 <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002490:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002492:	f1c5 0507 	rsb	r5, r5, #7
 8002496:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002498:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
 800249a:	f8c4 a04c 	str.w	sl, [r4, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800249e:	f884 a050 	strb.w	sl, [r4, #80]	; 0x50
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80024a2:	464a      	mov	r2, r9
 80024a4:	4641      	mov	r1, r8
 80024a6:	4630      	mov	r0, r6
 80024a8:	f000 fca6 	bl	8002df8 <pxPortInitialiseStack>
 80024ac:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 80024ae:	b107      	cbz	r7, 80024b2 <prvInitialiseNewTask+0x7c>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80024b0:	603c      	str	r4, [r7, #0]
}
 80024b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

080024b8 <prvInitialiseTaskLists>:
{
 80024b8:	b570      	push	{r4, r5, r6, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80024ba:	2400      	movs	r4, #0
 80024bc:	e007      	b.n	80024ce <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80024be:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 80024c2:	0093      	lsls	r3, r2, #2
 80024c4:	4810      	ldr	r0, [pc, #64]	; (8002508 <prvInitialiseTaskLists+0x50>)
 80024c6:	4418      	add	r0, r3
 80024c8:	f7ff fbda 	bl	8001c80 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80024cc:	3401      	adds	r4, #1
 80024ce:	2c06      	cmp	r4, #6
 80024d0:	d9f5      	bls.n	80024be <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
 80024d2:	4c0e      	ldr	r4, [pc, #56]	; (800250c <prvInitialiseTaskLists+0x54>)
 80024d4:	f104 06bc 	add.w	r6, r4, #188	; 0xbc
 80024d8:	4630      	mov	r0, r6
 80024da:	f7ff fbd1 	bl	8001c80 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80024de:	f104 05d0 	add.w	r5, r4, #208	; 0xd0
 80024e2:	4628      	mov	r0, r5
 80024e4:	f7ff fbcc 	bl	8001c80 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80024e8:	f104 0014 	add.w	r0, r4, #20
 80024ec:	f7ff fbc8 	bl	8001c80 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 80024f0:	f104 00e4 	add.w	r0, r4, #228	; 0xe4
 80024f4:	f7ff fbc4 	bl	8001c80 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 80024f8:	4620      	mov	r0, r4
 80024fa:	f7ff fbc1 	bl	8001c80 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 80024fe:	62a6      	str	r6, [r4, #40]	; 0x28
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002500:	f8c4 50f8 	str.w	r5, [r4, #248]	; 0xf8
}
 8002504:	bd70      	pop	{r4, r5, r6, pc}
 8002506:	bf00      	nop
 8002508:	200000c0 	.word	0x200000c0
 800250c:	20000090 	.word	0x20000090

08002510 <prvAddNewTaskToReadyList>:
{
 8002510:	b538      	push	{r3, r4, r5, lr}
 8002512:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
 8002514:	f000 fc9e 	bl	8002e54 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8002518:	4b26      	ldr	r3, [pc, #152]	; (80025b4 <prvAddNewTaskToReadyList+0xa4>)
 800251a:	f8d3 20fc 	ldr.w	r2, [r3, #252]	; 0xfc
 800251e:	3201      	adds	r2, #1
 8002520:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
		if( pxCurrentTCB == NULL )
 8002524:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8002528:	b173      	cbz	r3, 8002548 <prvAddNewTaskToReadyList+0x38>
			if( xSchedulerRunning == pdFALSE )
 800252a:	4b22      	ldr	r3, [pc, #136]	; (80025b4 <prvAddNewTaskToReadyList+0xa4>)
 800252c:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8002530:	b98b      	cbnz	r3, 8002556 <prvAddNewTaskToReadyList+0x46>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002532:	4b20      	ldr	r3, [pc, #128]	; (80025b4 <prvAddNewTaskToReadyList+0xa4>)
 8002534:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8002538:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800253a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800253c:	429a      	cmp	r2, r3
 800253e:	d80a      	bhi.n	8002556 <prvAddNewTaskToReadyList+0x46>
					pxCurrentTCB = pxNewTCB;
 8002540:	4b1c      	ldr	r3, [pc, #112]	; (80025b4 <prvAddNewTaskToReadyList+0xa4>)
 8002542:	f8c3 5100 	str.w	r5, [r3, #256]	; 0x100
 8002546:	e006      	b.n	8002556 <prvAddNewTaskToReadyList+0x46>
			pxCurrentTCB = pxNewTCB;
 8002548:	4b1a      	ldr	r3, [pc, #104]	; (80025b4 <prvAddNewTaskToReadyList+0xa4>)
 800254a:	f8c3 5100 	str.w	r5, [r3, #256]	; 0x100
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800254e:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8002552:	2b01      	cmp	r3, #1
 8002554:	d02a      	beq.n	80025ac <prvAddNewTaskToReadyList+0x9c>
		uxTaskNumber++;
 8002556:	4c17      	ldr	r4, [pc, #92]	; (80025b4 <prvAddNewTaskToReadyList+0xa4>)
 8002558:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800255c:	3301      	adds	r3, #1
 800255e:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
		prvAddTaskToReadyList( pxNewTCB );
 8002562:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8002564:	2201      	movs	r2, #1
 8002566:	409a      	lsls	r2, r3
 8002568:	f8d4 110c 	ldr.w	r1, [r4, #268]	; 0x10c
 800256c:	430a      	orrs	r2, r1
 800256e:	f8c4 210c 	str.w	r2, [r4, #268]	; 0x10c
 8002572:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8002576:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800257a:	009a      	lsls	r2, r3, #2
 800257c:	1d29      	adds	r1, r5, #4
 800257e:	4410      	add	r0, r2
 8002580:	f7ff fb8c 	bl	8001c9c <vListInsertEnd>
	taskEXIT_CRITICAL();
 8002584:	f000 fc88 	bl	8002e98 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8002588:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
 800258c:	b16b      	cbz	r3, 80025aa <prvAddNewTaskToReadyList+0x9a>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800258e:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8002592:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002594:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8002596:	429a      	cmp	r2, r3
 8002598:	d207      	bcs.n	80025aa <prvAddNewTaskToReadyList+0x9a>
			taskYIELD_IF_USING_PREEMPTION();
 800259a:	4b07      	ldr	r3, [pc, #28]	; (80025b8 <prvAddNewTaskToReadyList+0xa8>)
 800259c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80025a0:	601a      	str	r2, [r3, #0]
 80025a2:	f3bf 8f4f 	dsb	sy
 80025a6:	f3bf 8f6f 	isb	sy
}
 80025aa:	bd38      	pop	{r3, r4, r5, pc}
				prvInitialiseTaskLists();
 80025ac:	f7ff ff84 	bl	80024b8 <prvInitialiseTaskLists>
 80025b0:	e7d1      	b.n	8002556 <prvAddNewTaskToReadyList+0x46>
 80025b2:	bf00      	nop
 80025b4:	20000090 	.word	0x20000090
 80025b8:	e000ed04 	.word	0xe000ed04

080025bc <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80025bc:	b570      	push	{r4, r5, r6, lr}
 80025be:	4604      	mov	r4, r0
 80025c0:	460e      	mov	r6, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80025c2:	4b1f      	ldr	r3, [pc, #124]	; (8002640 <prvAddCurrentTaskToDelayedList+0x84>)
 80025c4:	f8d3 5110 	ldr.w	r5, [r3, #272]	; 0x110
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80025c8:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
 80025cc:	3004      	adds	r0, #4
 80025ce:	f7ff fb8b 	bl	8001ce8 <uxListRemove>
 80025d2:	b960      	cbnz	r0, 80025ee <prvAddCurrentTaskToDelayedList+0x32>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80025d4:	4b1a      	ldr	r3, [pc, #104]	; (8002640 <prvAddCurrentTaskToDelayedList+0x84>)
 80025d6:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 80025da:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80025dc:	2201      	movs	r2, #1
 80025de:	fa02 f101 	lsl.w	r1, r2, r1
 80025e2:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 80025e6:	ea22 0201 	bic.w	r2, r2, r1
 80025ea:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80025ee:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 80025f2:	d012      	beq.n	800261a <prvAddCurrentTaskToDelayedList+0x5e>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 80025f4:	442c      	add	r4, r5

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80025f6:	4b12      	ldr	r3, [pc, #72]	; (8002640 <prvAddCurrentTaskToDelayedList+0x84>)
 80025f8:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80025fc:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 80025fe:	42a5      	cmp	r5, r4
 8002600:	d814      	bhi.n	800262c <prvAddCurrentTaskToDelayedList+0x70>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002602:	4d0f      	ldr	r5, [pc, #60]	; (8002640 <prvAddCurrentTaskToDelayedList+0x84>)
 8002604:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 8002606:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
 800260a:	3104      	adds	r1, #4
 800260c:	f7ff fb52 	bl	8001cb4 <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
 8002610:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8002612:	42a3      	cmp	r3, r4
 8002614:	d912      	bls.n	800263c <prvAddCurrentTaskToDelayedList+0x80>
				{
					xNextTaskUnblockTime = xTimeToWake;
 8002616:	62ec      	str	r4, [r5, #44]	; 0x2c

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8002618:	e010      	b.n	800263c <prvAddCurrentTaskToDelayedList+0x80>
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800261a:	2e00      	cmp	r6, #0
 800261c:	d0ea      	beq.n	80025f4 <prvAddCurrentTaskToDelayedList+0x38>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800261e:	4808      	ldr	r0, [pc, #32]	; (8002640 <prvAddCurrentTaskToDelayedList+0x84>)
 8002620:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8002624:	3104      	adds	r1, #4
 8002626:	f7ff fb39 	bl	8001c9c <vListInsertEnd>
 800262a:	e007      	b.n	800263c <prvAddCurrentTaskToDelayedList+0x80>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800262c:	4b04      	ldr	r3, [pc, #16]	; (8002640 <prvAddCurrentTaskToDelayedList+0x84>)
 800262e:	f8d3 00f8 	ldr.w	r0, [r3, #248]	; 0xf8
 8002632:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
 8002636:	3104      	adds	r1, #4
 8002638:	f7ff fb3c 	bl	8001cb4 <vListInsert>
}
 800263c:	bd70      	pop	{r4, r5, r6, pc}
 800263e:	bf00      	nop
 8002640:	20000090 	.word	0x20000090

08002644 <xTaskCreate>:
	{
 8002644:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002648:	b085      	sub	sp, #20
 800264a:	4607      	mov	r7, r0
 800264c:	4688      	mov	r8, r1
 800264e:	4615      	mov	r5, r2
 8002650:	4699      	mov	r9, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002652:	0090      	lsls	r0, r2, #2
 8002654:	f000 fd8a 	bl	800316c <pvPortMalloc>
			if( pxStack != NULL )
 8002658:	b1f8      	cbz	r0, 800269a <xTaskCreate+0x56>
 800265a:	4606      	mov	r6, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800265c:	2054      	movs	r0, #84	; 0x54
 800265e:	f000 fd85 	bl	800316c <pvPortMalloc>
				if( pxNewTCB != NULL )
 8002662:	4604      	mov	r4, r0
 8002664:	b1a8      	cbz	r0, 8002692 <xTaskCreate+0x4e>
					pxNewTCB->pxStack = pxStack;
 8002666:	6306      	str	r6, [r0, #48]	; 0x30
		if( pxNewTCB != NULL )
 8002668:	b1d4      	cbz	r4, 80026a0 <xTaskCreate+0x5c>
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800266a:	2300      	movs	r3, #0
 800266c:	9303      	str	r3, [sp, #12]
 800266e:	9402      	str	r4, [sp, #8]
 8002670:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002672:	9301      	str	r3, [sp, #4]
 8002674:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002676:	9300      	str	r3, [sp, #0]
 8002678:	464b      	mov	r3, r9
 800267a:	462a      	mov	r2, r5
 800267c:	4641      	mov	r1, r8
 800267e:	4638      	mov	r0, r7
 8002680:	f7ff fed9 	bl	8002436 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002684:	4620      	mov	r0, r4
 8002686:	f7ff ff43 	bl	8002510 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800268a:	2001      	movs	r0, #1
	}
 800268c:	b005      	add	sp, #20
 800268e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 8002692:	4630      	mov	r0, r6
 8002694:	f000 fde4 	bl	8003260 <vPortFree>
 8002698:	e7e6      	b.n	8002668 <xTaskCreate+0x24>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800269a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800269e:	e7f5      	b.n	800268c <xTaskCreate+0x48>
 80026a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		return xReturn;
 80026a4:	e7f2      	b.n	800268c <xTaskCreate+0x48>
	...

080026a8 <vTaskStartScheduler>:
{
 80026a8:	b500      	push	{lr}
 80026aa:	b083      	sub	sp, #12
		xReturn = xTaskCreate(	prvIdleTask,
 80026ac:	4b17      	ldr	r3, [pc, #92]	; (800270c <vTaskStartScheduler+0x64>)
 80026ae:	9301      	str	r3, [sp, #4]
 80026b0:	2300      	movs	r3, #0
 80026b2:	9300      	str	r3, [sp, #0]
 80026b4:	2280      	movs	r2, #128	; 0x80
 80026b6:	4916      	ldr	r1, [pc, #88]	; (8002710 <vTaskStartScheduler+0x68>)
 80026b8:	4816      	ldr	r0, [pc, #88]	; (8002714 <vTaskStartScheduler+0x6c>)
 80026ba:	f7ff ffc3 	bl	8002644 <xTaskCreate>
	if( xReturn == pdPASS )
 80026be:	2801      	cmp	r0, #1
 80026c0:	d005      	beq.n	80026ce <vTaskStartScheduler+0x26>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80026c2:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80026c6:	d017      	beq.n	80026f8 <vTaskStartScheduler+0x50>
}
 80026c8:	b003      	add	sp, #12
 80026ca:	f85d fb04 	ldr.w	pc, [sp], #4
	__asm volatile
 80026ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026d2:	f383 8811 	msr	BASEPRI, r3
 80026d6:	f3bf 8f6f 	isb	sy
 80026da:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 80026de:	4b0e      	ldr	r3, [pc, #56]	; (8002718 <vTaskStartScheduler+0x70>)
 80026e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80026e4:	62da      	str	r2, [r3, #44]	; 0x2c
		xSchedulerRunning = pdTRUE;
 80026e6:	2201      	movs	r2, #1
 80026e8:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
		xTickCount = ( TickType_t ) 0U;
 80026ec:	2200      	movs	r2, #0
 80026ee:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
		if( xPortStartScheduler() != pdFALSE )
 80026f2:	f000 fc4b 	bl	8002f8c <xPortStartScheduler>
 80026f6:	e7e7      	b.n	80026c8 <vTaskStartScheduler+0x20>
 80026f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026fc:	f383 8811 	msr	BASEPRI, r3
 8002700:	f3bf 8f6f 	isb	sy
 8002704:	f3bf 8f4f 	dsb	sy
 8002708:	e7fe      	b.n	8002708 <vTaskStartScheduler+0x60>
 800270a:	bf00      	nop
 800270c:	200001ac 	.word	0x200001ac
 8002710:	0800419c 	.word	0x0800419c
 8002714:	080029cd 	.word	0x080029cd
 8002718:	20000090 	.word	0x20000090

0800271c <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 800271c:	4a03      	ldr	r2, [pc, #12]	; (800272c <vTaskSuspendAll+0x10>)
 800271e:	f8d2 3118 	ldr.w	r3, [r2, #280]	; 0x118
 8002722:	3301      	adds	r3, #1
 8002724:	f8c2 3118 	str.w	r3, [r2, #280]	; 0x118
}
 8002728:	4770      	bx	lr
 800272a:	bf00      	nop
 800272c:	20000090 	.word	0x20000090

08002730 <xTaskIncrementTick>:
{
 8002730:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002734:	4b40      	ldr	r3, [pc, #256]	; (8002838 <xTaskIncrementTick+0x108>)
 8002736:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 800273a:	2b00      	cmp	r3, #0
 800273c:	d16c      	bne.n	8002818 <xTaskIncrementTick+0xe8>
		const TickType_t xConstTickCount = xTickCount + 1;
 800273e:	4b3e      	ldr	r3, [pc, #248]	; (8002838 <xTaskIncrementTick+0x108>)
 8002740:	f8d3 5110 	ldr.w	r5, [r3, #272]	; 0x110
 8002744:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 8002746:	f8c3 5110 	str.w	r5, [r3, #272]	; 0x110
		if( xConstTickCount == ( TickType_t ) 0U )
 800274a:	b9cd      	cbnz	r5, 8002780 <xTaskIncrementTick+0x50>
			taskSWITCH_DELAYED_LISTS();
 800274c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	b143      	cbz	r3, 8002764 <xTaskIncrementTick+0x34>
 8002752:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002756:	f383 8811 	msr	BASEPRI, r3
 800275a:	f3bf 8f6f 	isb	sy
 800275e:	f3bf 8f4f 	dsb	sy
 8002762:	e7fe      	b.n	8002762 <xTaskIncrementTick+0x32>
 8002764:	4b34      	ldr	r3, [pc, #208]	; (8002838 <xTaskIncrementTick+0x108>)
 8002766:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002768:	f8d3 10f8 	ldr.w	r1, [r3, #248]	; 0xf8
 800276c:	6299      	str	r1, [r3, #40]	; 0x28
 800276e:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
 8002772:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
 8002776:	3201      	adds	r2, #1
 8002778:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
 800277c:	f7ff fe40 	bl	8002400 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002780:	4b2d      	ldr	r3, [pc, #180]	; (8002838 <xTaskIncrementTick+0x108>)
 8002782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002784:	42ab      	cmp	r3, r5
 8002786:	d93d      	bls.n	8002804 <xTaskIncrementTick+0xd4>
BaseType_t xSwitchRequired = pdFALSE;
 8002788:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800278a:	4a2b      	ldr	r2, [pc, #172]	; (8002838 <xTaskIncrementTick+0x108>)
 800278c:	f8d2 3100 	ldr.w	r3, [r2, #256]	; 0x100
 8002790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002792:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002796:	0099      	lsls	r1, r3, #2
 8002798:	440a      	add	r2, r1
 800279a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800279c:	2b01      	cmp	r3, #1
 800279e:	d942      	bls.n	8002826 <xTaskIncrementTick+0xf6>
				xSwitchRequired = pdTRUE;
 80027a0:	2401      	movs	r4, #1
 80027a2:	e040      	b.n	8002826 <xTaskIncrementTick+0xf6>
							xSwitchRequired = pdTRUE;
 80027a4:	2401      	movs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80027a6:	4b24      	ldr	r3, [pc, #144]	; (8002838 <xTaskIncrementTick+0x108>)
 80027a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	b363      	cbz	r3, 8002808 <xTaskIncrementTick+0xd8>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80027ae:	4b22      	ldr	r3, [pc, #136]	; (8002838 <xTaskIncrementTick+0x108>)
 80027b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027b2:	68db      	ldr	r3, [r3, #12]
 80027b4:	68de      	ldr	r6, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80027b6:	6873      	ldr	r3, [r6, #4]
					if( xConstTickCount < xItemValue )
 80027b8:	429d      	cmp	r5, r3
 80027ba:	d32a      	bcc.n	8002812 <xTaskIncrementTick+0xe2>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80027bc:	f106 0804 	add.w	r8, r6, #4
 80027c0:	4640      	mov	r0, r8
 80027c2:	f7ff fa91 	bl	8001ce8 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80027c6:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 80027c8:	b11b      	cbz	r3, 80027d2 <xTaskIncrementTick+0xa2>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80027ca:	f106 0018 	add.w	r0, r6, #24
 80027ce:	f7ff fa8b 	bl	8001ce8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80027d2:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 80027d4:	2201      	movs	r2, #1
 80027d6:	409a      	lsls	r2, r3
 80027d8:	4f17      	ldr	r7, [pc, #92]	; (8002838 <xTaskIncrementTick+0x108>)
 80027da:	f8d7 110c 	ldr.w	r1, [r7, #268]	; 0x10c
 80027de:	430a      	orrs	r2, r1
 80027e0:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 80027e4:	f107 0030 	add.w	r0, r7, #48	; 0x30
 80027e8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80027ec:	009a      	lsls	r2, r3, #2
 80027ee:	4641      	mov	r1, r8
 80027f0:	4410      	add	r0, r2
 80027f2:	f7ff fa53 	bl	8001c9c <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80027f6:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 80027f8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80027fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027fe:	429a      	cmp	r2, r3
 8002800:	d2d0      	bcs.n	80027a4 <xTaskIncrementTick+0x74>
 8002802:	e7d0      	b.n	80027a6 <xTaskIncrementTick+0x76>
BaseType_t xSwitchRequired = pdFALSE;
 8002804:	2400      	movs	r4, #0
 8002806:	e7ce      	b.n	80027a6 <xTaskIncrementTick+0x76>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002808:	4b0b      	ldr	r3, [pc, #44]	; (8002838 <xTaskIncrementTick+0x108>)
 800280a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800280e:	62da      	str	r2, [r3, #44]	; 0x2c
					break;
 8002810:	e7bb      	b.n	800278a <xTaskIncrementTick+0x5a>
						xNextTaskUnblockTime = xItemValue;
 8002812:	4a09      	ldr	r2, [pc, #36]	; (8002838 <xTaskIncrementTick+0x108>)
 8002814:	62d3      	str	r3, [r2, #44]	; 0x2c
						break;
 8002816:	e7b8      	b.n	800278a <xTaskIncrementTick+0x5a>
		++uxPendedTicks;
 8002818:	4a07      	ldr	r2, [pc, #28]	; (8002838 <xTaskIncrementTick+0x108>)
 800281a:	f8d2 3124 	ldr.w	r3, [r2, #292]	; 0x124
 800281e:	3301      	adds	r3, #1
 8002820:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
BaseType_t xSwitchRequired = pdFALSE;
 8002824:	2400      	movs	r4, #0
		if( xYieldPending != pdFALSE )
 8002826:	4b04      	ldr	r3, [pc, #16]	; (8002838 <xTaskIncrementTick+0x108>)
 8002828:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 800282c:	b103      	cbz	r3, 8002830 <xTaskIncrementTick+0x100>
			xSwitchRequired = pdTRUE;
 800282e:	2401      	movs	r4, #1
}
 8002830:	4620      	mov	r0, r4
 8002832:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002836:	bf00      	nop
 8002838:	20000090 	.word	0x20000090

0800283c <xTaskResumeAll>:
	configASSERT( uxSchedulerSuspended );
 800283c:	4b39      	ldr	r3, [pc, #228]	; (8002924 <xTaskResumeAll+0xe8>)
 800283e:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8002842:	b943      	cbnz	r3, 8002856 <xTaskResumeAll+0x1a>
 8002844:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002848:	f383 8811 	msr	BASEPRI, r3
 800284c:	f3bf 8f6f 	isb	sy
 8002850:	f3bf 8f4f 	dsb	sy
 8002854:	e7fe      	b.n	8002854 <xTaskResumeAll+0x18>
{
 8002856:	b570      	push	{r4, r5, r6, lr}
	taskENTER_CRITICAL();
 8002858:	f000 fafc 	bl	8002e54 <vPortEnterCritical>
		--uxSchedulerSuspended;
 800285c:	4b31      	ldr	r3, [pc, #196]	; (8002924 <xTaskResumeAll+0xe8>)
 800285e:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
 8002862:	3a01      	subs	r2, #1
 8002864:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002868:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 800286c:	2b00      	cmp	r3, #0
 800286e:	d154      	bne.n	800291a <xTaskResumeAll+0xde>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002870:	4b2c      	ldr	r3, [pc, #176]	; (8002924 <xTaskResumeAll+0xe8>)
 8002872:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8002876:	b923      	cbnz	r3, 8002882 <xTaskResumeAll+0x46>
BaseType_t xAlreadyYielded = pdFALSE;
 8002878:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800287a:	f000 fb0d 	bl	8002e98 <vPortExitCritical>
}
 800287e:	4620      	mov	r0, r4
 8002880:	bd70      	pop	{r4, r5, r6, pc}
TCB_t *pxTCB = NULL;
 8002882:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002884:	4b27      	ldr	r3, [pc, #156]	; (8002924 <xTaskResumeAll+0xe8>)
 8002886:	695b      	ldr	r3, [r3, #20]
 8002888:	b32b      	cbz	r3, 80028d6 <xTaskResumeAll+0x9a>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800288a:	4d26      	ldr	r5, [pc, #152]	; (8002924 <xTaskResumeAll+0xe8>)
 800288c:	6a2b      	ldr	r3, [r5, #32]
 800288e:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002890:	f104 0018 	add.w	r0, r4, #24
 8002894:	f7ff fa28 	bl	8001ce8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002898:	1d26      	adds	r6, r4, #4
 800289a:	4630      	mov	r0, r6
 800289c:	f7ff fa24 	bl	8001ce8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80028a0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80028a2:	2201      	movs	r2, #1
 80028a4:	409a      	lsls	r2, r3
 80028a6:	f8d5 110c 	ldr.w	r1, [r5, #268]	; 0x10c
 80028aa:	430a      	orrs	r2, r1
 80028ac:	f8c5 210c 	str.w	r2, [r5, #268]	; 0x10c
 80028b0:	f105 0030 	add.w	r0, r5, #48	; 0x30
 80028b4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80028b8:	009a      	lsls	r2, r3, #2
 80028ba:	4631      	mov	r1, r6
 80028bc:	4410      	add	r0, r2
 80028be:	f7ff f9ed 	bl	8001c9c <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80028c2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80028c4:	f8d5 3100 	ldr.w	r3, [r5, #256]	; 0x100
 80028c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028ca:	429a      	cmp	r2, r3
 80028cc:	d3da      	bcc.n	8002884 <xTaskResumeAll+0x48>
						xYieldPending = pdTRUE;
 80028ce:	2201      	movs	r2, #1
 80028d0:	f8c5 2128 	str.w	r2, [r5, #296]	; 0x128
 80028d4:	e7d6      	b.n	8002884 <xTaskResumeAll+0x48>
				if( pxTCB != NULL )
 80028d6:	b10c      	cbz	r4, 80028dc <xTaskResumeAll+0xa0>
					prvResetNextTaskUnblockTime();
 80028d8:	f7ff fd92 	bl	8002400 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80028dc:	4b11      	ldr	r3, [pc, #68]	; (8002924 <xTaskResumeAll+0xe8>)
 80028de:	f8d3 4124 	ldr.w	r4, [r3, #292]	; 0x124
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80028e2:	b164      	cbz	r4, 80028fe <xTaskResumeAll+0xc2>
							if( xTaskIncrementTick() != pdFALSE )
 80028e4:	f7ff ff24 	bl	8002730 <xTaskIncrementTick>
 80028e8:	b118      	cbz	r0, 80028f2 <xTaskResumeAll+0xb6>
								xYieldPending = pdTRUE;
 80028ea:	4b0e      	ldr	r3, [pc, #56]	; (8002924 <xTaskResumeAll+0xe8>)
 80028ec:	2201      	movs	r2, #1
 80028ee:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80028f2:	3c01      	subs	r4, #1
 80028f4:	d1f6      	bne.n	80028e4 <xTaskResumeAll+0xa8>
						uxPendedTicks = 0;
 80028f6:	4b0b      	ldr	r3, [pc, #44]	; (8002924 <xTaskResumeAll+0xe8>)
 80028f8:	2200      	movs	r2, #0
 80028fa:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
				if( xYieldPending != pdFALSE )
 80028fe:	4b09      	ldr	r3, [pc, #36]	; (8002924 <xTaskResumeAll+0xe8>)
 8002900:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 8002904:	b15b      	cbz	r3, 800291e <xTaskResumeAll+0xe2>
					taskYIELD_IF_USING_PREEMPTION();
 8002906:	4b08      	ldr	r3, [pc, #32]	; (8002928 <xTaskResumeAll+0xec>)
 8002908:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800290c:	601a      	str	r2, [r3, #0]
 800290e:	f3bf 8f4f 	dsb	sy
 8002912:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8002916:	2401      	movs	r4, #1
 8002918:	e7af      	b.n	800287a <xTaskResumeAll+0x3e>
BaseType_t xAlreadyYielded = pdFALSE;
 800291a:	2400      	movs	r4, #0
 800291c:	e7ad      	b.n	800287a <xTaskResumeAll+0x3e>
 800291e:	2400      	movs	r4, #0
 8002920:	e7ab      	b.n	800287a <xTaskResumeAll+0x3e>
 8002922:	bf00      	nop
 8002924:	20000090 	.word	0x20000090
 8002928:	e000ed04 	.word	0xe000ed04

0800292c <vTaskDelay>:
	{
 800292c:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 800292e:	b1b0      	cbz	r0, 800295e <vTaskDelay+0x32>
 8002930:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
 8002932:	4b0f      	ldr	r3, [pc, #60]	; (8002970 <vTaskDelay+0x44>)
 8002934:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8002938:	b143      	cbz	r3, 800294c <vTaskDelay+0x20>
 800293a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800293e:	f383 8811 	msr	BASEPRI, r3
 8002942:	f3bf 8f6f 	isb	sy
 8002946:	f3bf 8f4f 	dsb	sy
 800294a:	e7fe      	b.n	800294a <vTaskDelay+0x1e>
			vTaskSuspendAll();
 800294c:	f7ff fee6 	bl	800271c <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002950:	2100      	movs	r1, #0
 8002952:	4620      	mov	r0, r4
 8002954:	f7ff fe32 	bl	80025bc <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8002958:	f7ff ff70 	bl	800283c <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 800295c:	b938      	cbnz	r0, 800296e <vTaskDelay+0x42>
			portYIELD_WITHIN_API();
 800295e:	4b05      	ldr	r3, [pc, #20]	; (8002974 <vTaskDelay+0x48>)
 8002960:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002964:	601a      	str	r2, [r3, #0]
 8002966:	f3bf 8f4f 	dsb	sy
 800296a:	f3bf 8f6f 	isb	sy
	}
 800296e:	bd10      	pop	{r4, pc}
 8002970:	20000090 	.word	0x20000090
 8002974:	e000ed04 	.word	0xe000ed04

08002978 <prvCheckTasksWaitingTermination>:
{
 8002978:	b538      	push	{r3, r4, r5, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800297a:	4b13      	ldr	r3, [pc, #76]	; (80029c8 <prvCheckTasksWaitingTermination+0x50>)
 800297c:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8002980:	b30b      	cbz	r3, 80029c6 <prvCheckTasksWaitingTermination+0x4e>
			vTaskSuspendAll();
 8002982:	f7ff fecb 	bl	800271c <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8002986:	4b10      	ldr	r3, [pc, #64]	; (80029c8 <prvCheckTasksWaitingTermination+0x50>)
 8002988:	f8d3 40e4 	ldr.w	r4, [r3, #228]	; 0xe4
			( void ) xTaskResumeAll();
 800298c:	f7ff ff56 	bl	800283c <xTaskResumeAll>
			if( xListIsEmpty == pdFALSE )
 8002990:	2c00      	cmp	r4, #0
 8002992:	d0f2      	beq.n	800297a <prvCheckTasksWaitingTermination+0x2>
				taskENTER_CRITICAL();
 8002994:	f000 fa5e 	bl	8002e54 <vPortEnterCritical>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8002998:	4c0b      	ldr	r4, [pc, #44]	; (80029c8 <prvCheckTasksWaitingTermination+0x50>)
 800299a:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
 800299e:	68dd      	ldr	r5, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80029a0:	1d28      	adds	r0, r5, #4
 80029a2:	f7ff f9a1 	bl	8001ce8 <uxListRemove>
					--uxCurrentNumberOfTasks;
 80029a6:	f8d4 30fc 	ldr.w	r3, [r4, #252]	; 0xfc
 80029aa:	3b01      	subs	r3, #1
 80029ac:	f8c4 30fc 	str.w	r3, [r4, #252]	; 0xfc
					--uxDeletedTasksWaitingCleanUp;
 80029b0:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 80029b4:	3b01      	subs	r3, #1
 80029b6:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
				taskEXIT_CRITICAL();
 80029ba:	f000 fa6d 	bl	8002e98 <vPortExitCritical>
				prvDeleteTCB( pxTCB );
 80029be:	4628      	mov	r0, r5
 80029c0:	f7ff fd30 	bl	8002424 <prvDeleteTCB>
 80029c4:	e7d9      	b.n	800297a <prvCheckTasksWaitingTermination+0x2>
}
 80029c6:	bd38      	pop	{r3, r4, r5, pc}
 80029c8:	20000090 	.word	0x20000090

080029cc <prvIdleTask>:
{
 80029cc:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
 80029ce:	f7ff ffd3 	bl	8002978 <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80029d2:	4b06      	ldr	r3, [pc, #24]	; (80029ec <prvIdleTask+0x20>)
 80029d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029d6:	2b01      	cmp	r3, #1
 80029d8:	d9f9      	bls.n	80029ce <prvIdleTask+0x2>
				taskYIELD();
 80029da:	4b05      	ldr	r3, [pc, #20]	; (80029f0 <prvIdleTask+0x24>)
 80029dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80029e0:	601a      	str	r2, [r3, #0]
 80029e2:	f3bf 8f4f 	dsb	sy
 80029e6:	f3bf 8f6f 	isb	sy
 80029ea:	e7f0      	b.n	80029ce <prvIdleTask+0x2>
 80029ec:	20000090 	.word	0x20000090
 80029f0:	e000ed04 	.word	0xe000ed04

080029f4 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80029f4:	4b22      	ldr	r3, [pc, #136]	; (8002a80 <vTaskSwitchContext+0x8c>)
 80029f6:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 80029fa:	b123      	cbz	r3, 8002a06 <vTaskSwitchContext+0x12>
		xYieldPending = pdTRUE;
 80029fc:	4b20      	ldr	r3, [pc, #128]	; (8002a80 <vTaskSwitchContext+0x8c>)
 80029fe:	2201      	movs	r2, #1
 8002a00:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
 8002a04:	4770      	bx	lr
		xYieldPending = pdFALSE;
 8002a06:	4a1e      	ldr	r2, [pc, #120]	; (8002a80 <vTaskSwitchContext+0x8c>)
 8002a08:	2300      	movs	r3, #0
 8002a0a:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8002a0e:	f8d2 310c 	ldr.w	r3, [r2, #268]	; 0x10c
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 8002a12:	fab3 f383 	clz	r3, r3
 8002a16:	b2db      	uxtb	r3, r3
 8002a18:	f1c3 031f 	rsb	r3, r3, #31
 8002a1c:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 8002a20:	0081      	lsls	r1, r0, #2
 8002a22:	440a      	add	r2, r1
 8002a24:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002a26:	b942      	cbnz	r2, 8002a3a <vTaskSwitchContext+0x46>
	__asm volatile
 8002a28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a2c:	f383 8811 	msr	BASEPRI, r3
 8002a30:	f3bf 8f6f 	isb	sy
 8002a34:	f3bf 8f4f 	dsb	sy
 8002a38:	e7fe      	b.n	8002a38 <vTaskSwitchContext+0x44>
{
 8002a3a:	b410      	push	{r4}
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8002a3c:	4a10      	ldr	r2, [pc, #64]	; (8002a80 <vTaskSwitchContext+0x8c>)
 8002a3e:	0099      	lsls	r1, r3, #2
 8002a40:	18cc      	adds	r4, r1, r3
 8002a42:	00a0      	lsls	r0, r4, #2
 8002a44:	4410      	add	r0, r2
 8002a46:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8002a48:	6864      	ldr	r4, [r4, #4]
 8002a4a:	6344      	str	r4, [r0, #52]	; 0x34
 8002a4c:	3230      	adds	r2, #48	; 0x30
 8002a4e:	4419      	add	r1, r3
 8002a50:	0088      	lsls	r0, r1, #2
 8002a52:	3008      	adds	r0, #8
 8002a54:	4402      	add	r2, r0
 8002a56:	4294      	cmp	r4, r2
 8002a58:	d00b      	beq.n	8002a72 <vTaskSwitchContext+0x7e>
 8002a5a:	4909      	ldr	r1, [pc, #36]	; (8002a80 <vTaskSwitchContext+0x8c>)
 8002a5c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002a60:	009a      	lsls	r2, r3, #2
 8002a62:	440a      	add	r2, r1
 8002a64:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8002a66:	68db      	ldr	r3, [r3, #12]
 8002a68:	f8c1 3100 	str.w	r3, [r1, #256]	; 0x100
}
 8002a6c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002a70:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8002a72:	6861      	ldr	r1, [r4, #4]
 8002a74:	4802      	ldr	r0, [pc, #8]	; (8002a80 <vTaskSwitchContext+0x8c>)
 8002a76:	2214      	movs	r2, #20
 8002a78:	fb02 0203 	mla	r2, r2, r3, r0
 8002a7c:	6351      	str	r1, [r2, #52]	; 0x34
 8002a7e:	e7ec      	b.n	8002a5a <vTaskSwitchContext+0x66>
 8002a80:	20000090 	.word	0x20000090

08002a84 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 8002a84:	b940      	cbnz	r0, 8002a98 <vTaskPlaceOnEventList+0x14>
 8002a86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a8a:	f383 8811 	msr	BASEPRI, r3
 8002a8e:	f3bf 8f6f 	isb	sy
 8002a92:	f3bf 8f4f 	dsb	sy
 8002a96:	e7fe      	b.n	8002a96 <vTaskPlaceOnEventList+0x12>
{
 8002a98:	b510      	push	{r4, lr}
 8002a9a:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002a9c:	4b05      	ldr	r3, [pc, #20]	; (8002ab4 <vTaskPlaceOnEventList+0x30>)
 8002a9e:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
 8002aa2:	3118      	adds	r1, #24
 8002aa4:	f7ff f906 	bl	8001cb4 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002aa8:	2101      	movs	r1, #1
 8002aaa:	4620      	mov	r0, r4
 8002aac:	f7ff fd86 	bl	80025bc <prvAddCurrentTaskToDelayedList>
}
 8002ab0:	bd10      	pop	{r4, pc}
 8002ab2:	bf00      	nop
 8002ab4:	20000090 	.word	0x20000090

08002ab8 <xTaskRemoveFromEventList>:
{
 8002ab8:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8002aba:	68c3      	ldr	r3, [r0, #12]
 8002abc:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8002abe:	b944      	cbnz	r4, 8002ad2 <xTaskRemoveFromEventList+0x1a>
 8002ac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ac4:	f383 8811 	msr	BASEPRI, r3
 8002ac8:	f3bf 8f6f 	isb	sy
 8002acc:	f3bf 8f4f 	dsb	sy
 8002ad0:	e7fe      	b.n	8002ad0 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8002ad2:	f104 0518 	add.w	r5, r4, #24
 8002ad6:	4628      	mov	r0, r5
 8002ad8:	f7ff f906 	bl	8001ce8 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002adc:	4b15      	ldr	r3, [pc, #84]	; (8002b34 <xTaskRemoveFromEventList+0x7c>)
 8002ade:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8002ae2:	bb03      	cbnz	r3, 8002b26 <xTaskRemoveFromEventList+0x6e>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8002ae4:	1d25      	adds	r5, r4, #4
 8002ae6:	4628      	mov	r0, r5
 8002ae8:	f7ff f8fe 	bl	8001ce8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8002aec:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002aee:	2101      	movs	r1, #1
 8002af0:	4099      	lsls	r1, r3
 8002af2:	4a10      	ldr	r2, [pc, #64]	; (8002b34 <xTaskRemoveFromEventList+0x7c>)
 8002af4:	f8d2 010c 	ldr.w	r0, [r2, #268]	; 0x10c
 8002af8:	4301      	orrs	r1, r0
 8002afa:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
 8002afe:	3230      	adds	r2, #48	; 0x30
 8002b00:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002b04:	0098      	lsls	r0, r3, #2
 8002b06:	4629      	mov	r1, r5
 8002b08:	4410      	add	r0, r2
 8002b0a:	f7ff f8c7 	bl	8001c9c <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002b0e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002b10:	4b08      	ldr	r3, [pc, #32]	; (8002b34 <xTaskRemoveFromEventList+0x7c>)
 8002b12:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8002b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b18:	429a      	cmp	r2, r3
 8002b1a:	d909      	bls.n	8002b30 <xTaskRemoveFromEventList+0x78>
		xYieldPending = pdTRUE;
 8002b1c:	2001      	movs	r0, #1
 8002b1e:	4b05      	ldr	r3, [pc, #20]	; (8002b34 <xTaskRemoveFromEventList+0x7c>)
 8002b20:	f8c3 0128 	str.w	r0, [r3, #296]	; 0x128
}
 8002b24:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002b26:	4629      	mov	r1, r5
 8002b28:	4803      	ldr	r0, [pc, #12]	; (8002b38 <xTaskRemoveFromEventList+0x80>)
 8002b2a:	f7ff f8b7 	bl	8001c9c <vListInsertEnd>
 8002b2e:	e7ee      	b.n	8002b0e <xTaskRemoveFromEventList+0x56>
		xReturn = pdFALSE;
 8002b30:	2000      	movs	r0, #0
	return xReturn;
 8002b32:	e7f7      	b.n	8002b24 <xTaskRemoveFromEventList+0x6c>
 8002b34:	20000090 	.word	0x20000090
 8002b38:	200000a4 	.word	0x200000a4

08002b3c <vTaskSetTimeOutState>:
	configASSERT( pxTimeOut );
 8002b3c:	b138      	cbz	r0, 8002b4e <vTaskSetTimeOutState+0x12>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8002b3e:	4a08      	ldr	r2, [pc, #32]	; (8002b60 <vTaskSetTimeOutState+0x24>)
 8002b40:	f8d2 1120 	ldr.w	r1, [r2, #288]	; 0x120
 8002b44:	6001      	str	r1, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8002b46:	f8d2 2110 	ldr.w	r2, [r2, #272]	; 0x110
 8002b4a:	6042      	str	r2, [r0, #4]
}
 8002b4c:	4770      	bx	lr
 8002b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b52:	f383 8811 	msr	BASEPRI, r3
 8002b56:	f3bf 8f6f 	isb	sy
 8002b5a:	f3bf 8f4f 	dsb	sy
 8002b5e:	e7fe      	b.n	8002b5e <vTaskSetTimeOutState+0x22>
 8002b60:	20000090 	.word	0x20000090

08002b64 <xTaskCheckForTimeOut>:
{
 8002b64:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxTimeOut );
 8002b66:	b150      	cbz	r0, 8002b7e <xTaskCheckForTimeOut+0x1a>
 8002b68:	4604      	mov	r4, r0
	configASSERT( pxTicksToWait );
 8002b6a:	b989      	cbnz	r1, 8002b90 <xTaskCheckForTimeOut+0x2c>
 8002b6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b70:	f383 8811 	msr	BASEPRI, r3
 8002b74:	f3bf 8f6f 	isb	sy
 8002b78:	f3bf 8f4f 	dsb	sy
 8002b7c:	e7fe      	b.n	8002b7c <xTaskCheckForTimeOut+0x18>
 8002b7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b82:	f383 8811 	msr	BASEPRI, r3
 8002b86:	f3bf 8f6f 	isb	sy
 8002b8a:	f3bf 8f4f 	dsb	sy
 8002b8e:	e7fe      	b.n	8002b8e <xTaskCheckForTimeOut+0x2a>
 8002b90:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
 8002b92:	f000 f95f 	bl	8002e54 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8002b96:	4b12      	ldr	r3, [pc, #72]	; (8002be0 <xTaskCheckForTimeOut+0x7c>)
 8002b98:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
			if( *pxTicksToWait == portMAX_DELAY )
 8002b9c:	682b      	ldr	r3, [r5, #0]
 8002b9e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002ba2:	d019      	beq.n	8002bd8 <xTaskCheckForTimeOut+0x74>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8002ba4:	6820      	ldr	r0, [r4, #0]
 8002ba6:	4a0e      	ldr	r2, [pc, #56]	; (8002be0 <xTaskCheckForTimeOut+0x7c>)
 8002ba8:	f8d2 2120 	ldr.w	r2, [r2, #288]	; 0x120
 8002bac:	4290      	cmp	r0, r2
 8002bae:	d002      	beq.n	8002bb6 <xTaskCheckForTimeOut+0x52>
 8002bb0:	6862      	ldr	r2, [r4, #4]
 8002bb2:	428a      	cmp	r2, r1
 8002bb4:	d912      	bls.n	8002bdc <xTaskCheckForTimeOut+0x78>
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8002bb6:	6862      	ldr	r2, [r4, #4]
 8002bb8:	1a88      	subs	r0, r1, r2
 8002bba:	4283      	cmp	r3, r0
 8002bbc:	d804      	bhi.n	8002bc8 <xTaskCheckForTimeOut+0x64>
			xReturn = pdTRUE;
 8002bbe:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
 8002bc0:	f000 f96a 	bl	8002e98 <vPortExitCritical>
}
 8002bc4:	4620      	mov	r0, r4
 8002bc6:	bd38      	pop	{r3, r4, r5, pc}
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
 8002bc8:	1a52      	subs	r2, r2, r1
 8002bca:	4413      	add	r3, r2
 8002bcc:	602b      	str	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
 8002bce:	4620      	mov	r0, r4
 8002bd0:	f7ff ffb4 	bl	8002b3c <vTaskSetTimeOutState>
			xReturn = pdFALSE;
 8002bd4:	2400      	movs	r4, #0
 8002bd6:	e7f3      	b.n	8002bc0 <xTaskCheckForTimeOut+0x5c>
				xReturn = pdFALSE;
 8002bd8:	2400      	movs	r4, #0
 8002bda:	e7f1      	b.n	8002bc0 <xTaskCheckForTimeOut+0x5c>
			xReturn = pdTRUE;
 8002bdc:	2401      	movs	r4, #1
 8002bde:	e7ef      	b.n	8002bc0 <xTaskCheckForTimeOut+0x5c>
 8002be0:	20000090 	.word	0x20000090

08002be4 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8002be4:	4b02      	ldr	r3, [pc, #8]	; (8002bf0 <vTaskMissedYield+0xc>)
 8002be6:	2201      	movs	r2, #1
 8002be8:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 8002bec:	4770      	bx	lr
 8002bee:	bf00      	nop
 8002bf0:	20000090 	.word	0x20000090

08002bf4 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8002bf4:	4b06      	ldr	r3, [pc, #24]	; (8002c10 <xTaskGetSchedulerState+0x1c>)
 8002bf6:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8002bfa:	b13b      	cbz	r3, 8002c0c <xTaskGetSchedulerState+0x18>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002bfc:	4b04      	ldr	r3, [pc, #16]	; (8002c10 <xTaskGetSchedulerState+0x1c>)
 8002bfe:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8002c02:	b10b      	cbz	r3, 8002c08 <xTaskGetSchedulerState+0x14>
				xReturn = taskSCHEDULER_SUSPENDED;
 8002c04:	2000      	movs	r0, #0
	}
 8002c06:	4770      	bx	lr
				xReturn = taskSCHEDULER_RUNNING;
 8002c08:	2002      	movs	r0, #2
 8002c0a:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8002c0c:	2001      	movs	r0, #1
 8002c0e:	4770      	bx	lr
 8002c10:	20000090 	.word	0x20000090

08002c14 <vTaskPriorityInherit>:
		if( pxMutexHolder != NULL )
 8002c14:	2800      	cmp	r0, #0
 8002c16:	d04d      	beq.n	8002cb4 <vTaskPriorityInherit+0xa0>
	{
 8002c18:	b538      	push	{r3, r4, r5, lr}
 8002c1a:	4605      	mov	r5, r0
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 8002c1c:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8002c1e:	4926      	ldr	r1, [pc, #152]	; (8002cb8 <vTaskPriorityInherit+0xa4>)
 8002c20:	f8d1 1100 	ldr.w	r1, [r1, #256]	; 0x100
 8002c24:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8002c26:	428a      	cmp	r2, r1
 8002c28:	d216      	bcs.n	8002c58 <vTaskPriorityInherit+0x44>
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8002c2a:	6981      	ldr	r1, [r0, #24]
 8002c2c:	2900      	cmp	r1, #0
 8002c2e:	db06      	blt.n	8002c3e <vTaskPriorityInherit+0x2a>
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002c30:	4921      	ldr	r1, [pc, #132]	; (8002cb8 <vTaskPriorityInherit+0xa4>)
 8002c32:	f8d1 1100 	ldr.w	r1, [r1, #256]	; 0x100
 8002c36:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8002c38:	f1c1 0107 	rsb	r1, r1, #7
 8002c3c:	6181      	str	r1, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8002c3e:	6968      	ldr	r0, [r5, #20]
 8002c40:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002c44:	0091      	lsls	r1, r2, #2
 8002c46:	4a1d      	ldr	r2, [pc, #116]	; (8002cbc <vTaskPriorityInherit+0xa8>)
 8002c48:	440a      	add	r2, r1
 8002c4a:	4290      	cmp	r0, r2
 8002c4c:	d005      	beq.n	8002c5a <vTaskPriorityInherit+0x46>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8002c4e:	4a1a      	ldr	r2, [pc, #104]	; (8002cb8 <vTaskPriorityInherit+0xa4>)
 8002c50:	f8d2 2100 	ldr.w	r2, [r2, #256]	; 0x100
 8002c54:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002c56:	62ea      	str	r2, [r5, #44]	; 0x2c
	}
 8002c58:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002c5a:	1d2c      	adds	r4, r5, #4
 8002c5c:	4620      	mov	r0, r4
 8002c5e:	f7ff f843 	bl	8001ce8 <uxListRemove>
 8002c62:	b1a0      	cbz	r0, 8002c8e <vTaskPriorityInherit+0x7a>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8002c64:	4814      	ldr	r0, [pc, #80]	; (8002cb8 <vTaskPriorityInherit+0xa4>)
 8002c66:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8002c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c6c:	62eb      	str	r3, [r5, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 8002c6e:	2201      	movs	r2, #1
 8002c70:	409a      	lsls	r2, r3
 8002c72:	f8d0 110c 	ldr.w	r1, [r0, #268]	; 0x10c
 8002c76:	430a      	orrs	r2, r1
 8002c78:	f8c0 210c 	str.w	r2, [r0, #268]	; 0x10c
 8002c7c:	3030      	adds	r0, #48	; 0x30
 8002c7e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002c82:	009a      	lsls	r2, r3, #2
 8002c84:	4621      	mov	r1, r4
 8002c86:	4410      	add	r0, r2
 8002c88:	f7ff f808 	bl	8001c9c <vListInsertEnd>
	}
 8002c8c:	e7e4      	b.n	8002c58 <vTaskPriorityInherit+0x44>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8002c8e:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8002c90:	eb02 0382 	add.w	r3, r2, r2, lsl #2
 8002c94:	0099      	lsls	r1, r3, #2
 8002c96:	4b08      	ldr	r3, [pc, #32]	; (8002cb8 <vTaskPriorityInherit+0xa4>)
 8002c98:	440b      	add	r3, r1
 8002c9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d1e1      	bne.n	8002c64 <vTaskPriorityInherit+0x50>
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	4093      	lsls	r3, r2
 8002ca4:	4904      	ldr	r1, [pc, #16]	; (8002cb8 <vTaskPriorityInherit+0xa4>)
 8002ca6:	f8d1 210c 	ldr.w	r2, [r1, #268]	; 0x10c
 8002caa:	ea22 0203 	bic.w	r2, r2, r3
 8002cae:	f8c1 210c 	str.w	r2, [r1, #268]	; 0x10c
 8002cb2:	e7d7      	b.n	8002c64 <vTaskPriorityInherit+0x50>
 8002cb4:	4770      	bx	lr
 8002cb6:	bf00      	nop
 8002cb8:	20000090 	.word	0x20000090
 8002cbc:	200000c0 	.word	0x200000c0

08002cc0 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 8002cc0:	2800      	cmp	r0, #0
 8002cc2:	d04d      	beq.n	8002d60 <xTaskPriorityDisinherit+0xa0>
	{
 8002cc4:	b538      	push	{r3, r4, r5, lr}
 8002cc6:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
 8002cc8:	4a28      	ldr	r2, [pc, #160]	; (8002d6c <xTaskPriorityDisinherit+0xac>)
 8002cca:	f8d2 2100 	ldr.w	r2, [r2, #256]	; 0x100
 8002cce:	4282      	cmp	r2, r0
 8002cd0:	d008      	beq.n	8002ce4 <xTaskPriorityDisinherit+0x24>
 8002cd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cd6:	f383 8811 	msr	BASEPRI, r3
 8002cda:	f3bf 8f6f 	isb	sy
 8002cde:	f3bf 8f4f 	dsb	sy
 8002ce2:	e7fe      	b.n	8002ce2 <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 8002ce4:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8002ce6:	b942      	cbnz	r2, 8002cfa <xTaskPriorityDisinherit+0x3a>
 8002ce8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cec:	f383 8811 	msr	BASEPRI, r3
 8002cf0:	f3bf 8f6f 	isb	sy
 8002cf4:	f3bf 8f4f 	dsb	sy
 8002cf8:	e7fe      	b.n	8002cf8 <xTaskPriorityDisinherit+0x38>
			( pxTCB->uxMutexesHeld )--;
 8002cfa:	3a01      	subs	r2, #1
 8002cfc:	6482      	str	r2, [r0, #72]	; 0x48
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8002cfe:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8002d00:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8002d02:	4288      	cmp	r0, r1
 8002d04:	d02e      	beq.n	8002d64 <xTaskPriorityDisinherit+0xa4>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8002d06:	bb7a      	cbnz	r2, 8002d68 <xTaskPriorityDisinherit+0xa8>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002d08:	1d25      	adds	r5, r4, #4
 8002d0a:	4628      	mov	r0, r5
 8002d0c:	f7fe ffec 	bl	8001ce8 <uxListRemove>
 8002d10:	b978      	cbnz	r0, 8002d32 <xTaskPriorityDisinherit+0x72>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8002d12:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002d14:	4915      	ldr	r1, [pc, #84]	; (8002d6c <xTaskPriorityDisinherit+0xac>)
 8002d16:	2314      	movs	r3, #20
 8002d18:	fb03 1302 	mla	r3, r3, r2, r1
 8002d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d1e:	b943      	cbnz	r3, 8002d32 <xTaskPriorityDisinherit+0x72>
 8002d20:	2301      	movs	r3, #1
 8002d22:	fa03 f202 	lsl.w	r2, r3, r2
 8002d26:	f8d1 310c 	ldr.w	r3, [r1, #268]	; 0x10c
 8002d2a:	ea23 0302 	bic.w	r3, r3, r2
 8002d2e:	f8c1 310c 	str.w	r3, [r1, #268]	; 0x10c
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8002d32:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8002d34:	62e2      	str	r2, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002d36:	f1c2 0307 	rsb	r3, r2, #7
 8002d3a:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8002d3c:	2401      	movs	r4, #1
 8002d3e:	fa04 f102 	lsl.w	r1, r4, r2
 8002d42:	4b0a      	ldr	r3, [pc, #40]	; (8002d6c <xTaskPriorityDisinherit+0xac>)
 8002d44:	f8d3 010c 	ldr.w	r0, [r3, #268]	; 0x10c
 8002d48:	4301      	orrs	r1, r0
 8002d4a:	f8c3 110c 	str.w	r1, [r3, #268]	; 0x10c
 8002d4e:	3330      	adds	r3, #48	; 0x30
 8002d50:	4629      	mov	r1, r5
 8002d52:	2014      	movs	r0, #20
 8002d54:	fb00 3002 	mla	r0, r0, r2, r3
 8002d58:	f7fe ffa0 	bl	8001c9c <vListInsertEnd>
					xReturn = pdTRUE;
 8002d5c:	4620      	mov	r0, r4
	}
 8002d5e:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
 8002d60:	2000      	movs	r0, #0
	}
 8002d62:	4770      	bx	lr
	BaseType_t xReturn = pdFALSE;
 8002d64:	2000      	movs	r0, #0
 8002d66:	e7fa      	b.n	8002d5e <xTaskPriorityDisinherit+0x9e>
 8002d68:	2000      	movs	r0, #0
		return xReturn;
 8002d6a:	e7f8      	b.n	8002d5e <xTaskPriorityDisinherit+0x9e>
 8002d6c:	20000090 	.word	0x20000090

08002d70 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 8002d70:	4b06      	ldr	r3, [pc, #24]	; (8002d8c <pvTaskIncrementMutexHeldCount+0x1c>)
 8002d72:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8002d76:	b12b      	cbz	r3, 8002d84 <pvTaskIncrementMutexHeldCount+0x14>
			( pxCurrentTCB->uxMutexesHeld )++;
 8002d78:	4b04      	ldr	r3, [pc, #16]	; (8002d8c <pvTaskIncrementMutexHeldCount+0x1c>)
 8002d7a:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8002d7e:	6c93      	ldr	r3, [r2, #72]	; 0x48
 8002d80:	3301      	adds	r3, #1
 8002d82:	6493      	str	r3, [r2, #72]	; 0x48
		return pxCurrentTCB;
 8002d84:	4b01      	ldr	r3, [pc, #4]	; (8002d8c <pvTaskIncrementMutexHeldCount+0x1c>)
 8002d86:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
	}
 8002d8a:	4770      	bx	lr
 8002d8c:	20000090 	.word	0x20000090

08002d90 <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8002d90:	4b0b      	ldr	r3, [pc, #44]	; (8002dc0 <prvTaskExitError+0x30>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d98:	d008      	beq.n	8002dac <prvTaskExitError+0x1c>
 8002d9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d9e:	f383 8811 	msr	BASEPRI, r3
 8002da2:	f3bf 8f6f 	isb	sy
 8002da6:	f3bf 8f4f 	dsb	sy
 8002daa:	e7fe      	b.n	8002daa <prvTaskExitError+0x1a>
 8002dac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002db0:	f383 8811 	msr	BASEPRI, r3
 8002db4:	f3bf 8f6f 	isb	sy
 8002db8:	f3bf 8f4f 	dsb	sy
 8002dbc:	e7fe      	b.n	8002dbc <prvTaskExitError+0x2c>
 8002dbe:	bf00      	nop
 8002dc0:	20000008 	.word	0x20000008

08002dc4 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8002dc4:	4806      	ldr	r0, [pc, #24]	; (8002de0 <prvPortStartFirstTask+0x1c>)
 8002dc6:	6800      	ldr	r0, [r0, #0]
 8002dc8:	6800      	ldr	r0, [r0, #0]
 8002dca:	f380 8808 	msr	MSP, r0
 8002dce:	b662      	cpsie	i
 8002dd0:	b661      	cpsie	f
 8002dd2:	f3bf 8f4f 	dsb	sy
 8002dd6:	f3bf 8f6f 	isb	sy
 8002dda:	df00      	svc	0
 8002ddc:	bf00      	nop
 8002dde:	0000      	.short	0x0000
 8002de0:	e000ed08 	.word	0xe000ed08

08002de4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8002de4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8002df4 <vPortEnableVFP+0x10>
 8002de8:	6801      	ldr	r1, [r0, #0]
 8002dea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8002dee:	6001      	str	r1, [r0, #0]
 8002df0:	4770      	bx	lr
 8002df2:	0000      	.short	0x0000
 8002df4:	e000ed88 	.word	0xe000ed88

08002df8 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8002df8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002dfc:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8002e00:	f021 0101 	bic.w	r1, r1, #1
 8002e04:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8002e08:	4b05      	ldr	r3, [pc, #20]	; (8002e20 <pxPortInitialiseStack+0x28>)
 8002e0a:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8002e0e:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 8002e12:	f06f 0302 	mvn.w	r3, #2
 8002e16:	f840 3c24 	str.w	r3, [r0, #-36]
}
 8002e1a:	3844      	subs	r0, #68	; 0x44
 8002e1c:	4770      	bx	lr
 8002e1e:	bf00      	nop
 8002e20:	08002d91 	.word	0x08002d91
	...

08002e30 <SVC_Handler>:
	__asm volatile (
 8002e30:	4b07      	ldr	r3, [pc, #28]	; (8002e50 <pxCurrentTCBConst2>)
 8002e32:	6819      	ldr	r1, [r3, #0]
 8002e34:	6808      	ldr	r0, [r1, #0]
 8002e36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e3a:	f380 8809 	msr	PSP, r0
 8002e3e:	f3bf 8f6f 	isb	sy
 8002e42:	f04f 0000 	mov.w	r0, #0
 8002e46:	f380 8811 	msr	BASEPRI, r0
 8002e4a:	4770      	bx	lr
 8002e4c:	f3af 8000 	nop.w

08002e50 <pxCurrentTCBConst2>:
 8002e50:	20000190 	.word	0x20000190

08002e54 <vPortEnterCritical>:
 8002e54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e58:	f383 8811 	msr	BASEPRI, r3
 8002e5c:	f3bf 8f6f 	isb	sy
 8002e60:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8002e64:	4a0a      	ldr	r2, [pc, #40]	; (8002e90 <vPortEnterCritical+0x3c>)
 8002e66:	6813      	ldr	r3, [r2, #0]
 8002e68:	3301      	adds	r3, #1
 8002e6a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 8002e6c:	2b01      	cmp	r3, #1
 8002e6e:	d000      	beq.n	8002e72 <vPortEnterCritical+0x1e>
}
 8002e70:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002e72:	4b08      	ldr	r3, [pc, #32]	; (8002e94 <vPortEnterCritical+0x40>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f013 0fff 	tst.w	r3, #255	; 0xff
 8002e7a:	d0f9      	beq.n	8002e70 <vPortEnterCritical+0x1c>
 8002e7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e80:	f383 8811 	msr	BASEPRI, r3
 8002e84:	f3bf 8f6f 	isb	sy
 8002e88:	f3bf 8f4f 	dsb	sy
 8002e8c:	e7fe      	b.n	8002e8c <vPortEnterCritical+0x38>
 8002e8e:	bf00      	nop
 8002e90:	20000008 	.word	0x20000008
 8002e94:	e000ed04 	.word	0xe000ed04

08002e98 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8002e98:	4b09      	ldr	r3, [pc, #36]	; (8002ec0 <vPortExitCritical+0x28>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	b943      	cbnz	r3, 8002eb0 <vPortExitCritical+0x18>
 8002e9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ea2:	f383 8811 	msr	BASEPRI, r3
 8002ea6:	f3bf 8f6f 	isb	sy
 8002eaa:	f3bf 8f4f 	dsb	sy
 8002eae:	e7fe      	b.n	8002eae <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8002eb0:	3b01      	subs	r3, #1
 8002eb2:	4a03      	ldr	r2, [pc, #12]	; (8002ec0 <vPortExitCritical+0x28>)
 8002eb4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8002eb6:	b90b      	cbnz	r3, 8002ebc <vPortExitCritical+0x24>
	__asm volatile
 8002eb8:	f383 8811 	msr	BASEPRI, r3
}
 8002ebc:	4770      	bx	lr
 8002ebe:	bf00      	nop
 8002ec0:	20000008 	.word	0x20000008
	...

08002ed0 <PendSV_Handler>:
	__asm volatile
 8002ed0:	f3ef 8009 	mrs	r0, PSP
 8002ed4:	f3bf 8f6f 	isb	sy
 8002ed8:	4b15      	ldr	r3, [pc, #84]	; (8002f30 <pxCurrentTCBConst>)
 8002eda:	681a      	ldr	r2, [r3, #0]
 8002edc:	f01e 0f10 	tst.w	lr, #16
 8002ee0:	bf08      	it	eq
 8002ee2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002ee6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002eea:	6010      	str	r0, [r2, #0]
 8002eec:	f84d 3d04 	str.w	r3, [sp, #-4]!
 8002ef0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002ef4:	f380 8811 	msr	BASEPRI, r0
 8002ef8:	f3bf 8f4f 	dsb	sy
 8002efc:	f3bf 8f6f 	isb	sy
 8002f00:	f7ff fd78 	bl	80029f4 <vTaskSwitchContext>
 8002f04:	f04f 0000 	mov.w	r0, #0
 8002f08:	f380 8811 	msr	BASEPRI, r0
 8002f0c:	bc08      	pop	{r3}
 8002f0e:	6819      	ldr	r1, [r3, #0]
 8002f10:	6808      	ldr	r0, [r1, #0]
 8002f12:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f16:	f01e 0f10 	tst.w	lr, #16
 8002f1a:	bf08      	it	eq
 8002f1c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002f20:	f380 8809 	msr	PSP, r0
 8002f24:	f3bf 8f6f 	isb	sy
 8002f28:	4770      	bx	lr
 8002f2a:	bf00      	nop
 8002f2c:	f3af 8000 	nop.w

08002f30 <pxCurrentTCBConst>:
 8002f30:	20000190 	.word	0x20000190

08002f34 <xPortSysTickHandler>:
{
 8002f34:	b508      	push	{r3, lr}
	__asm volatile
 8002f36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f3a:	f383 8811 	msr	BASEPRI, r3
 8002f3e:	f3bf 8f6f 	isb	sy
 8002f42:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8002f46:	f7ff fbf3 	bl	8002730 <xTaskIncrementTick>
 8002f4a:	b118      	cbz	r0, 8002f54 <xPortSysTickHandler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002f4c:	4b03      	ldr	r3, [pc, #12]	; (8002f5c <xPortSysTickHandler+0x28>)
 8002f4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f52:	601a      	str	r2, [r3, #0]
	__asm volatile
 8002f54:	2300      	movs	r3, #0
 8002f56:	f383 8811 	msr	BASEPRI, r3
}
 8002f5a:	bd08      	pop	{r3, pc}
 8002f5c:	e000ed04 	.word	0xe000ed04

08002f60 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002f60:	4b06      	ldr	r3, [pc, #24]	; (8002f7c <vPortSetupTimerInterrupt+0x1c>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a06      	ldr	r2, [pc, #24]	; (8002f80 <vPortSetupTimerInterrupt+0x20>)
 8002f66:	fba2 2303 	umull	r2, r3, r2, r3
 8002f6a:	099b      	lsrs	r3, r3, #6
 8002f6c:	3b01      	subs	r3, #1
 8002f6e:	4a05      	ldr	r2, [pc, #20]	; (8002f84 <vPortSetupTimerInterrupt+0x24>)
 8002f70:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002f72:	4b05      	ldr	r3, [pc, #20]	; (8002f88 <vPortSetupTimerInterrupt+0x28>)
 8002f74:	2207      	movs	r2, #7
 8002f76:	601a      	str	r2, [r3, #0]
}
 8002f78:	4770      	bx	lr
 8002f7a:	bf00      	nop
 8002f7c:	2000000c 	.word	0x2000000c
 8002f80:	10624dd3 	.word	0x10624dd3
 8002f84:	e000e014 	.word	0xe000e014
 8002f88:	e000e010 	.word	0xe000e010

08002f8c <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002f8c:	4b31      	ldr	r3, [pc, #196]	; (8003054 <xPortStartScheduler+0xc8>)
 8002f8e:	681a      	ldr	r2, [r3, #0]
 8002f90:	4b31      	ldr	r3, [pc, #196]	; (8003058 <xPortStartScheduler+0xcc>)
 8002f92:	429a      	cmp	r2, r3
 8002f94:	d00d      	beq.n	8002fb2 <xPortStartScheduler+0x26>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002f96:	4b2f      	ldr	r3, [pc, #188]	; (8003054 <xPortStartScheduler+0xc8>)
 8002f98:	681a      	ldr	r2, [r3, #0]
 8002f9a:	4b30      	ldr	r3, [pc, #192]	; (800305c <xPortStartScheduler+0xd0>)
 8002f9c:	429a      	cmp	r2, r3
 8002f9e:	d111      	bne.n	8002fc4 <xPortStartScheduler+0x38>
	__asm volatile
 8002fa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fa4:	f383 8811 	msr	BASEPRI, r3
 8002fa8:	f3bf 8f6f 	isb	sy
 8002fac:	f3bf 8f4f 	dsb	sy
 8002fb0:	e7fe      	b.n	8002fb0 <xPortStartScheduler+0x24>
 8002fb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fb6:	f383 8811 	msr	BASEPRI, r3
 8002fba:	f3bf 8f6f 	isb	sy
 8002fbe:	f3bf 8f4f 	dsb	sy
 8002fc2:	e7fe      	b.n	8002fc2 <xPortStartScheduler+0x36>
{
 8002fc4:	b500      	push	{lr}
 8002fc6:	b083      	sub	sp, #12
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002fc8:	4b25      	ldr	r3, [pc, #148]	; (8003060 <xPortStartScheduler+0xd4>)
 8002fca:	781a      	ldrb	r2, [r3, #0]
 8002fcc:	b2d2      	uxtb	r2, r2
 8002fce:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002fd0:	22ff      	movs	r2, #255	; 0xff
 8002fd2:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002fd4:	781b      	ldrb	r3, [r3, #0]
 8002fd6:	b2db      	uxtb	r3, r3
 8002fd8:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002fdc:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8002fe0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002fe4:	4a1f      	ldr	r2, [pc, #124]	; (8003064 <xPortStartScheduler+0xd8>)
 8002fe6:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002fe8:	2307      	movs	r3, #7
 8002fea:	6053      	str	r3, [r2, #4]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002fec:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8002ff0:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002ff4:	d00a      	beq.n	800300c <xPortStartScheduler+0x80>
			ulMaxPRIGROUPValue--;
 8002ff6:	4a1b      	ldr	r2, [pc, #108]	; (8003064 <xPortStartScheduler+0xd8>)
 8002ff8:	6853      	ldr	r3, [r2, #4]
 8002ffa:	3b01      	subs	r3, #1
 8002ffc:	6053      	str	r3, [r2, #4]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002ffe:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8003002:	005b      	lsls	r3, r3, #1
 8003004:	b2db      	uxtb	r3, r3
 8003006:	f88d 3003 	strb.w	r3, [sp, #3]
 800300a:	e7ef      	b.n	8002fec <xPortStartScheduler+0x60>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800300c:	4a15      	ldr	r2, [pc, #84]	; (8003064 <xPortStartScheduler+0xd8>)
 800300e:	6853      	ldr	r3, [r2, #4]
 8003010:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003012:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003016:	6053      	str	r3, [r2, #4]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003018:	9b01      	ldr	r3, [sp, #4]
 800301a:	b2db      	uxtb	r3, r3
 800301c:	4a10      	ldr	r2, [pc, #64]	; (8003060 <xPortStartScheduler+0xd4>)
 800301e:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003020:	4b11      	ldr	r3, [pc, #68]	; (8003068 <xPortStartScheduler+0xdc>)
 8003022:	681a      	ldr	r2, [r3, #0]
 8003024:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8003028:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800302a:	681a      	ldr	r2, [r3, #0]
 800302c:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 8003030:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 8003032:	f7ff ff95 	bl	8002f60 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8003036:	4b0d      	ldr	r3, [pc, #52]	; (800306c <xPortStartScheduler+0xe0>)
 8003038:	2200      	movs	r2, #0
 800303a:	601a      	str	r2, [r3, #0]
	vPortEnableVFP();
 800303c:	f7ff fed2 	bl	8002de4 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003040:	4a0b      	ldr	r2, [pc, #44]	; (8003070 <xPortStartScheduler+0xe4>)
 8003042:	6813      	ldr	r3, [r2, #0]
 8003044:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003048:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 800304a:	f7ff febb 	bl	8002dc4 <prvPortStartFirstTask>
	prvTaskExitError();
 800304e:	f7ff fe9f 	bl	8002d90 <prvTaskExitError>
 8003052:	bf00      	nop
 8003054:	e000ed00 	.word	0xe000ed00
 8003058:	410fc271 	.word	0x410fc271
 800305c:	410fc270 	.word	0x410fc270
 8003060:	e000e400 	.word	0xe000e400
 8003064:	200001bc 	.word	0x200001bc
 8003068:	e000ed20 	.word	0xe000ed20
 800306c:	20000008 	.word	0x20000008
 8003070:	e000ef34 	.word	0xe000ef34

08003074 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 8003074:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003078:	2b0f      	cmp	r3, #15
 800307a:	d90f      	bls.n	800309c <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800307c:	4a10      	ldr	r2, [pc, #64]	; (80030c0 <vPortValidateInterruptPriority+0x4c>)
 800307e:	5c9b      	ldrb	r3, [r3, r2]
 8003080:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003082:	4a10      	ldr	r2, [pc, #64]	; (80030c4 <vPortValidateInterruptPriority+0x50>)
 8003084:	7812      	ldrb	r2, [r2, #0]
 8003086:	429a      	cmp	r2, r3
 8003088:	d908      	bls.n	800309c <vPortValidateInterruptPriority+0x28>
 800308a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800308e:	f383 8811 	msr	BASEPRI, r3
 8003092:	f3bf 8f6f 	isb	sy
 8003096:	f3bf 8f4f 	dsb	sy
 800309a:	e7fe      	b.n	800309a <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800309c:	4b0a      	ldr	r3, [pc, #40]	; (80030c8 <vPortValidateInterruptPriority+0x54>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80030a4:	4a07      	ldr	r2, [pc, #28]	; (80030c4 <vPortValidateInterruptPriority+0x50>)
 80030a6:	6852      	ldr	r2, [r2, #4]
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d908      	bls.n	80030be <vPortValidateInterruptPriority+0x4a>
 80030ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030b0:	f383 8811 	msr	BASEPRI, r3
 80030b4:	f3bf 8f6f 	isb	sy
 80030b8:	f3bf 8f4f 	dsb	sy
 80030bc:	e7fe      	b.n	80030bc <vPortValidateInterruptPriority+0x48>
	}
 80030be:	4770      	bx	lr
 80030c0:	e000e3f0 	.word	0xe000e3f0
 80030c4:	200001bc 	.word	0x200001bc
 80030c8:	e000ed0c 	.word	0xe000ed0c

080030cc <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80030cc:	4a10      	ldr	r2, [pc, #64]	; (8003110 <prvHeapInit+0x44>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80030ce:	f012 0f07 	tst.w	r2, #7
 80030d2:	d01a      	beq.n	800310a <prvHeapInit+0x3e>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80030d4:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80030d6:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80030da:	f5c1 5370 	rsb	r3, r1, #15360	; 0x3c00
 80030de:	4413      	add	r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80030e0:	460a      	mov	r2, r1

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80030e2:	490c      	ldr	r1, [pc, #48]	; (8003114 <prvHeapInit+0x48>)
 80030e4:	600a      	str	r2, [r1, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80030e6:	2000      	movs	r0, #0
 80030e8:	6048      	str	r0, [r1, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80030ea:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 80030ec:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80030ee:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 80030f2:	608b      	str	r3, [r1, #8]
	pxEnd->xBlockSize = 0;
 80030f4:	6058      	str	r0, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80030f6:	6018      	str	r0, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80030f8:	1a98      	subs	r0, r3, r2
 80030fa:	6050      	str	r0, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80030fc:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80030fe:	60c8      	str	r0, [r1, #12]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003100:	6108      	str	r0, [r1, #16]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003102:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003106:	614b      	str	r3, [r1, #20]
}
 8003108:	4770      	bx	lr
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800310a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800310e:	e7e8      	b.n	80030e2 <prvHeapInit+0x16>
 8003110:	200001dc 	.word	0x200001dc
 8003114:	200001c4 	.word	0x200001c4

08003118 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003118:	b410      	push	{r4}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800311a:	4b13      	ldr	r3, [pc, #76]	; (8003168 <prvInsertBlockIntoFreeList+0x50>)
 800311c:	681a      	ldr	r2, [r3, #0]
 800311e:	4282      	cmp	r2, r0
 8003120:	d31b      	bcc.n	800315a <prvInsertBlockIntoFreeList+0x42>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003122:	6859      	ldr	r1, [r3, #4]
 8003124:	185c      	adds	r4, r3, r1
 8003126:	4284      	cmp	r4, r0
 8003128:	d103      	bne.n	8003132 <prvInsertBlockIntoFreeList+0x1a>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800312a:	6840      	ldr	r0, [r0, #4]
 800312c:	4401      	add	r1, r0
 800312e:	6059      	str	r1, [r3, #4]
		pxBlockToInsert = pxIterator;
 8003130:	4618      	mov	r0, r3
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003132:	6841      	ldr	r1, [r0, #4]
 8003134:	1844      	adds	r4, r0, r1
 8003136:	42a2      	cmp	r2, r4
 8003138:	d113      	bne.n	8003162 <prvInsertBlockIntoFreeList+0x4a>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800313a:	4c0b      	ldr	r4, [pc, #44]	; (8003168 <prvInsertBlockIntoFreeList+0x50>)
 800313c:	68a4      	ldr	r4, [r4, #8]
 800313e:	42a2      	cmp	r2, r4
 8003140:	d00d      	beq.n	800315e <prvInsertBlockIntoFreeList+0x46>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003142:	6852      	ldr	r2, [r2, #4]
 8003144:	4411      	add	r1, r2
 8003146:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003148:	681a      	ldr	r2, [r3, #0]
 800314a:	6812      	ldr	r2, [r2, #0]
 800314c:	6002      	str	r2, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800314e:	4298      	cmp	r0, r3
 8003150:	d000      	beq.n	8003154 <prvInsertBlockIntoFreeList+0x3c>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003152:	6018      	str	r0, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003154:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003158:	4770      	bx	lr
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800315a:	4613      	mov	r3, r2
 800315c:	e7de      	b.n	800311c <prvInsertBlockIntoFreeList+0x4>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800315e:	6004      	str	r4, [r0, #0]
 8003160:	e7f5      	b.n	800314e <prvInsertBlockIntoFreeList+0x36>
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003162:	6002      	str	r2, [r0, #0]
 8003164:	e7f3      	b.n	800314e <prvInsertBlockIntoFreeList+0x36>
 8003166:	bf00      	nop
 8003168:	200001c4 	.word	0x200001c4

0800316c <pvPortMalloc>:
{
 800316c:	b570      	push	{r4, r5, r6, lr}
 800316e:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8003170:	f7ff fad4 	bl	800271c <vTaskSuspendAll>
		if( pxEnd == NULL )
 8003174:	4b39      	ldr	r3, [pc, #228]	; (800325c <pvPortMalloc+0xf0>)
 8003176:	689b      	ldr	r3, [r3, #8]
 8003178:	b1bb      	cbz	r3, 80031aa <pvPortMalloc+0x3e>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800317a:	4b38      	ldr	r3, [pc, #224]	; (800325c <pvPortMalloc+0xf0>)
 800317c:	695b      	ldr	r3, [r3, #20]
 800317e:	421c      	tst	r4, r3
 8003180:	d162      	bne.n	8003248 <pvPortMalloc+0xdc>
			if( xWantedSize > 0 )
 8003182:	b1ac      	cbz	r4, 80031b0 <pvPortMalloc+0x44>
				xWantedSize += xHeapStructSize;
 8003184:	3408      	adds	r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003186:	f014 0f07 	tst.w	r4, #7
 800318a:	d011      	beq.n	80031b0 <pvPortMalloc+0x44>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800318c:	f024 0407 	bic.w	r4, r4, #7
 8003190:	3408      	adds	r4, #8
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003192:	f004 0307 	and.w	r3, r4, #7
 8003196:	b15b      	cbz	r3, 80031b0 <pvPortMalloc+0x44>
 8003198:	f04f 0350 	mov.w	r3, #80	; 0x50
 800319c:	f383 8811 	msr	BASEPRI, r3
 80031a0:	f3bf 8f6f 	isb	sy
 80031a4:	f3bf 8f4f 	dsb	sy
 80031a8:	e7fe      	b.n	80031a8 <pvPortMalloc+0x3c>
			prvHeapInit();
 80031aa:	f7ff ff8f 	bl	80030cc <prvHeapInit>
 80031ae:	e7e4      	b.n	800317a <pvPortMalloc+0xe>
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80031b0:	2c00      	cmp	r4, #0
 80031b2:	d04b      	beq.n	800324c <pvPortMalloc+0xe0>
 80031b4:	4b29      	ldr	r3, [pc, #164]	; (800325c <pvPortMalloc+0xf0>)
 80031b6:	691b      	ldr	r3, [r3, #16]
 80031b8:	42a3      	cmp	r3, r4
 80031ba:	d349      	bcc.n	8003250 <pvPortMalloc+0xe4>
				pxBlock = xStart.pxNextFreeBlock;
 80031bc:	4b27      	ldr	r3, [pc, #156]	; (800325c <pvPortMalloc+0xf0>)
 80031be:	681d      	ldr	r5, [r3, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80031c0:	e001      	b.n	80031c6 <pvPortMalloc+0x5a>
					pxPreviousBlock = pxBlock;
 80031c2:	462b      	mov	r3, r5
					pxBlock = pxBlock->pxNextFreeBlock;
 80031c4:	4615      	mov	r5, r2
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80031c6:	686a      	ldr	r2, [r5, #4]
 80031c8:	42a2      	cmp	r2, r4
 80031ca:	d202      	bcs.n	80031d2 <pvPortMalloc+0x66>
 80031cc:	682a      	ldr	r2, [r5, #0]
 80031ce:	2a00      	cmp	r2, #0
 80031d0:	d1f7      	bne.n	80031c2 <pvPortMalloc+0x56>
				if( pxBlock != pxEnd )
 80031d2:	4a22      	ldr	r2, [pc, #136]	; (800325c <pvPortMalloc+0xf0>)
 80031d4:	6892      	ldr	r2, [r2, #8]
 80031d6:	42aa      	cmp	r2, r5
 80031d8:	d03c      	beq.n	8003254 <pvPortMalloc+0xe8>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80031da:	681e      	ldr	r6, [r3, #0]
 80031dc:	3608      	adds	r6, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80031de:	682a      	ldr	r2, [r5, #0]
 80031e0:	601a      	str	r2, [r3, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80031e2:	686b      	ldr	r3, [r5, #4]
 80031e4:	1b1b      	subs	r3, r3, r4
 80031e6:	2b10      	cmp	r3, #16
 80031e8:	d910      	bls.n	800320c <pvPortMalloc+0xa0>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80031ea:	1928      	adds	r0, r5, r4
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80031ec:	f010 0f07 	tst.w	r0, #7
 80031f0:	d008      	beq.n	8003204 <pvPortMalloc+0x98>
 80031f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031f6:	f383 8811 	msr	BASEPRI, r3
 80031fa:	f3bf 8f6f 	isb	sy
 80031fe:	f3bf 8f4f 	dsb	sy
 8003202:	e7fe      	b.n	8003202 <pvPortMalloc+0x96>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003204:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003206:	606c      	str	r4, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003208:	f7ff ff86 	bl	8003118 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800320c:	6869      	ldr	r1, [r5, #4]
 800320e:	4a13      	ldr	r2, [pc, #76]	; (800325c <pvPortMalloc+0xf0>)
 8003210:	6913      	ldr	r3, [r2, #16]
 8003212:	1a5b      	subs	r3, r3, r1
 8003214:	6113      	str	r3, [r2, #16]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003216:	68d2      	ldr	r2, [r2, #12]
 8003218:	4293      	cmp	r3, r2
 800321a:	d201      	bcs.n	8003220 <pvPortMalloc+0xb4>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800321c:	4a0f      	ldr	r2, [pc, #60]	; (800325c <pvPortMalloc+0xf0>)
 800321e:	60d3      	str	r3, [r2, #12]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003220:	4b0e      	ldr	r3, [pc, #56]	; (800325c <pvPortMalloc+0xf0>)
 8003222:	695b      	ldr	r3, [r3, #20]
 8003224:	430b      	orrs	r3, r1
 8003226:	606b      	str	r3, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003228:	2300      	movs	r3, #0
 800322a:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 800322c:	f7ff fb06 	bl	800283c <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003230:	f016 0f07 	tst.w	r6, #7
 8003234:	d010      	beq.n	8003258 <pvPortMalloc+0xec>
 8003236:	f04f 0350 	mov.w	r3, #80	; 0x50
 800323a:	f383 8811 	msr	BASEPRI, r3
 800323e:	f3bf 8f6f 	isb	sy
 8003242:	f3bf 8f4f 	dsb	sy
 8003246:	e7fe      	b.n	8003246 <pvPortMalloc+0xda>
void *pvReturn = NULL;
 8003248:	2600      	movs	r6, #0
 800324a:	e7ef      	b.n	800322c <pvPortMalloc+0xc0>
 800324c:	2600      	movs	r6, #0
 800324e:	e7ed      	b.n	800322c <pvPortMalloc+0xc0>
 8003250:	2600      	movs	r6, #0
 8003252:	e7eb      	b.n	800322c <pvPortMalloc+0xc0>
 8003254:	2600      	movs	r6, #0
 8003256:	e7e9      	b.n	800322c <pvPortMalloc+0xc0>
}
 8003258:	4630      	mov	r0, r6
 800325a:	bd70      	pop	{r4, r5, r6, pc}
 800325c:	200001c4 	.word	0x200001c4

08003260 <vPortFree>:
	if( pv != NULL )
 8003260:	b380      	cbz	r0, 80032c4 <vPortFree+0x64>
{
 8003262:	b538      	push	{r3, r4, r5, lr}
 8003264:	4604      	mov	r4, r0
		puc -= xHeapStructSize;
 8003266:	f1a0 0508 	sub.w	r5, r0, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800326a:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800326e:	4916      	ldr	r1, [pc, #88]	; (80032c8 <vPortFree+0x68>)
 8003270:	6949      	ldr	r1, [r1, #20]
 8003272:	420a      	tst	r2, r1
 8003274:	d108      	bne.n	8003288 <vPortFree+0x28>
 8003276:	f04f 0350 	mov.w	r3, #80	; 0x50
 800327a:	f383 8811 	msr	BASEPRI, r3
 800327e:	f3bf 8f6f 	isb	sy
 8003282:	f3bf 8f4f 	dsb	sy
 8003286:	e7fe      	b.n	8003286 <vPortFree+0x26>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003288:	f850 0c08 	ldr.w	r0, [r0, #-8]
 800328c:	b140      	cbz	r0, 80032a0 <vPortFree+0x40>
 800328e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003292:	f383 8811 	msr	BASEPRI, r3
 8003296:	f3bf 8f6f 	isb	sy
 800329a:	f3bf 8f4f 	dsb	sy
 800329e:	e7fe      	b.n	800329e <vPortFree+0x3e>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80032a0:	ea22 0201 	bic.w	r2, r2, r1
 80032a4:	f844 2c04 	str.w	r2, [r4, #-4]
				vTaskSuspendAll();
 80032a8:	f7ff fa38 	bl	800271c <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 80032ac:	f854 1c04 	ldr.w	r1, [r4, #-4]
 80032b0:	4a05      	ldr	r2, [pc, #20]	; (80032c8 <vPortFree+0x68>)
 80032b2:	6913      	ldr	r3, [r2, #16]
 80032b4:	440b      	add	r3, r1
 80032b6:	6113      	str	r3, [r2, #16]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80032b8:	4628      	mov	r0, r5
 80032ba:	f7ff ff2d 	bl	8003118 <prvInsertBlockIntoFreeList>
				( void ) xTaskResumeAll();
 80032be:	f7ff fabd 	bl	800283c <xTaskResumeAll>
}
 80032c2:	bd38      	pop	{r3, r4, r5, pc}
 80032c4:	4770      	bx	lr
 80032c6:	bf00      	nop
 80032c8:	200001c4 	.word	0x200001c4

080032cc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
static void MX_GPIO_Init(void)
{
 80032cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80032ce:	b08b      	sub	sp, #44	; 0x2c

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80032d0:	2400      	movs	r4, #0
 80032d2:	9401      	str	r4, [sp, #4]
 80032d4:	4b29      	ldr	r3, [pc, #164]	; (800337c <MX_GPIO_Init+0xb0>)
 80032d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80032d8:	f042 0204 	orr.w	r2, r2, #4
 80032dc:	631a      	str	r2, [r3, #48]	; 0x30
 80032de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80032e0:	f002 0204 	and.w	r2, r2, #4
 80032e4:	9201      	str	r2, [sp, #4]
 80032e6:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80032e8:	9402      	str	r4, [sp, #8]
 80032ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80032ec:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80032f0:	631a      	str	r2, [r3, #48]	; 0x30
 80032f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80032f4:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80032f8:	9202      	str	r2, [sp, #8]
 80032fa:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80032fc:	9403      	str	r4, [sp, #12]
 80032fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003300:	f042 0201 	orr.w	r2, r2, #1
 8003304:	631a      	str	r2, [r3, #48]	; 0x30
 8003306:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003308:	f002 0201 	and.w	r2, r2, #1
 800330c:	9203      	str	r2, [sp, #12]
 800330e:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003310:	9404      	str	r4, [sp, #16]
 8003312:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003314:	f042 0202 	orr.w	r2, r2, #2
 8003318:	631a      	str	r2, [r3, #48]	; 0x30
 800331a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800331c:	f003 0302 	and.w	r3, r3, #2
 8003320:	9304      	str	r3, [sp, #16]
 8003322:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED1_Pin|LED2_Pin|buzzer_Pin|LED3_Pin, GPIO_PIN_RESET);
 8003324:	4d16      	ldr	r5, [pc, #88]	; (8003380 <MX_GPIO_Init+0xb4>)
 8003326:	4622      	mov	r2, r4
 8003328:	210f      	movs	r1, #15
 800332a:	4628      	mov	r0, r5
 800332c:	f7fd fc4e 	bl	8000bcc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8003330:	4e14      	ldr	r6, [pc, #80]	; (8003384 <MX_GPIO_Init+0xb8>)
 8003332:	4622      	mov	r2, r4
 8003334:	2120      	movs	r1, #32
 8003336:	4630      	mov	r0, r6
 8003338:	f7fd fc48 	bl	8000bcc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800333c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003340:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003342:	4b11      	ldr	r3, [pc, #68]	; (8003388 <MX_GPIO_Init+0xbc>)
 8003344:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003346:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003348:	a905      	add	r1, sp, #20
 800334a:	4628      	mov	r0, r5
 800334c:	f7fd fb60 	bl	8000a10 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin buzzer_Pin LED3_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|buzzer_Pin|LED3_Pin;
 8003350:	230f      	movs	r3, #15
 8003352:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003354:	2701      	movs	r7, #1
 8003356:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003358:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800335a:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800335c:	a905      	add	r1, sp, #20
 800335e:	4628      	mov	r0, r5
 8003360:	f7fd fb56 	bl	8000a10 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8003364:	2320      	movs	r3, #32
 8003366:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003368:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800336a:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800336c:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800336e:	a905      	add	r1, sp, #20
 8003370:	4630      	mov	r0, r6
 8003372:	f7fd fb4d 	bl	8000a10 <HAL_GPIO_Init>

}
 8003376:	b00b      	add	sp, #44	; 0x2c
 8003378:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800337a:	bf00      	nop
 800337c:	40023800 	.word	0x40023800
 8003380:	40020800 	.word	0x40020800
 8003384:	40020000 	.word	0x40020000
 8003388:	10210000 	.word	0x10210000

0800338c <StartDefaultTask>:

/* USER CODE END 4 */

/* StartDefaultTask function */
void StartDefaultTask(void const * argument)
{
 800338c:	b510      	push	{r4, lr}

  /* USER CODE BEGIN 5 */
  /* Infinite loop */
	uint16_t count=0;
 800338e:	2400      	movs	r4, #0
  for(;;)
  {
	osMessagePut(myQueue01Handle,count,osWaitForever);
 8003390:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003394:	4621      	mov	r1, r4
 8003396:	4b05      	ldr	r3, [pc, #20]	; (80033ac <StartDefaultTask+0x20>)
 8003398:	6818      	ldr	r0, [r3, #0]
 800339a:	f7fe fbe5 	bl	8001b68 <osMessagePut>
    osDelay(1000);
 800339e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80033a2:	f7fe fbcc 	bl	8001b3e <osDelay>
    count++;
 80033a6:	3401      	adds	r4, #1
 80033a8:	b2a4      	uxth	r4, r4
 80033aa:	e7f1      	b.n	8003390 <StartDefaultTask+0x4>
 80033ac:	20003e54 	.word	0x20003e54

080033b0 <StartTask03>:
  /* USER CODE END StartTask02 */
}

/* StartTask03 function */
void StartTask03(void const * argument)
{
 80033b0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80033b2:	2001      	movs	r0, #1
 80033b4:	f7fe fbc3 	bl	8001b3e <osDelay>
 80033b8:	e7fb      	b.n	80033b2 <StartTask03+0x2>

080033ba <StartTask04>:
  /* USER CODE END StartTask03 */
}

/* StartTask04 function */
void StartTask04(void const * argument)
{
 80033ba:	b508      	push	{r3, lr}
  /* USER CODE BEGIN StartTask04 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80033bc:	2001      	movs	r0, #1
 80033be:	f7fe fbbe 	bl	8001b3e <osDelay>
 80033c2:	e7fb      	b.n	80033bc <StartTask04+0x2>

080033c4 <StartTask02>:
{
 80033c4:	b500      	push	{lr}
 80033c6:	b08b      	sub	sp, #44	; 0x2c
	  result= osMessageGet(myQueue01Handle,osWaitForever);
 80033c8:	4d10      	ldr	r5, [pc, #64]	; (800340c <StartTask02+0x48>)
 80033ca:	466c      	mov	r4, sp
 80033cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80033d0:	4b0f      	ldr	r3, [pc, #60]	; (8003410 <StartTask02+0x4c>)
 80033d2:	6819      	ldr	r1, [r3, #0]
 80033d4:	4620      	mov	r0, r4
 80033d6:	f7fe fbfb 	bl	8001bd0 <osMessageGet>
 80033da:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80033de:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	  memset(buff,0,sizeof(buff)); //bersihkan buffer
 80033e2:	2300      	movs	r3, #0
 80033e4:	9305      	str	r3, [sp, #20]
 80033e6:	9306      	str	r3, [sp, #24]
 80033e8:	9307      	str	r3, [sp, #28]
 80033ea:	9308      	str	r3, [sp, #32]
 80033ec:	9309      	str	r3, [sp, #36]	; 0x24
	  sprintf(buff,"count: %d\n\r",(uint8_t*)result.value.v);
 80033ee:	460a      	mov	r2, r1
 80033f0:	4908      	ldr	r1, [pc, #32]	; (8003414 <StartTask02+0x50>)
 80033f2:	a805      	add	r0, sp, #20
 80033f4:	f000 fa84 	bl	8003900 <siprintf>
	  HAL_UART_Transmit(&huart2,(uint8_t*)buff,sizeof(buff),1000);
 80033f8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80033fc:	2214      	movs	r2, #20
 80033fe:	eb0d 0102 	add.w	r1, sp, r2
 8003402:	4805      	ldr	r0, [pc, #20]	; (8003418 <StartTask02+0x54>)
 8003404:	f7fe fb00 	bl	8001a08 <HAL_UART_Transmit>
 8003408:	e7de      	b.n	80033c8 <StartTask02+0x4>
 800340a:	bf00      	nop
 800340c:	20003e44 	.word	0x20003e44
 8003410:	20003e54 	.word	0x20003e54
 8003414:	080041a4 	.word	0x080041a4
 8003418:	20003e58 	.word	0x20003e58

0800341c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800341c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 800341e:	6803      	ldr	r3, [r0, #0]
 8003420:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003424:	d000      	beq.n	8003428 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003426:	bd08      	pop	{r3, pc}
    HAL_IncTick();
 8003428:	f7fd f8dc 	bl	80005e4 <HAL_IncTick>
}
 800342c:	e7fb      	b.n	8003426 <HAL_TIM_PeriodElapsedCallback+0xa>

0800342e <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 800342e:	e7fe      	b.n	800342e <_Error_Handler>

08003430 <MX_USART2_UART_Init>:
{
 8003430:	b508      	push	{r3, lr}
  huart2.Instance = USART2;
 8003432:	480b      	ldr	r0, [pc, #44]	; (8003460 <MX_USART2_UART_Init+0x30>)
 8003434:	4b0b      	ldr	r3, [pc, #44]	; (8003464 <MX_USART2_UART_Init+0x34>)
 8003436:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 8003438:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800343c:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800343e:	2300      	movs	r3, #0
 8003440:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003442:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003444:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003446:	220c      	movs	r2, #12
 8003448:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800344a:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800344c:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800344e:	f7fe faac 	bl	80019aa <HAL_UART_Init>
 8003452:	b900      	cbnz	r0, 8003456 <MX_USART2_UART_Init+0x26>
}
 8003454:	bd08      	pop	{r3, pc}
    _Error_Handler(__FILE__, __LINE__);
 8003456:	21dc      	movs	r1, #220	; 0xdc
 8003458:	4803      	ldr	r0, [pc, #12]	; (8003468 <MX_USART2_UART_Init+0x38>)
 800345a:	f7ff ffe8 	bl	800342e <_Error_Handler>
 800345e:	bf00      	nop
 8003460:	20003e58 	.word	0x20003e58
 8003464:	40004400 	.word	0x40004400
 8003468:	080041b0 	.word	0x080041b0

0800346c <MX_ADC1_Init>:
{
 800346c:	b500      	push	{lr}
 800346e:	b085      	sub	sp, #20
  hadc1.Instance = ADC1;
 8003470:	4815      	ldr	r0, [pc, #84]	; (80034c8 <MX_ADC1_Init+0x5c>)
 8003472:	4b16      	ldr	r3, [pc, #88]	; (80034cc <MX_ADC1_Init+0x60>)
 8003474:	6003      	str	r3, [r0, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8003476:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800347a:	6043      	str	r3, [r0, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800347c:	2300      	movs	r3, #0
 800347e:	6083      	str	r3, [r0, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8003480:	6103      	str	r3, [r0, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8003482:	6183      	str	r3, [r0, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003484:	6203      	str	r3, [r0, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003486:	62c3      	str	r3, [r0, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003488:	4a11      	ldr	r2, [pc, #68]	; (80034d0 <MX_ADC1_Init+0x64>)
 800348a:	6282      	str	r2, [r0, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800348c:	60c3      	str	r3, [r0, #12]
  hadc1.Init.NbrOfConversion = 1;
 800348e:	2201      	movs	r2, #1
 8003490:	61c2      	str	r2, [r0, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8003492:	6303      	str	r3, [r0, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003494:	6142      	str	r2, [r0, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003496:	f7fd f94f 	bl	8000738 <HAL_ADC_Init>
 800349a:	b960      	cbnz	r0, 80034b6 <MX_ADC1_Init+0x4a>
  sConfig.Channel = ADC_CHANNEL_1;
 800349c:	2301      	movs	r3, #1
 800349e:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 1;
 80034a0:	9301      	str	r3, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80034a2:	2307      	movs	r3, #7
 80034a4:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80034a6:	4669      	mov	r1, sp
 80034a8:	4807      	ldr	r0, [pc, #28]	; (80034c8 <MX_ADC1_Init+0x5c>)
 80034aa:	f7fd f96f 	bl	800078c <HAL_ADC_ConfigChannel>
 80034ae:	b930      	cbnz	r0, 80034be <MX_ADC1_Init+0x52>
}
 80034b0:	b005      	add	sp, #20
 80034b2:	f85d fb04 	ldr.w	pc, [sp], #4
    _Error_Handler(__FILE__, __LINE__);
 80034b6:	21bf      	movs	r1, #191	; 0xbf
 80034b8:	4806      	ldr	r0, [pc, #24]	; (80034d4 <MX_ADC1_Init+0x68>)
 80034ba:	f7ff ffb8 	bl	800342e <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 80034be:	21c9      	movs	r1, #201	; 0xc9
 80034c0:	4804      	ldr	r0, [pc, #16]	; (80034d4 <MX_ADC1_Init+0x68>)
 80034c2:	f7ff ffb4 	bl	800342e <_Error_Handler>
 80034c6:	bf00      	nop
 80034c8:	20003df8 	.word	0x20003df8
 80034cc:	40012000 	.word	0x40012000
 80034d0:	0f000001 	.word	0x0f000001
 80034d4:	080041b0 	.word	0x080041b0

080034d8 <SystemClock_Config>:
{
 80034d8:	b500      	push	{lr}
 80034da:	b095      	sub	sp, #84	; 0x54
  __HAL_RCC_PWR_CLK_ENABLE();
 80034dc:	2200      	movs	r2, #0
 80034de:	9200      	str	r2, [sp, #0]
 80034e0:	4b2d      	ldr	r3, [pc, #180]	; (8003598 <SystemClock_Config+0xc0>)
 80034e2:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80034e4:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 80034e8:	6419      	str	r1, [r3, #64]	; 0x40
 80034ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034f0:	9300      	str	r3, [sp, #0]
 80034f2:	9b00      	ldr	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80034f4:	9201      	str	r2, [sp, #4]
 80034f6:	4b29      	ldr	r3, [pc, #164]	; (800359c <SystemClock_Config+0xc4>)
 80034f8:	6819      	ldr	r1, [r3, #0]
 80034fa:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
 80034fe:	6019      	str	r1, [r3, #0]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003506:	9301      	str	r3, [sp, #4]
 8003508:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800350a:	2302      	movs	r3, #2
 800350c:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800350e:	2101      	movs	r1, #1
 8003510:	910a      	str	r1, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8003512:	2110      	movs	r1, #16
 8003514:	910b      	str	r1, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003516:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003518:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 800351a:	2208      	movs	r2, #8
 800351c:	920f      	str	r2, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 800351e:	22b4      	movs	r2, #180	; 0xb4
 8003520:	9210      	str	r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003522:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8003524:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8003526:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003528:	a807      	add	r0, sp, #28
 800352a:	f7fd fd47 	bl	8000fbc <HAL_RCC_OscConfig>
 800352e:	bb38      	cbnz	r0, 8003580 <SystemClock_Config+0xa8>
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8003530:	f7fd fb52 	bl	8000bd8 <HAL_PWREx_EnableOverDrive>
 8003534:	bb40      	cbnz	r0, 8003588 <SystemClock_Config+0xb0>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003536:	230f      	movs	r3, #15
 8003538:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800353a:	2302      	movs	r3, #2
 800353c:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800353e:	2300      	movs	r3, #0
 8003540:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003542:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003546:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003548:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800354c:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800354e:	2105      	movs	r1, #5
 8003550:	a802      	add	r0, sp, #8
 8003552:	f7fd fb81 	bl	8000c58 <HAL_RCC_ClockConfig>
 8003556:	b9d8      	cbnz	r0, 8003590 <SystemClock_Config+0xb8>
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8003558:	f7fd fc2a 	bl	8000db0 <HAL_RCC_GetHCLKFreq>
 800355c:	4b10      	ldr	r3, [pc, #64]	; (80035a0 <SystemClock_Config+0xc8>)
 800355e:	fba3 3000 	umull	r3, r0, r3, r0
 8003562:	0980      	lsrs	r0, r0, #6
 8003564:	f7fd fa2e 	bl	80009c4 <HAL_SYSTICK_Config>
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8003568:	2004      	movs	r0, #4
 800356a:	f7fd fa41 	bl	80009f0 <HAL_SYSTICK_CLKSourceConfig>
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 800356e:	2200      	movs	r2, #0
 8003570:	210f      	movs	r1, #15
 8003572:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003576:	f7fd f9e5 	bl	8000944 <HAL_NVIC_SetPriority>
}
 800357a:	b015      	add	sp, #84	; 0x54
 800357c:	f85d fb04 	ldr.w	pc, [sp], #4
    _Error_Handler(__FILE__, __LINE__);
 8003580:	2185      	movs	r1, #133	; 0x85
 8003582:	4808      	ldr	r0, [pc, #32]	; (80035a4 <SystemClock_Config+0xcc>)
 8003584:	f7ff ff53 	bl	800342e <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 8003588:	218c      	movs	r1, #140	; 0x8c
 800358a:	4806      	ldr	r0, [pc, #24]	; (80035a4 <SystemClock_Config+0xcc>)
 800358c:	f7ff ff4f 	bl	800342e <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 8003590:	219a      	movs	r1, #154	; 0x9a
 8003592:	4804      	ldr	r0, [pc, #16]	; (80035a4 <SystemClock_Config+0xcc>)
 8003594:	f7ff ff4b 	bl	800342e <_Error_Handler>
 8003598:	40023800 	.word	0x40023800
 800359c:	40007000 	.word	0x40007000
 80035a0:	10624dd3 	.word	0x10624dd3
 80035a4:	080041b0 	.word	0x080041b0

080035a8 <main>:
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b098      	sub	sp, #96	; 0x60
  HAL_Init();
 80035ac:	f7fd f800 	bl	80005b0 <HAL_Init>
  SystemClock_Config();
 80035b0:	f7ff ff92 	bl	80034d8 <SystemClock_Config>
  MX_GPIO_Init();
 80035b4:	f7ff fe8a 	bl	80032cc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80035b8:	f7ff ff3a 	bl	8003430 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80035bc:	f7ff ff56 	bl	800346c <MX_ADC1_Init>
  osMutexDef(myMutexUART);
 80035c0:	2700      	movs	r7, #0
 80035c2:	a818      	add	r0, sp, #96	; 0x60
 80035c4:	f840 7d04 	str.w	r7, [r0, #-4]!
  myMutexUARTHandle = osMutexCreate(osMutex(myMutexUART));
 80035c8:	f7fe fac2 	bl	8001b50 <osMutexCreate>
 80035cc:	4b22      	ldr	r3, [pc, #136]	; (8003658 <main+0xb0>)
 80035ce:	6018      	str	r0, [r3, #0]
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80035d0:	4c22      	ldr	r4, [pc, #136]	; (800365c <main+0xb4>)
 80035d2:	ad12      	add	r5, sp, #72	; 0x48
 80035d4:	4626      	mov	r6, r4
 80035d6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80035d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80035da:	6833      	ldr	r3, [r6, #0]
 80035dc:	602b      	str	r3, [r5, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80035de:	4639      	mov	r1, r7
 80035e0:	a812      	add	r0, sp, #72	; 0x48
 80035e2:	f7fe fa92 	bl	8001b0a <osThreadCreate>
 80035e6:	4b1e      	ldr	r3, [pc, #120]	; (8003660 <main+0xb8>)
 80035e8:	6018      	str	r0, [r3, #0]
  osThreadDef(myTask02, StartTask02, osPriorityNormal, 0, 128);
 80035ea:	ad0d      	add	r5, sp, #52	; 0x34
 80035ec:	f104 0614 	add.w	r6, r4, #20
 80035f0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80035f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80035f4:	6833      	ldr	r3, [r6, #0]
 80035f6:	602b      	str	r3, [r5, #0]
  myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 80035f8:	4639      	mov	r1, r7
 80035fa:	a80d      	add	r0, sp, #52	; 0x34
 80035fc:	f7fe fa85 	bl	8001b0a <osThreadCreate>
 8003600:	4b18      	ldr	r3, [pc, #96]	; (8003664 <main+0xbc>)
 8003602:	6018      	str	r0, [r3, #0]
  osThreadDef(myTask03, StartTask03, osPriorityNormal, 0, 128);
 8003604:	ad08      	add	r5, sp, #32
 8003606:	f104 0628 	add.w	r6, r4, #40	; 0x28
 800360a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800360c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800360e:	6833      	ldr	r3, [r6, #0]
 8003610:	602b      	str	r3, [r5, #0]
  myTask03Handle = osThreadCreate(osThread(myTask03), NULL);
 8003612:	4639      	mov	r1, r7
 8003614:	a808      	add	r0, sp, #32
 8003616:	f7fe fa78 	bl	8001b0a <osThreadCreate>
 800361a:	4b13      	ldr	r3, [pc, #76]	; (8003668 <main+0xc0>)
 800361c:	6018      	str	r0, [r3, #0]
  osThreadDef(myTask04, StartTask04, osPriorityNormal, 0, 128);
 800361e:	ad03      	add	r5, sp, #12
 8003620:	f104 063c 	add.w	r6, r4, #60	; 0x3c
 8003624:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8003626:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003628:	6833      	ldr	r3, [r6, #0]
 800362a:	602b      	str	r3, [r5, #0]
  myTask04Handle = osThreadCreate(osThread(myTask04), NULL);
 800362c:	4639      	mov	r1, r7
 800362e:	a803      	add	r0, sp, #12
 8003630:	f7fe fa6b 	bl	8001b0a <osThreadCreate>
 8003634:	4b0d      	ldr	r3, [pc, #52]	; (800366c <main+0xc4>)
 8003636:	6018      	str	r0, [r3, #0]
  osMessageQDef(myQueue01, 5, uint16_t);
 8003638:	ab01      	add	r3, sp, #4
 800363a:	3450      	adds	r4, #80	; 0x50
 800363c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003640:	e883 0003 	stmia.w	r3, {r0, r1}
  myQueue01Handle = osMessageCreate(osMessageQ(myQueue01), NULL);
 8003644:	4639      	mov	r1, r7
 8003646:	4618      	mov	r0, r3
 8003648:	f7fe fa87 	bl	8001b5a <osMessageCreate>
 800364c:	4b08      	ldr	r3, [pc, #32]	; (8003670 <main+0xc8>)
 800364e:	6018      	str	r0, [r3, #0]
  osKernelStart();
 8003650:	f7fe fa56 	bl	8001b00 <osKernelStart>
 8003654:	e7fe      	b.n	8003654 <main+0xac>
 8003656:	bf00      	nop
 8003658:	20003df0 	.word	0x20003df0
 800365c:	0800412c 	.word	0x0800412c
 8003660:	20003dec 	.word	0x20003dec
 8003664:	20003e40 	.word	0x20003e40
 8003668:	20003e50 	.word	0x20003e50
 800366c:	20003df4 	.word	0x20003df4
 8003670:	20003e54 	.word	0x20003e54

08003674 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003674:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003676:	2003      	movs	r0, #3
 8003678:	f7fd f952 	bl	8000920 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 800367c:	2200      	movs	r2, #0
 800367e:	4611      	mov	r1, r2
 8003680:	f06f 000b 	mvn.w	r0, #11
 8003684:	f7fd f95e 	bl	8000944 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8003688:	2200      	movs	r2, #0
 800368a:	4611      	mov	r1, r2
 800368c:	f06f 000a 	mvn.w	r0, #10
 8003690:	f7fd f958 	bl	8000944 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8003694:	2200      	movs	r2, #0
 8003696:	4611      	mov	r1, r2
 8003698:	f06f 0009 	mvn.w	r0, #9
 800369c:	f7fd f952 	bl	8000944 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 80036a0:	2200      	movs	r2, #0
 80036a2:	4611      	mov	r1, r2
 80036a4:	f06f 0004 	mvn.w	r0, #4
 80036a8:	f7fd f94c 	bl	8000944 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 80036ac:	2200      	movs	r2, #0
 80036ae:	4611      	mov	r1, r2
 80036b0:	f06f 0003 	mvn.w	r0, #3
 80036b4:	f7fd f946 	bl	8000944 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80036b8:	2200      	movs	r2, #0
 80036ba:	210f      	movs	r1, #15
 80036bc:	f06f 0001 	mvn.w	r0, #1
 80036c0:	f7fd f940 	bl	8000944 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 80036c4:	2200      	movs	r2, #0
 80036c6:	210f      	movs	r1, #15
 80036c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80036cc:	f7fd f93a 	bl	8000944 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80036d0:	bd08      	pop	{r3, pc}
	...

080036d4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hadc->Instance==ADC1)
 80036d4:	6802      	ldr	r2, [r0, #0]
 80036d6:	4b0f      	ldr	r3, [pc, #60]	; (8003714 <HAL_ADC_MspInit+0x40>)
 80036d8:	429a      	cmp	r2, r3
 80036da:	d000      	beq.n	80036de <HAL_ADC_MspInit+0xa>
 80036dc:	4770      	bx	lr
{
 80036de:	b500      	push	{lr}
 80036e0:	b087      	sub	sp, #28
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80036e2:	2100      	movs	r1, #0
 80036e4:	9100      	str	r1, [sp, #0]
 80036e6:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 80036ea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80036ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80036f0:	645a      	str	r2, [r3, #68]	; 0x44
 80036f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036f8:	9300      	str	r3, [sp, #0]
 80036fa:	9b00      	ldr	r3, [sp, #0]
  
    /**ADC1 GPIO Configuration    
    PA1     ------> ADC1_IN1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80036fc:	2302      	movs	r3, #2
 80036fe:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003700:	2303      	movs	r3, #3
 8003702:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003704:	9103      	str	r1, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003706:	a901      	add	r1, sp, #4
 8003708:	4803      	ldr	r0, [pc, #12]	; (8003718 <HAL_ADC_MspInit+0x44>)
 800370a:	f7fd f981 	bl	8000a10 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800370e:	b007      	add	sp, #28
 8003710:	f85d fb04 	ldr.w	pc, [sp], #4
 8003714:	40012000 	.word	0x40012000
 8003718:	40020000 	.word	0x40020000

0800371c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART2)
 800371c:	6802      	ldr	r2, [r0, #0]
 800371e:	4b11      	ldr	r3, [pc, #68]	; (8003764 <HAL_UART_MspInit+0x48>)
 8003720:	429a      	cmp	r2, r3
 8003722:	d000      	beq.n	8003726 <HAL_UART_MspInit+0xa>
 8003724:	4770      	bx	lr
{
 8003726:	b500      	push	{lr}
 8003728:	b087      	sub	sp, #28
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800372a:	2300      	movs	r3, #0
 800372c:	9300      	str	r3, [sp, #0]
 800372e:	4b0e      	ldr	r3, [pc, #56]	; (8003768 <HAL_UART_MspInit+0x4c>)
 8003730:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003732:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8003736:	641a      	str	r2, [r3, #64]	; 0x40
 8003738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800373a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800373e:	9300      	str	r3, [sp, #0]
 8003740:	9b00      	ldr	r3, [sp, #0]
  
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003742:	230c      	movs	r3, #12
 8003744:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003746:	2302      	movs	r3, #2
 8003748:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800374a:	2301      	movs	r3, #1
 800374c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800374e:	2303      	movs	r3, #3
 8003750:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003752:	2307      	movs	r3, #7
 8003754:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003756:	a901      	add	r1, sp, #4
 8003758:	4804      	ldr	r0, [pc, #16]	; (800376c <HAL_UART_MspInit+0x50>)
 800375a:	f7fd f959 	bl	8000a10 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800375e:	b007      	add	sp, #28
 8003760:	f85d fb04 	ldr.w	pc, [sp], #4
 8003764:	40004400 	.word	0x40004400
 8003768:	40023800 	.word	0x40023800
 800376c:	40020000 	.word	0x40020000

08003770 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priorty.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003770:	b510      	push	{r4, lr}
 8003772:	b088      	sub	sp, #32
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0); 
 8003774:	2200      	movs	r2, #0
 8003776:	4601      	mov	r1, r0
 8003778:	201c      	movs	r0, #28
 800377a:	f7fd f8e3 	bl	8000944 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn); 
 800377e:	201c      	movs	r0, #28
 8003780:	f7fd f914 	bl	80009ac <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8003784:	2400      	movs	r4, #0
 8003786:	9401      	str	r4, [sp, #4]
 8003788:	4b14      	ldr	r3, [pc, #80]	; (80037dc <HAL_InitTick+0x6c>)
 800378a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800378c:	f042 0201 	orr.w	r2, r2, #1
 8003790:	641a      	str	r2, [r3, #64]	; 0x40
 8003792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003794:	f003 0301 	and.w	r3, r3, #1
 8003798:	9301      	str	r3, [sp, #4]
 800379a:	9b01      	ldr	r3, [sp, #4]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800379c:	a902      	add	r1, sp, #8
 800379e:	a803      	add	r0, sp, #12
 80037a0:	f7fd fb2c 	bl	8000dfc <HAL_RCC_GetClockConfig>
  
  /* Compute TIM2 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80037a4:	f7fd fb0a 	bl	8000dbc <HAL_RCC_GetPCLK1Freq>
 80037a8:	0043      	lsls	r3, r0, #1
   
  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80037aa:	480d      	ldr	r0, [pc, #52]	; (80037e0 <HAL_InitTick+0x70>)
 80037ac:	fba0 2303 	umull	r2, r3, r0, r3
 80037b0:	0c9b      	lsrs	r3, r3, #18
 80037b2:	3b01      	subs	r3, #1
  
  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 80037b4:	480b      	ldr	r0, [pc, #44]	; (80037e4 <HAL_InitTick+0x74>)
 80037b6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80037ba:	6002      	str	r2, [r0, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000 / 1000) - 1;
 80037bc:	f240 32e7 	movw	r2, #999	; 0x3e7
 80037c0:	60c2      	str	r2, [r0, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 80037c2:	6043      	str	r3, [r0, #4]
  htim2.Init.ClockDivision = 0;
 80037c4:	6104      	str	r4, [r0, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80037c6:	6084      	str	r4, [r0, #8]
  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 80037c8:	f7fd ff08 	bl	80015dc <HAL_TIM_Base_Init>
 80037cc:	b110      	cbz	r0, 80037d4 <HAL_InitTick+0x64>
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
  }
  
  /* Return function status */
  return HAL_ERROR;
 80037ce:	2001      	movs	r0, #1
}
 80037d0:	b008      	add	sp, #32
 80037d2:	bd10      	pop	{r4, pc}
    return HAL_TIM_Base_Start_IT(&htim2);
 80037d4:	4803      	ldr	r0, [pc, #12]	; (80037e4 <HAL_InitTick+0x74>)
 80037d6:	f7fd fdd4 	bl	8001382 <HAL_TIM_Base_Start_IT>
 80037da:	e7f9      	b.n	80037d0 <HAL_InitTick+0x60>
 80037dc:	40023800 	.word	0x40023800
 80037e0:	431bde83 	.word	0x431bde83
 80037e4:	20003e98 	.word	0x20003e98

080037e8 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 80037e8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  osSystickHandler();
 80037ea:	f7fe fa41 	bl	8001c70 <osSystickHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80037ee:	bd08      	pop	{r3, pc}

080037f0 <TIM2_IRQHandler>:

/**
* @brief This function handles TIM2 global interrupt.
*/
void TIM2_IRQHandler(void)
{
 80037f0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80037f2:	4802      	ldr	r0, [pc, #8]	; (80037fc <TIM2_IRQHandler+0xc>)
 80037f4:	f7fd fdd5 	bl	80013a2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80037f8:	bd08      	pop	{r3, pc}
 80037fa:	bf00      	nop
 80037fc:	20003e98 	.word	0x20003e98

08003800 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003800:	490f      	ldr	r1, [pc, #60]	; (8003840 <SystemInit+0x40>)
 8003802:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8003806:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800380a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800380e:	4b0d      	ldr	r3, [pc, #52]	; (8003844 <SystemInit+0x44>)
 8003810:	681a      	ldr	r2, [r3, #0]
 8003812:	f042 0201 	orr.w	r2, r2, #1
 8003816:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003818:	2000      	movs	r0, #0
 800381a:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800381c:	681a      	ldr	r2, [r3, #0]
 800381e:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8003822:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003826:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8003828:	4a07      	ldr	r2, [pc, #28]	; (8003848 <SystemInit+0x48>)
 800382a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800382c:	681a      	ldr	r2, [r3, #0]
 800382e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003832:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8003834:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003836:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800383a:	608b      	str	r3, [r1, #8]
#endif
}
 800383c:	4770      	bx	lr
 800383e:	bf00      	nop
 8003840:	e000ed00 	.word	0xe000ed00
 8003844:	40023800 	.word	0x40023800
 8003848:	24003010 	.word	0x24003010

0800384c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800384c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003884 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003850:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003852:	e003      	b.n	800385c <LoopCopyDataInit>

08003854 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003854:	4b0c      	ldr	r3, [pc, #48]	; (8003888 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003856:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003858:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800385a:	3104      	adds	r1, #4

0800385c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800385c:	480b      	ldr	r0, [pc, #44]	; (800388c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800385e:	4b0c      	ldr	r3, [pc, #48]	; (8003890 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003860:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003862:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003864:	d3f6      	bcc.n	8003854 <CopyDataInit>
  ldr  r2, =_sbss
 8003866:	4a0b      	ldr	r2, [pc, #44]	; (8003894 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003868:	e002      	b.n	8003870 <LoopFillZerobss>

0800386a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800386a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800386c:	f842 3b04 	str.w	r3, [r2], #4

08003870 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003870:	4b09      	ldr	r3, [pc, #36]	; (8003898 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003872:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003874:	d3f9      	bcc.n	800386a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003876:	f7ff ffc3 	bl	8003800 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800387a:	f000 f811 	bl	80038a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800387e:	f7ff fe93 	bl	80035a8 <main>
  bx  lr    
 8003882:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003884:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8003888:	08004234 	.word	0x08004234
  ldr  r0, =_sdata
 800388c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003890:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 8003894:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 8003898:	20003ed8 	.word	0x20003ed8

0800389c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800389c:	e7fe      	b.n	800389c <ADC_IRQHandler>
	...

080038a0 <__libc_init_array>:
 80038a0:	b570      	push	{r4, r5, r6, lr}
 80038a2:	4e0d      	ldr	r6, [pc, #52]	; (80038d8 <__libc_init_array+0x38>)
 80038a4:	4c0d      	ldr	r4, [pc, #52]	; (80038dc <__libc_init_array+0x3c>)
 80038a6:	1ba4      	subs	r4, r4, r6
 80038a8:	10a4      	asrs	r4, r4, #2
 80038aa:	2500      	movs	r5, #0
 80038ac:	42a5      	cmp	r5, r4
 80038ae:	d109      	bne.n	80038c4 <__libc_init_array+0x24>
 80038b0:	4e0b      	ldr	r6, [pc, #44]	; (80038e0 <__libc_init_array+0x40>)
 80038b2:	4c0c      	ldr	r4, [pc, #48]	; (80038e4 <__libc_init_array+0x44>)
 80038b4:	f000 fc2e 	bl	8004114 <_init>
 80038b8:	1ba4      	subs	r4, r4, r6
 80038ba:	10a4      	asrs	r4, r4, #2
 80038bc:	2500      	movs	r5, #0
 80038be:	42a5      	cmp	r5, r4
 80038c0:	d105      	bne.n	80038ce <__libc_init_array+0x2e>
 80038c2:	bd70      	pop	{r4, r5, r6, pc}
 80038c4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80038c8:	4798      	blx	r3
 80038ca:	3501      	adds	r5, #1
 80038cc:	e7ee      	b.n	80038ac <__libc_init_array+0xc>
 80038ce:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80038d2:	4798      	blx	r3
 80038d4:	3501      	adds	r5, #1
 80038d6:	e7f2      	b.n	80038be <__libc_init_array+0x1e>
 80038d8:	0800422c 	.word	0x0800422c
 80038dc:	0800422c 	.word	0x0800422c
 80038e0:	0800422c 	.word	0x0800422c
 80038e4:	08004230 	.word	0x08004230

080038e8 <memcpy>:
 80038e8:	b510      	push	{r4, lr}
 80038ea:	1e43      	subs	r3, r0, #1
 80038ec:	440a      	add	r2, r1
 80038ee:	4291      	cmp	r1, r2
 80038f0:	d100      	bne.n	80038f4 <memcpy+0xc>
 80038f2:	bd10      	pop	{r4, pc}
 80038f4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80038f8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80038fc:	e7f7      	b.n	80038ee <memcpy+0x6>
	...

08003900 <siprintf>:
 8003900:	b40e      	push	{r1, r2, r3}
 8003902:	b500      	push	{lr}
 8003904:	b09c      	sub	sp, #112	; 0x70
 8003906:	ab1d      	add	r3, sp, #116	; 0x74
 8003908:	9002      	str	r0, [sp, #8]
 800390a:	9006      	str	r0, [sp, #24]
 800390c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003910:	4809      	ldr	r0, [pc, #36]	; (8003938 <siprintf+0x38>)
 8003912:	9107      	str	r1, [sp, #28]
 8003914:	9104      	str	r1, [sp, #16]
 8003916:	4909      	ldr	r1, [pc, #36]	; (800393c <siprintf+0x3c>)
 8003918:	f853 2b04 	ldr.w	r2, [r3], #4
 800391c:	9105      	str	r1, [sp, #20]
 800391e:	6800      	ldr	r0, [r0, #0]
 8003920:	9301      	str	r3, [sp, #4]
 8003922:	a902      	add	r1, sp, #8
 8003924:	f000 f866 	bl	80039f4 <_svfiprintf_r>
 8003928:	9b02      	ldr	r3, [sp, #8]
 800392a:	2200      	movs	r2, #0
 800392c:	701a      	strb	r2, [r3, #0]
 800392e:	b01c      	add	sp, #112	; 0x70
 8003930:	f85d eb04 	ldr.w	lr, [sp], #4
 8003934:	b003      	add	sp, #12
 8003936:	4770      	bx	lr
 8003938:	20000010 	.word	0x20000010
 800393c:	ffff0208 	.word	0xffff0208

08003940 <__ssputs_r>:
 8003940:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003944:	688e      	ldr	r6, [r1, #8]
 8003946:	429e      	cmp	r6, r3
 8003948:	4682      	mov	sl, r0
 800394a:	460c      	mov	r4, r1
 800394c:	4690      	mov	r8, r2
 800394e:	4699      	mov	r9, r3
 8003950:	d837      	bhi.n	80039c2 <__ssputs_r+0x82>
 8003952:	898a      	ldrh	r2, [r1, #12]
 8003954:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003958:	d031      	beq.n	80039be <__ssputs_r+0x7e>
 800395a:	6825      	ldr	r5, [r4, #0]
 800395c:	6909      	ldr	r1, [r1, #16]
 800395e:	1a6f      	subs	r7, r5, r1
 8003960:	6965      	ldr	r5, [r4, #20]
 8003962:	2302      	movs	r3, #2
 8003964:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003968:	fb95 f5f3 	sdiv	r5, r5, r3
 800396c:	f109 0301 	add.w	r3, r9, #1
 8003970:	443b      	add	r3, r7
 8003972:	429d      	cmp	r5, r3
 8003974:	bf38      	it	cc
 8003976:	461d      	movcc	r5, r3
 8003978:	0553      	lsls	r3, r2, #21
 800397a:	d530      	bpl.n	80039de <__ssputs_r+0x9e>
 800397c:	4629      	mov	r1, r5
 800397e:	f000 fb21 	bl	8003fc4 <_malloc_r>
 8003982:	4606      	mov	r6, r0
 8003984:	b950      	cbnz	r0, 800399c <__ssputs_r+0x5c>
 8003986:	230c      	movs	r3, #12
 8003988:	f8ca 3000 	str.w	r3, [sl]
 800398c:	89a3      	ldrh	r3, [r4, #12]
 800398e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003992:	81a3      	strh	r3, [r4, #12]
 8003994:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003998:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800399c:	463a      	mov	r2, r7
 800399e:	6921      	ldr	r1, [r4, #16]
 80039a0:	f7ff ffa2 	bl	80038e8 <memcpy>
 80039a4:	89a3      	ldrh	r3, [r4, #12]
 80039a6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80039aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039ae:	81a3      	strh	r3, [r4, #12]
 80039b0:	6126      	str	r6, [r4, #16]
 80039b2:	6165      	str	r5, [r4, #20]
 80039b4:	443e      	add	r6, r7
 80039b6:	1bed      	subs	r5, r5, r7
 80039b8:	6026      	str	r6, [r4, #0]
 80039ba:	60a5      	str	r5, [r4, #8]
 80039bc:	464e      	mov	r6, r9
 80039be:	454e      	cmp	r6, r9
 80039c0:	d900      	bls.n	80039c4 <__ssputs_r+0x84>
 80039c2:	464e      	mov	r6, r9
 80039c4:	4632      	mov	r2, r6
 80039c6:	4641      	mov	r1, r8
 80039c8:	6820      	ldr	r0, [r4, #0]
 80039ca:	f000 fa93 	bl	8003ef4 <memmove>
 80039ce:	68a3      	ldr	r3, [r4, #8]
 80039d0:	1b9b      	subs	r3, r3, r6
 80039d2:	60a3      	str	r3, [r4, #8]
 80039d4:	6823      	ldr	r3, [r4, #0]
 80039d6:	441e      	add	r6, r3
 80039d8:	6026      	str	r6, [r4, #0]
 80039da:	2000      	movs	r0, #0
 80039dc:	e7dc      	b.n	8003998 <__ssputs_r+0x58>
 80039de:	462a      	mov	r2, r5
 80039e0:	f000 fb4a 	bl	8004078 <_realloc_r>
 80039e4:	4606      	mov	r6, r0
 80039e6:	2800      	cmp	r0, #0
 80039e8:	d1e2      	bne.n	80039b0 <__ssputs_r+0x70>
 80039ea:	6921      	ldr	r1, [r4, #16]
 80039ec:	4650      	mov	r0, sl
 80039ee:	f000 fa9b 	bl	8003f28 <_free_r>
 80039f2:	e7c8      	b.n	8003986 <__ssputs_r+0x46>

080039f4 <_svfiprintf_r>:
 80039f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80039f8:	461d      	mov	r5, r3
 80039fa:	898b      	ldrh	r3, [r1, #12]
 80039fc:	061f      	lsls	r7, r3, #24
 80039fe:	b09d      	sub	sp, #116	; 0x74
 8003a00:	4680      	mov	r8, r0
 8003a02:	460c      	mov	r4, r1
 8003a04:	4616      	mov	r6, r2
 8003a06:	d50f      	bpl.n	8003a28 <_svfiprintf_r+0x34>
 8003a08:	690b      	ldr	r3, [r1, #16]
 8003a0a:	b96b      	cbnz	r3, 8003a28 <_svfiprintf_r+0x34>
 8003a0c:	2140      	movs	r1, #64	; 0x40
 8003a0e:	f000 fad9 	bl	8003fc4 <_malloc_r>
 8003a12:	6020      	str	r0, [r4, #0]
 8003a14:	6120      	str	r0, [r4, #16]
 8003a16:	b928      	cbnz	r0, 8003a24 <_svfiprintf_r+0x30>
 8003a18:	230c      	movs	r3, #12
 8003a1a:	f8c8 3000 	str.w	r3, [r8]
 8003a1e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003a22:	e0c8      	b.n	8003bb6 <_svfiprintf_r+0x1c2>
 8003a24:	2340      	movs	r3, #64	; 0x40
 8003a26:	6163      	str	r3, [r4, #20]
 8003a28:	2300      	movs	r3, #0
 8003a2a:	9309      	str	r3, [sp, #36]	; 0x24
 8003a2c:	2320      	movs	r3, #32
 8003a2e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003a32:	2330      	movs	r3, #48	; 0x30
 8003a34:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003a38:	9503      	str	r5, [sp, #12]
 8003a3a:	f04f 0b01 	mov.w	fp, #1
 8003a3e:	4637      	mov	r7, r6
 8003a40:	463d      	mov	r5, r7
 8003a42:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003a46:	b10b      	cbz	r3, 8003a4c <_svfiprintf_r+0x58>
 8003a48:	2b25      	cmp	r3, #37	; 0x25
 8003a4a:	d13e      	bne.n	8003aca <_svfiprintf_r+0xd6>
 8003a4c:	ebb7 0a06 	subs.w	sl, r7, r6
 8003a50:	d00b      	beq.n	8003a6a <_svfiprintf_r+0x76>
 8003a52:	4653      	mov	r3, sl
 8003a54:	4632      	mov	r2, r6
 8003a56:	4621      	mov	r1, r4
 8003a58:	4640      	mov	r0, r8
 8003a5a:	f7ff ff71 	bl	8003940 <__ssputs_r>
 8003a5e:	3001      	adds	r0, #1
 8003a60:	f000 80a4 	beq.w	8003bac <_svfiprintf_r+0x1b8>
 8003a64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003a66:	4453      	add	r3, sl
 8003a68:	9309      	str	r3, [sp, #36]	; 0x24
 8003a6a:	783b      	ldrb	r3, [r7, #0]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	f000 809d 	beq.w	8003bac <_svfiprintf_r+0x1b8>
 8003a72:	2300      	movs	r3, #0
 8003a74:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003a78:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003a7c:	9304      	str	r3, [sp, #16]
 8003a7e:	9307      	str	r3, [sp, #28]
 8003a80:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003a84:	931a      	str	r3, [sp, #104]	; 0x68
 8003a86:	462f      	mov	r7, r5
 8003a88:	2205      	movs	r2, #5
 8003a8a:	f817 1b01 	ldrb.w	r1, [r7], #1
 8003a8e:	4850      	ldr	r0, [pc, #320]	; (8003bd0 <_svfiprintf_r+0x1dc>)
 8003a90:	f7fc fbbe 	bl	8000210 <memchr>
 8003a94:	9b04      	ldr	r3, [sp, #16]
 8003a96:	b9d0      	cbnz	r0, 8003ace <_svfiprintf_r+0xda>
 8003a98:	06d9      	lsls	r1, r3, #27
 8003a9a:	bf44      	itt	mi
 8003a9c:	2220      	movmi	r2, #32
 8003a9e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003aa2:	071a      	lsls	r2, r3, #28
 8003aa4:	bf44      	itt	mi
 8003aa6:	222b      	movmi	r2, #43	; 0x2b
 8003aa8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003aac:	782a      	ldrb	r2, [r5, #0]
 8003aae:	2a2a      	cmp	r2, #42	; 0x2a
 8003ab0:	d015      	beq.n	8003ade <_svfiprintf_r+0xea>
 8003ab2:	9a07      	ldr	r2, [sp, #28]
 8003ab4:	462f      	mov	r7, r5
 8003ab6:	2000      	movs	r0, #0
 8003ab8:	250a      	movs	r5, #10
 8003aba:	4639      	mov	r1, r7
 8003abc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003ac0:	3b30      	subs	r3, #48	; 0x30
 8003ac2:	2b09      	cmp	r3, #9
 8003ac4:	d94d      	bls.n	8003b62 <_svfiprintf_r+0x16e>
 8003ac6:	b1b8      	cbz	r0, 8003af8 <_svfiprintf_r+0x104>
 8003ac8:	e00f      	b.n	8003aea <_svfiprintf_r+0xf6>
 8003aca:	462f      	mov	r7, r5
 8003acc:	e7b8      	b.n	8003a40 <_svfiprintf_r+0x4c>
 8003ace:	4a40      	ldr	r2, [pc, #256]	; (8003bd0 <_svfiprintf_r+0x1dc>)
 8003ad0:	1a80      	subs	r0, r0, r2
 8003ad2:	fa0b f000 	lsl.w	r0, fp, r0
 8003ad6:	4318      	orrs	r0, r3
 8003ad8:	9004      	str	r0, [sp, #16]
 8003ada:	463d      	mov	r5, r7
 8003adc:	e7d3      	b.n	8003a86 <_svfiprintf_r+0x92>
 8003ade:	9a03      	ldr	r2, [sp, #12]
 8003ae0:	1d11      	adds	r1, r2, #4
 8003ae2:	6812      	ldr	r2, [r2, #0]
 8003ae4:	9103      	str	r1, [sp, #12]
 8003ae6:	2a00      	cmp	r2, #0
 8003ae8:	db01      	blt.n	8003aee <_svfiprintf_r+0xfa>
 8003aea:	9207      	str	r2, [sp, #28]
 8003aec:	e004      	b.n	8003af8 <_svfiprintf_r+0x104>
 8003aee:	4252      	negs	r2, r2
 8003af0:	f043 0302 	orr.w	r3, r3, #2
 8003af4:	9207      	str	r2, [sp, #28]
 8003af6:	9304      	str	r3, [sp, #16]
 8003af8:	783b      	ldrb	r3, [r7, #0]
 8003afa:	2b2e      	cmp	r3, #46	; 0x2e
 8003afc:	d10c      	bne.n	8003b18 <_svfiprintf_r+0x124>
 8003afe:	787b      	ldrb	r3, [r7, #1]
 8003b00:	2b2a      	cmp	r3, #42	; 0x2a
 8003b02:	d133      	bne.n	8003b6c <_svfiprintf_r+0x178>
 8003b04:	9b03      	ldr	r3, [sp, #12]
 8003b06:	1d1a      	adds	r2, r3, #4
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	9203      	str	r2, [sp, #12]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	bfb8      	it	lt
 8003b10:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8003b14:	3702      	adds	r7, #2
 8003b16:	9305      	str	r3, [sp, #20]
 8003b18:	4d2e      	ldr	r5, [pc, #184]	; (8003bd4 <_svfiprintf_r+0x1e0>)
 8003b1a:	7839      	ldrb	r1, [r7, #0]
 8003b1c:	2203      	movs	r2, #3
 8003b1e:	4628      	mov	r0, r5
 8003b20:	f7fc fb76 	bl	8000210 <memchr>
 8003b24:	b138      	cbz	r0, 8003b36 <_svfiprintf_r+0x142>
 8003b26:	2340      	movs	r3, #64	; 0x40
 8003b28:	1b40      	subs	r0, r0, r5
 8003b2a:	fa03 f000 	lsl.w	r0, r3, r0
 8003b2e:	9b04      	ldr	r3, [sp, #16]
 8003b30:	4303      	orrs	r3, r0
 8003b32:	3701      	adds	r7, #1
 8003b34:	9304      	str	r3, [sp, #16]
 8003b36:	7839      	ldrb	r1, [r7, #0]
 8003b38:	4827      	ldr	r0, [pc, #156]	; (8003bd8 <_svfiprintf_r+0x1e4>)
 8003b3a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003b3e:	2206      	movs	r2, #6
 8003b40:	1c7e      	adds	r6, r7, #1
 8003b42:	f7fc fb65 	bl	8000210 <memchr>
 8003b46:	2800      	cmp	r0, #0
 8003b48:	d038      	beq.n	8003bbc <_svfiprintf_r+0x1c8>
 8003b4a:	4b24      	ldr	r3, [pc, #144]	; (8003bdc <_svfiprintf_r+0x1e8>)
 8003b4c:	bb13      	cbnz	r3, 8003b94 <_svfiprintf_r+0x1a0>
 8003b4e:	9b03      	ldr	r3, [sp, #12]
 8003b50:	3307      	adds	r3, #7
 8003b52:	f023 0307 	bic.w	r3, r3, #7
 8003b56:	3308      	adds	r3, #8
 8003b58:	9303      	str	r3, [sp, #12]
 8003b5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003b5c:	444b      	add	r3, r9
 8003b5e:	9309      	str	r3, [sp, #36]	; 0x24
 8003b60:	e76d      	b.n	8003a3e <_svfiprintf_r+0x4a>
 8003b62:	fb05 3202 	mla	r2, r5, r2, r3
 8003b66:	2001      	movs	r0, #1
 8003b68:	460f      	mov	r7, r1
 8003b6a:	e7a6      	b.n	8003aba <_svfiprintf_r+0xc6>
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	3701      	adds	r7, #1
 8003b70:	9305      	str	r3, [sp, #20]
 8003b72:	4619      	mov	r1, r3
 8003b74:	250a      	movs	r5, #10
 8003b76:	4638      	mov	r0, r7
 8003b78:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003b7c:	3a30      	subs	r2, #48	; 0x30
 8003b7e:	2a09      	cmp	r2, #9
 8003b80:	d903      	bls.n	8003b8a <_svfiprintf_r+0x196>
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d0c8      	beq.n	8003b18 <_svfiprintf_r+0x124>
 8003b86:	9105      	str	r1, [sp, #20]
 8003b88:	e7c6      	b.n	8003b18 <_svfiprintf_r+0x124>
 8003b8a:	fb05 2101 	mla	r1, r5, r1, r2
 8003b8e:	2301      	movs	r3, #1
 8003b90:	4607      	mov	r7, r0
 8003b92:	e7f0      	b.n	8003b76 <_svfiprintf_r+0x182>
 8003b94:	ab03      	add	r3, sp, #12
 8003b96:	9300      	str	r3, [sp, #0]
 8003b98:	4622      	mov	r2, r4
 8003b9a:	4b11      	ldr	r3, [pc, #68]	; (8003be0 <_svfiprintf_r+0x1ec>)
 8003b9c:	a904      	add	r1, sp, #16
 8003b9e:	4640      	mov	r0, r8
 8003ba0:	f3af 8000 	nop.w
 8003ba4:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8003ba8:	4681      	mov	r9, r0
 8003baa:	d1d6      	bne.n	8003b5a <_svfiprintf_r+0x166>
 8003bac:	89a3      	ldrh	r3, [r4, #12]
 8003bae:	065b      	lsls	r3, r3, #25
 8003bb0:	f53f af35 	bmi.w	8003a1e <_svfiprintf_r+0x2a>
 8003bb4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003bb6:	b01d      	add	sp, #116	; 0x74
 8003bb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003bbc:	ab03      	add	r3, sp, #12
 8003bbe:	9300      	str	r3, [sp, #0]
 8003bc0:	4622      	mov	r2, r4
 8003bc2:	4b07      	ldr	r3, [pc, #28]	; (8003be0 <_svfiprintf_r+0x1ec>)
 8003bc4:	a904      	add	r1, sp, #16
 8003bc6:	4640      	mov	r0, r8
 8003bc8:	f000 f882 	bl	8003cd0 <_printf_i>
 8003bcc:	e7ea      	b.n	8003ba4 <_svfiprintf_r+0x1b0>
 8003bce:	bf00      	nop
 8003bd0:	080041f0 	.word	0x080041f0
 8003bd4:	080041f6 	.word	0x080041f6
 8003bd8:	080041fa 	.word	0x080041fa
 8003bdc:	00000000 	.word	0x00000000
 8003be0:	08003941 	.word	0x08003941

08003be4 <_printf_common>:
 8003be4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003be8:	4691      	mov	r9, r2
 8003bea:	461f      	mov	r7, r3
 8003bec:	688a      	ldr	r2, [r1, #8]
 8003bee:	690b      	ldr	r3, [r1, #16]
 8003bf0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	bfb8      	it	lt
 8003bf8:	4613      	movlt	r3, r2
 8003bfa:	f8c9 3000 	str.w	r3, [r9]
 8003bfe:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003c02:	4606      	mov	r6, r0
 8003c04:	460c      	mov	r4, r1
 8003c06:	b112      	cbz	r2, 8003c0e <_printf_common+0x2a>
 8003c08:	3301      	adds	r3, #1
 8003c0a:	f8c9 3000 	str.w	r3, [r9]
 8003c0e:	6823      	ldr	r3, [r4, #0]
 8003c10:	0699      	lsls	r1, r3, #26
 8003c12:	bf42      	ittt	mi
 8003c14:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003c18:	3302      	addmi	r3, #2
 8003c1a:	f8c9 3000 	strmi.w	r3, [r9]
 8003c1e:	6825      	ldr	r5, [r4, #0]
 8003c20:	f015 0506 	ands.w	r5, r5, #6
 8003c24:	d107      	bne.n	8003c36 <_printf_common+0x52>
 8003c26:	f104 0a19 	add.w	sl, r4, #25
 8003c2a:	68e3      	ldr	r3, [r4, #12]
 8003c2c:	f8d9 2000 	ldr.w	r2, [r9]
 8003c30:	1a9b      	subs	r3, r3, r2
 8003c32:	42ab      	cmp	r3, r5
 8003c34:	dc28      	bgt.n	8003c88 <_printf_common+0xa4>
 8003c36:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003c3a:	6822      	ldr	r2, [r4, #0]
 8003c3c:	3300      	adds	r3, #0
 8003c3e:	bf18      	it	ne
 8003c40:	2301      	movne	r3, #1
 8003c42:	0692      	lsls	r2, r2, #26
 8003c44:	d42d      	bmi.n	8003ca2 <_printf_common+0xbe>
 8003c46:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003c4a:	4639      	mov	r1, r7
 8003c4c:	4630      	mov	r0, r6
 8003c4e:	47c0      	blx	r8
 8003c50:	3001      	adds	r0, #1
 8003c52:	d020      	beq.n	8003c96 <_printf_common+0xb2>
 8003c54:	6823      	ldr	r3, [r4, #0]
 8003c56:	68e5      	ldr	r5, [r4, #12]
 8003c58:	f8d9 2000 	ldr.w	r2, [r9]
 8003c5c:	f003 0306 	and.w	r3, r3, #6
 8003c60:	2b04      	cmp	r3, #4
 8003c62:	bf08      	it	eq
 8003c64:	1aad      	subeq	r5, r5, r2
 8003c66:	68a3      	ldr	r3, [r4, #8]
 8003c68:	6922      	ldr	r2, [r4, #16]
 8003c6a:	bf0c      	ite	eq
 8003c6c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003c70:	2500      	movne	r5, #0
 8003c72:	4293      	cmp	r3, r2
 8003c74:	bfc4      	itt	gt
 8003c76:	1a9b      	subgt	r3, r3, r2
 8003c78:	18ed      	addgt	r5, r5, r3
 8003c7a:	f04f 0900 	mov.w	r9, #0
 8003c7e:	341a      	adds	r4, #26
 8003c80:	454d      	cmp	r5, r9
 8003c82:	d11a      	bne.n	8003cba <_printf_common+0xd6>
 8003c84:	2000      	movs	r0, #0
 8003c86:	e008      	b.n	8003c9a <_printf_common+0xb6>
 8003c88:	2301      	movs	r3, #1
 8003c8a:	4652      	mov	r2, sl
 8003c8c:	4639      	mov	r1, r7
 8003c8e:	4630      	mov	r0, r6
 8003c90:	47c0      	blx	r8
 8003c92:	3001      	adds	r0, #1
 8003c94:	d103      	bne.n	8003c9e <_printf_common+0xba>
 8003c96:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c9e:	3501      	adds	r5, #1
 8003ca0:	e7c3      	b.n	8003c2a <_printf_common+0x46>
 8003ca2:	18e1      	adds	r1, r4, r3
 8003ca4:	1c5a      	adds	r2, r3, #1
 8003ca6:	2030      	movs	r0, #48	; 0x30
 8003ca8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003cac:	4422      	add	r2, r4
 8003cae:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003cb2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003cb6:	3302      	adds	r3, #2
 8003cb8:	e7c5      	b.n	8003c46 <_printf_common+0x62>
 8003cba:	2301      	movs	r3, #1
 8003cbc:	4622      	mov	r2, r4
 8003cbe:	4639      	mov	r1, r7
 8003cc0:	4630      	mov	r0, r6
 8003cc2:	47c0      	blx	r8
 8003cc4:	3001      	adds	r0, #1
 8003cc6:	d0e6      	beq.n	8003c96 <_printf_common+0xb2>
 8003cc8:	f109 0901 	add.w	r9, r9, #1
 8003ccc:	e7d8      	b.n	8003c80 <_printf_common+0x9c>
	...

08003cd0 <_printf_i>:
 8003cd0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003cd4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003cd8:	460c      	mov	r4, r1
 8003cda:	7e09      	ldrb	r1, [r1, #24]
 8003cdc:	b085      	sub	sp, #20
 8003cde:	296e      	cmp	r1, #110	; 0x6e
 8003ce0:	4617      	mov	r7, r2
 8003ce2:	4606      	mov	r6, r0
 8003ce4:	4698      	mov	r8, r3
 8003ce6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003ce8:	f000 80b3 	beq.w	8003e52 <_printf_i+0x182>
 8003cec:	d822      	bhi.n	8003d34 <_printf_i+0x64>
 8003cee:	2963      	cmp	r1, #99	; 0x63
 8003cf0:	d036      	beq.n	8003d60 <_printf_i+0x90>
 8003cf2:	d80a      	bhi.n	8003d0a <_printf_i+0x3a>
 8003cf4:	2900      	cmp	r1, #0
 8003cf6:	f000 80b9 	beq.w	8003e6c <_printf_i+0x19c>
 8003cfa:	2958      	cmp	r1, #88	; 0x58
 8003cfc:	f000 8083 	beq.w	8003e06 <_printf_i+0x136>
 8003d00:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003d04:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003d08:	e032      	b.n	8003d70 <_printf_i+0xa0>
 8003d0a:	2964      	cmp	r1, #100	; 0x64
 8003d0c:	d001      	beq.n	8003d12 <_printf_i+0x42>
 8003d0e:	2969      	cmp	r1, #105	; 0x69
 8003d10:	d1f6      	bne.n	8003d00 <_printf_i+0x30>
 8003d12:	6820      	ldr	r0, [r4, #0]
 8003d14:	6813      	ldr	r3, [r2, #0]
 8003d16:	0605      	lsls	r5, r0, #24
 8003d18:	f103 0104 	add.w	r1, r3, #4
 8003d1c:	d52a      	bpl.n	8003d74 <_printf_i+0xa4>
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	6011      	str	r1, [r2, #0]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	da03      	bge.n	8003d2e <_printf_i+0x5e>
 8003d26:	222d      	movs	r2, #45	; 0x2d
 8003d28:	425b      	negs	r3, r3
 8003d2a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003d2e:	486f      	ldr	r0, [pc, #444]	; (8003eec <_printf_i+0x21c>)
 8003d30:	220a      	movs	r2, #10
 8003d32:	e039      	b.n	8003da8 <_printf_i+0xd8>
 8003d34:	2973      	cmp	r1, #115	; 0x73
 8003d36:	f000 809d 	beq.w	8003e74 <_printf_i+0x1a4>
 8003d3a:	d808      	bhi.n	8003d4e <_printf_i+0x7e>
 8003d3c:	296f      	cmp	r1, #111	; 0x6f
 8003d3e:	d020      	beq.n	8003d82 <_printf_i+0xb2>
 8003d40:	2970      	cmp	r1, #112	; 0x70
 8003d42:	d1dd      	bne.n	8003d00 <_printf_i+0x30>
 8003d44:	6823      	ldr	r3, [r4, #0]
 8003d46:	f043 0320 	orr.w	r3, r3, #32
 8003d4a:	6023      	str	r3, [r4, #0]
 8003d4c:	e003      	b.n	8003d56 <_printf_i+0x86>
 8003d4e:	2975      	cmp	r1, #117	; 0x75
 8003d50:	d017      	beq.n	8003d82 <_printf_i+0xb2>
 8003d52:	2978      	cmp	r1, #120	; 0x78
 8003d54:	d1d4      	bne.n	8003d00 <_printf_i+0x30>
 8003d56:	2378      	movs	r3, #120	; 0x78
 8003d58:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003d5c:	4864      	ldr	r0, [pc, #400]	; (8003ef0 <_printf_i+0x220>)
 8003d5e:	e055      	b.n	8003e0c <_printf_i+0x13c>
 8003d60:	6813      	ldr	r3, [r2, #0]
 8003d62:	1d19      	adds	r1, r3, #4
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	6011      	str	r1, [r2, #0]
 8003d68:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003d6c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003d70:	2301      	movs	r3, #1
 8003d72:	e08c      	b.n	8003e8e <_printf_i+0x1be>
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	6011      	str	r1, [r2, #0]
 8003d78:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003d7c:	bf18      	it	ne
 8003d7e:	b21b      	sxthne	r3, r3
 8003d80:	e7cf      	b.n	8003d22 <_printf_i+0x52>
 8003d82:	6813      	ldr	r3, [r2, #0]
 8003d84:	6825      	ldr	r5, [r4, #0]
 8003d86:	1d18      	adds	r0, r3, #4
 8003d88:	6010      	str	r0, [r2, #0]
 8003d8a:	0628      	lsls	r0, r5, #24
 8003d8c:	d501      	bpl.n	8003d92 <_printf_i+0xc2>
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	e002      	b.n	8003d98 <_printf_i+0xc8>
 8003d92:	0668      	lsls	r0, r5, #25
 8003d94:	d5fb      	bpl.n	8003d8e <_printf_i+0xbe>
 8003d96:	881b      	ldrh	r3, [r3, #0]
 8003d98:	4854      	ldr	r0, [pc, #336]	; (8003eec <_printf_i+0x21c>)
 8003d9a:	296f      	cmp	r1, #111	; 0x6f
 8003d9c:	bf14      	ite	ne
 8003d9e:	220a      	movne	r2, #10
 8003da0:	2208      	moveq	r2, #8
 8003da2:	2100      	movs	r1, #0
 8003da4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003da8:	6865      	ldr	r5, [r4, #4]
 8003daa:	60a5      	str	r5, [r4, #8]
 8003dac:	2d00      	cmp	r5, #0
 8003dae:	f2c0 8095 	blt.w	8003edc <_printf_i+0x20c>
 8003db2:	6821      	ldr	r1, [r4, #0]
 8003db4:	f021 0104 	bic.w	r1, r1, #4
 8003db8:	6021      	str	r1, [r4, #0]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d13d      	bne.n	8003e3a <_printf_i+0x16a>
 8003dbe:	2d00      	cmp	r5, #0
 8003dc0:	f040 808e 	bne.w	8003ee0 <_printf_i+0x210>
 8003dc4:	4665      	mov	r5, ip
 8003dc6:	2a08      	cmp	r2, #8
 8003dc8:	d10b      	bne.n	8003de2 <_printf_i+0x112>
 8003dca:	6823      	ldr	r3, [r4, #0]
 8003dcc:	07db      	lsls	r3, r3, #31
 8003dce:	d508      	bpl.n	8003de2 <_printf_i+0x112>
 8003dd0:	6923      	ldr	r3, [r4, #16]
 8003dd2:	6862      	ldr	r2, [r4, #4]
 8003dd4:	429a      	cmp	r2, r3
 8003dd6:	bfde      	ittt	le
 8003dd8:	2330      	movle	r3, #48	; 0x30
 8003dda:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003dde:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8003de2:	ebac 0305 	sub.w	r3, ip, r5
 8003de6:	6123      	str	r3, [r4, #16]
 8003de8:	f8cd 8000 	str.w	r8, [sp]
 8003dec:	463b      	mov	r3, r7
 8003dee:	aa03      	add	r2, sp, #12
 8003df0:	4621      	mov	r1, r4
 8003df2:	4630      	mov	r0, r6
 8003df4:	f7ff fef6 	bl	8003be4 <_printf_common>
 8003df8:	3001      	adds	r0, #1
 8003dfa:	d14d      	bne.n	8003e98 <_printf_i+0x1c8>
 8003dfc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003e00:	b005      	add	sp, #20
 8003e02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003e06:	4839      	ldr	r0, [pc, #228]	; (8003eec <_printf_i+0x21c>)
 8003e08:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003e0c:	6813      	ldr	r3, [r2, #0]
 8003e0e:	6821      	ldr	r1, [r4, #0]
 8003e10:	1d1d      	adds	r5, r3, #4
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	6015      	str	r5, [r2, #0]
 8003e16:	060a      	lsls	r2, r1, #24
 8003e18:	d50b      	bpl.n	8003e32 <_printf_i+0x162>
 8003e1a:	07ca      	lsls	r2, r1, #31
 8003e1c:	bf44      	itt	mi
 8003e1e:	f041 0120 	orrmi.w	r1, r1, #32
 8003e22:	6021      	strmi	r1, [r4, #0]
 8003e24:	b91b      	cbnz	r3, 8003e2e <_printf_i+0x15e>
 8003e26:	6822      	ldr	r2, [r4, #0]
 8003e28:	f022 0220 	bic.w	r2, r2, #32
 8003e2c:	6022      	str	r2, [r4, #0]
 8003e2e:	2210      	movs	r2, #16
 8003e30:	e7b7      	b.n	8003da2 <_printf_i+0xd2>
 8003e32:	064d      	lsls	r5, r1, #25
 8003e34:	bf48      	it	mi
 8003e36:	b29b      	uxthmi	r3, r3
 8003e38:	e7ef      	b.n	8003e1a <_printf_i+0x14a>
 8003e3a:	4665      	mov	r5, ip
 8003e3c:	fbb3 f1f2 	udiv	r1, r3, r2
 8003e40:	fb02 3311 	mls	r3, r2, r1, r3
 8003e44:	5cc3      	ldrb	r3, [r0, r3]
 8003e46:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003e4a:	460b      	mov	r3, r1
 8003e4c:	2900      	cmp	r1, #0
 8003e4e:	d1f5      	bne.n	8003e3c <_printf_i+0x16c>
 8003e50:	e7b9      	b.n	8003dc6 <_printf_i+0xf6>
 8003e52:	6813      	ldr	r3, [r2, #0]
 8003e54:	6825      	ldr	r5, [r4, #0]
 8003e56:	6961      	ldr	r1, [r4, #20]
 8003e58:	1d18      	adds	r0, r3, #4
 8003e5a:	6010      	str	r0, [r2, #0]
 8003e5c:	0628      	lsls	r0, r5, #24
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	d501      	bpl.n	8003e66 <_printf_i+0x196>
 8003e62:	6019      	str	r1, [r3, #0]
 8003e64:	e002      	b.n	8003e6c <_printf_i+0x19c>
 8003e66:	066a      	lsls	r2, r5, #25
 8003e68:	d5fb      	bpl.n	8003e62 <_printf_i+0x192>
 8003e6a:	8019      	strh	r1, [r3, #0]
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	6123      	str	r3, [r4, #16]
 8003e70:	4665      	mov	r5, ip
 8003e72:	e7b9      	b.n	8003de8 <_printf_i+0x118>
 8003e74:	6813      	ldr	r3, [r2, #0]
 8003e76:	1d19      	adds	r1, r3, #4
 8003e78:	6011      	str	r1, [r2, #0]
 8003e7a:	681d      	ldr	r5, [r3, #0]
 8003e7c:	6862      	ldr	r2, [r4, #4]
 8003e7e:	2100      	movs	r1, #0
 8003e80:	4628      	mov	r0, r5
 8003e82:	f7fc f9c5 	bl	8000210 <memchr>
 8003e86:	b108      	cbz	r0, 8003e8c <_printf_i+0x1bc>
 8003e88:	1b40      	subs	r0, r0, r5
 8003e8a:	6060      	str	r0, [r4, #4]
 8003e8c:	6863      	ldr	r3, [r4, #4]
 8003e8e:	6123      	str	r3, [r4, #16]
 8003e90:	2300      	movs	r3, #0
 8003e92:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003e96:	e7a7      	b.n	8003de8 <_printf_i+0x118>
 8003e98:	6923      	ldr	r3, [r4, #16]
 8003e9a:	462a      	mov	r2, r5
 8003e9c:	4639      	mov	r1, r7
 8003e9e:	4630      	mov	r0, r6
 8003ea0:	47c0      	blx	r8
 8003ea2:	3001      	adds	r0, #1
 8003ea4:	d0aa      	beq.n	8003dfc <_printf_i+0x12c>
 8003ea6:	6823      	ldr	r3, [r4, #0]
 8003ea8:	079b      	lsls	r3, r3, #30
 8003eaa:	d413      	bmi.n	8003ed4 <_printf_i+0x204>
 8003eac:	68e0      	ldr	r0, [r4, #12]
 8003eae:	9b03      	ldr	r3, [sp, #12]
 8003eb0:	4298      	cmp	r0, r3
 8003eb2:	bfb8      	it	lt
 8003eb4:	4618      	movlt	r0, r3
 8003eb6:	e7a3      	b.n	8003e00 <_printf_i+0x130>
 8003eb8:	2301      	movs	r3, #1
 8003eba:	464a      	mov	r2, r9
 8003ebc:	4639      	mov	r1, r7
 8003ebe:	4630      	mov	r0, r6
 8003ec0:	47c0      	blx	r8
 8003ec2:	3001      	adds	r0, #1
 8003ec4:	d09a      	beq.n	8003dfc <_printf_i+0x12c>
 8003ec6:	3501      	adds	r5, #1
 8003ec8:	68e3      	ldr	r3, [r4, #12]
 8003eca:	9a03      	ldr	r2, [sp, #12]
 8003ecc:	1a9b      	subs	r3, r3, r2
 8003ece:	42ab      	cmp	r3, r5
 8003ed0:	dcf2      	bgt.n	8003eb8 <_printf_i+0x1e8>
 8003ed2:	e7eb      	b.n	8003eac <_printf_i+0x1dc>
 8003ed4:	2500      	movs	r5, #0
 8003ed6:	f104 0919 	add.w	r9, r4, #25
 8003eda:	e7f5      	b.n	8003ec8 <_printf_i+0x1f8>
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d1ac      	bne.n	8003e3a <_printf_i+0x16a>
 8003ee0:	7803      	ldrb	r3, [r0, #0]
 8003ee2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003ee6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003eea:	e76c      	b.n	8003dc6 <_printf_i+0xf6>
 8003eec:	08004201 	.word	0x08004201
 8003ef0:	08004212 	.word	0x08004212

08003ef4 <memmove>:
 8003ef4:	4288      	cmp	r0, r1
 8003ef6:	b510      	push	{r4, lr}
 8003ef8:	eb01 0302 	add.w	r3, r1, r2
 8003efc:	d807      	bhi.n	8003f0e <memmove+0x1a>
 8003efe:	1e42      	subs	r2, r0, #1
 8003f00:	4299      	cmp	r1, r3
 8003f02:	d00a      	beq.n	8003f1a <memmove+0x26>
 8003f04:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003f08:	f802 4f01 	strb.w	r4, [r2, #1]!
 8003f0c:	e7f8      	b.n	8003f00 <memmove+0xc>
 8003f0e:	4283      	cmp	r3, r0
 8003f10:	d9f5      	bls.n	8003efe <memmove+0xa>
 8003f12:	1881      	adds	r1, r0, r2
 8003f14:	1ad2      	subs	r2, r2, r3
 8003f16:	42d3      	cmn	r3, r2
 8003f18:	d100      	bne.n	8003f1c <memmove+0x28>
 8003f1a:	bd10      	pop	{r4, pc}
 8003f1c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003f20:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8003f24:	e7f7      	b.n	8003f16 <memmove+0x22>
	...

08003f28 <_free_r>:
 8003f28:	b538      	push	{r3, r4, r5, lr}
 8003f2a:	4605      	mov	r5, r0
 8003f2c:	2900      	cmp	r1, #0
 8003f2e:	d045      	beq.n	8003fbc <_free_r+0x94>
 8003f30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003f34:	1f0c      	subs	r4, r1, #4
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	bfb8      	it	lt
 8003f3a:	18e4      	addlt	r4, r4, r3
 8003f3c:	f000 f8d2 	bl	80040e4 <__malloc_lock>
 8003f40:	4a1f      	ldr	r2, [pc, #124]	; (8003fc0 <_free_r+0x98>)
 8003f42:	6813      	ldr	r3, [r2, #0]
 8003f44:	4610      	mov	r0, r2
 8003f46:	b933      	cbnz	r3, 8003f56 <_free_r+0x2e>
 8003f48:	6063      	str	r3, [r4, #4]
 8003f4a:	6014      	str	r4, [r2, #0]
 8003f4c:	4628      	mov	r0, r5
 8003f4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003f52:	f000 b8c8 	b.w	80040e6 <__malloc_unlock>
 8003f56:	42a3      	cmp	r3, r4
 8003f58:	d90c      	bls.n	8003f74 <_free_r+0x4c>
 8003f5a:	6821      	ldr	r1, [r4, #0]
 8003f5c:	1862      	adds	r2, r4, r1
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	bf04      	itt	eq
 8003f62:	681a      	ldreq	r2, [r3, #0]
 8003f64:	685b      	ldreq	r3, [r3, #4]
 8003f66:	6063      	str	r3, [r4, #4]
 8003f68:	bf04      	itt	eq
 8003f6a:	1852      	addeq	r2, r2, r1
 8003f6c:	6022      	streq	r2, [r4, #0]
 8003f6e:	6004      	str	r4, [r0, #0]
 8003f70:	e7ec      	b.n	8003f4c <_free_r+0x24>
 8003f72:	4613      	mov	r3, r2
 8003f74:	685a      	ldr	r2, [r3, #4]
 8003f76:	b10a      	cbz	r2, 8003f7c <_free_r+0x54>
 8003f78:	42a2      	cmp	r2, r4
 8003f7a:	d9fa      	bls.n	8003f72 <_free_r+0x4a>
 8003f7c:	6819      	ldr	r1, [r3, #0]
 8003f7e:	1858      	adds	r0, r3, r1
 8003f80:	42a0      	cmp	r0, r4
 8003f82:	d10b      	bne.n	8003f9c <_free_r+0x74>
 8003f84:	6820      	ldr	r0, [r4, #0]
 8003f86:	4401      	add	r1, r0
 8003f88:	1858      	adds	r0, r3, r1
 8003f8a:	4282      	cmp	r2, r0
 8003f8c:	6019      	str	r1, [r3, #0]
 8003f8e:	d1dd      	bne.n	8003f4c <_free_r+0x24>
 8003f90:	6810      	ldr	r0, [r2, #0]
 8003f92:	6852      	ldr	r2, [r2, #4]
 8003f94:	605a      	str	r2, [r3, #4]
 8003f96:	4401      	add	r1, r0
 8003f98:	6019      	str	r1, [r3, #0]
 8003f9a:	e7d7      	b.n	8003f4c <_free_r+0x24>
 8003f9c:	d902      	bls.n	8003fa4 <_free_r+0x7c>
 8003f9e:	230c      	movs	r3, #12
 8003fa0:	602b      	str	r3, [r5, #0]
 8003fa2:	e7d3      	b.n	8003f4c <_free_r+0x24>
 8003fa4:	6820      	ldr	r0, [r4, #0]
 8003fa6:	1821      	adds	r1, r4, r0
 8003fa8:	428a      	cmp	r2, r1
 8003faa:	bf04      	itt	eq
 8003fac:	6811      	ldreq	r1, [r2, #0]
 8003fae:	6852      	ldreq	r2, [r2, #4]
 8003fb0:	6062      	str	r2, [r4, #4]
 8003fb2:	bf04      	itt	eq
 8003fb4:	1809      	addeq	r1, r1, r0
 8003fb6:	6021      	streq	r1, [r4, #0]
 8003fb8:	605c      	str	r4, [r3, #4]
 8003fba:	e7c7      	b.n	8003f4c <_free_r+0x24>
 8003fbc:	bd38      	pop	{r3, r4, r5, pc}
 8003fbe:	bf00      	nop
 8003fc0:	20003ddc 	.word	0x20003ddc

08003fc4 <_malloc_r>:
 8003fc4:	b570      	push	{r4, r5, r6, lr}
 8003fc6:	1ccd      	adds	r5, r1, #3
 8003fc8:	f025 0503 	bic.w	r5, r5, #3
 8003fcc:	3508      	adds	r5, #8
 8003fce:	2d0c      	cmp	r5, #12
 8003fd0:	bf38      	it	cc
 8003fd2:	250c      	movcc	r5, #12
 8003fd4:	2d00      	cmp	r5, #0
 8003fd6:	4606      	mov	r6, r0
 8003fd8:	db01      	blt.n	8003fde <_malloc_r+0x1a>
 8003fda:	42a9      	cmp	r1, r5
 8003fdc:	d903      	bls.n	8003fe6 <_malloc_r+0x22>
 8003fde:	230c      	movs	r3, #12
 8003fe0:	6033      	str	r3, [r6, #0]
 8003fe2:	2000      	movs	r0, #0
 8003fe4:	bd70      	pop	{r4, r5, r6, pc}
 8003fe6:	f000 f87d 	bl	80040e4 <__malloc_lock>
 8003fea:	4a21      	ldr	r2, [pc, #132]	; (8004070 <_malloc_r+0xac>)
 8003fec:	6814      	ldr	r4, [r2, #0]
 8003fee:	4621      	mov	r1, r4
 8003ff0:	b991      	cbnz	r1, 8004018 <_malloc_r+0x54>
 8003ff2:	4c20      	ldr	r4, [pc, #128]	; (8004074 <_malloc_r+0xb0>)
 8003ff4:	6823      	ldr	r3, [r4, #0]
 8003ff6:	b91b      	cbnz	r3, 8004000 <_malloc_r+0x3c>
 8003ff8:	4630      	mov	r0, r6
 8003ffa:	f000 f863 	bl	80040c4 <_sbrk_r>
 8003ffe:	6020      	str	r0, [r4, #0]
 8004000:	4629      	mov	r1, r5
 8004002:	4630      	mov	r0, r6
 8004004:	f000 f85e 	bl	80040c4 <_sbrk_r>
 8004008:	1c43      	adds	r3, r0, #1
 800400a:	d124      	bne.n	8004056 <_malloc_r+0x92>
 800400c:	230c      	movs	r3, #12
 800400e:	6033      	str	r3, [r6, #0]
 8004010:	4630      	mov	r0, r6
 8004012:	f000 f868 	bl	80040e6 <__malloc_unlock>
 8004016:	e7e4      	b.n	8003fe2 <_malloc_r+0x1e>
 8004018:	680b      	ldr	r3, [r1, #0]
 800401a:	1b5b      	subs	r3, r3, r5
 800401c:	d418      	bmi.n	8004050 <_malloc_r+0x8c>
 800401e:	2b0b      	cmp	r3, #11
 8004020:	d90f      	bls.n	8004042 <_malloc_r+0x7e>
 8004022:	600b      	str	r3, [r1, #0]
 8004024:	50cd      	str	r5, [r1, r3]
 8004026:	18cc      	adds	r4, r1, r3
 8004028:	4630      	mov	r0, r6
 800402a:	f000 f85c 	bl	80040e6 <__malloc_unlock>
 800402e:	f104 000b 	add.w	r0, r4, #11
 8004032:	1d23      	adds	r3, r4, #4
 8004034:	f020 0007 	bic.w	r0, r0, #7
 8004038:	1ac3      	subs	r3, r0, r3
 800403a:	d0d3      	beq.n	8003fe4 <_malloc_r+0x20>
 800403c:	425a      	negs	r2, r3
 800403e:	50e2      	str	r2, [r4, r3]
 8004040:	e7d0      	b.n	8003fe4 <_malloc_r+0x20>
 8004042:	428c      	cmp	r4, r1
 8004044:	684b      	ldr	r3, [r1, #4]
 8004046:	bf16      	itet	ne
 8004048:	6063      	strne	r3, [r4, #4]
 800404a:	6013      	streq	r3, [r2, #0]
 800404c:	460c      	movne	r4, r1
 800404e:	e7eb      	b.n	8004028 <_malloc_r+0x64>
 8004050:	460c      	mov	r4, r1
 8004052:	6849      	ldr	r1, [r1, #4]
 8004054:	e7cc      	b.n	8003ff0 <_malloc_r+0x2c>
 8004056:	1cc4      	adds	r4, r0, #3
 8004058:	f024 0403 	bic.w	r4, r4, #3
 800405c:	42a0      	cmp	r0, r4
 800405e:	d005      	beq.n	800406c <_malloc_r+0xa8>
 8004060:	1a21      	subs	r1, r4, r0
 8004062:	4630      	mov	r0, r6
 8004064:	f000 f82e 	bl	80040c4 <_sbrk_r>
 8004068:	3001      	adds	r0, #1
 800406a:	d0cf      	beq.n	800400c <_malloc_r+0x48>
 800406c:	6025      	str	r5, [r4, #0]
 800406e:	e7db      	b.n	8004028 <_malloc_r+0x64>
 8004070:	20003ddc 	.word	0x20003ddc
 8004074:	20003de0 	.word	0x20003de0

08004078 <_realloc_r>:
 8004078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800407a:	4607      	mov	r7, r0
 800407c:	4614      	mov	r4, r2
 800407e:	460e      	mov	r6, r1
 8004080:	b921      	cbnz	r1, 800408c <_realloc_r+0x14>
 8004082:	4611      	mov	r1, r2
 8004084:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004088:	f7ff bf9c 	b.w	8003fc4 <_malloc_r>
 800408c:	b922      	cbnz	r2, 8004098 <_realloc_r+0x20>
 800408e:	f7ff ff4b 	bl	8003f28 <_free_r>
 8004092:	4625      	mov	r5, r4
 8004094:	4628      	mov	r0, r5
 8004096:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004098:	f000 f826 	bl	80040e8 <_malloc_usable_size_r>
 800409c:	42a0      	cmp	r0, r4
 800409e:	d20f      	bcs.n	80040c0 <_realloc_r+0x48>
 80040a0:	4621      	mov	r1, r4
 80040a2:	4638      	mov	r0, r7
 80040a4:	f7ff ff8e 	bl	8003fc4 <_malloc_r>
 80040a8:	4605      	mov	r5, r0
 80040aa:	2800      	cmp	r0, #0
 80040ac:	d0f2      	beq.n	8004094 <_realloc_r+0x1c>
 80040ae:	4631      	mov	r1, r6
 80040b0:	4622      	mov	r2, r4
 80040b2:	f7ff fc19 	bl	80038e8 <memcpy>
 80040b6:	4631      	mov	r1, r6
 80040b8:	4638      	mov	r0, r7
 80040ba:	f7ff ff35 	bl	8003f28 <_free_r>
 80040be:	e7e9      	b.n	8004094 <_realloc_r+0x1c>
 80040c0:	4635      	mov	r5, r6
 80040c2:	e7e7      	b.n	8004094 <_realloc_r+0x1c>

080040c4 <_sbrk_r>:
 80040c4:	b538      	push	{r3, r4, r5, lr}
 80040c6:	4c06      	ldr	r4, [pc, #24]	; (80040e0 <_sbrk_r+0x1c>)
 80040c8:	2300      	movs	r3, #0
 80040ca:	4605      	mov	r5, r0
 80040cc:	4608      	mov	r0, r1
 80040ce:	6023      	str	r3, [r4, #0]
 80040d0:	f000 f812 	bl	80040f8 <_sbrk>
 80040d4:	1c43      	adds	r3, r0, #1
 80040d6:	d102      	bne.n	80040de <_sbrk_r+0x1a>
 80040d8:	6823      	ldr	r3, [r4, #0]
 80040da:	b103      	cbz	r3, 80040de <_sbrk_r+0x1a>
 80040dc:	602b      	str	r3, [r5, #0]
 80040de:	bd38      	pop	{r3, r4, r5, pc}
 80040e0:	20003ed4 	.word	0x20003ed4

080040e4 <__malloc_lock>:
 80040e4:	4770      	bx	lr

080040e6 <__malloc_unlock>:
 80040e6:	4770      	bx	lr

080040e8 <_malloc_usable_size_r>:
 80040e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80040ec:	1f18      	subs	r0, r3, #4
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	bfbc      	itt	lt
 80040f2:	580b      	ldrlt	r3, [r1, r0]
 80040f4:	18c0      	addlt	r0, r0, r3
 80040f6:	4770      	bx	lr

080040f8 <_sbrk>:
 80040f8:	4b04      	ldr	r3, [pc, #16]	; (800410c <_sbrk+0x14>)
 80040fa:	6819      	ldr	r1, [r3, #0]
 80040fc:	4602      	mov	r2, r0
 80040fe:	b909      	cbnz	r1, 8004104 <_sbrk+0xc>
 8004100:	4903      	ldr	r1, [pc, #12]	; (8004110 <_sbrk+0x18>)
 8004102:	6019      	str	r1, [r3, #0]
 8004104:	6818      	ldr	r0, [r3, #0]
 8004106:	4402      	add	r2, r0
 8004108:	601a      	str	r2, [r3, #0]
 800410a:	4770      	bx	lr
 800410c:	20003de4 	.word	0x20003de4
 8004110:	20003ed8 	.word	0x20003ed8

08004114 <_init>:
 8004114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004116:	bf00      	nop
 8004118:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800411a:	bc08      	pop	{r3}
 800411c:	469e      	mov	lr, r3
 800411e:	4770      	bx	lr

08004120 <_fini>:
 8004120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004122:	bf00      	nop
 8004124:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004126:	bc08      	pop	{r3}
 8004128:	469e      	mov	lr, r3
 800412a:	4770      	bx	lr
