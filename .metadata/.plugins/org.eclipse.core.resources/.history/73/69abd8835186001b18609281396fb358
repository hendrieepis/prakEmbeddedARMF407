
p01b-countingObject_withFunction.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001434  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .init_array   00000004  080015bc  080015bc  000115bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .fini_array   00000004  080015c0  080015c0  000115c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000004  20000000  080015c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000064  20000004  080015c8  00020004  2**2
                  ALLOC
  6 ._user_heap_stack 00000400  20000068  0800162c  00020004  2**0
                  ALLOC
  7 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
  8 .debug_info   00007ed4  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000012ff  00000000  00000000  00027f08  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 000003b0  00000000  00000000  00029208  2**3
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000328  00000000  00000000  000295b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00024e43  00000000  00000000  000298e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00006e61  00000000  00000000  0004e723  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000e3468  00000000  00000000  00055584  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007b  00000000  00000000  001389ec  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00000ce0  00000000  00000000  00138a68  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080015a4 	.word	0x080015a4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	080015a4 	.word	0x080015a4

080001c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80001cc:	4b0b      	ldr	r3, [pc, #44]	; (80001fc <HAL_Init+0x34>)
 80001ce:	681b      	ldr	r3, [r3, #0]
 80001d0:	4a0a      	ldr	r2, [pc, #40]	; (80001fc <HAL_Init+0x34>)
 80001d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80001d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 80001d8:	4b08      	ldr	r3, [pc, #32]	; (80001fc <HAL_Init+0x34>)
 80001da:	681b      	ldr	r3, [r3, #0]
 80001dc:	4a07      	ldr	r2, [pc, #28]	; (80001fc <HAL_Init+0x34>)
 80001de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80001e2:	6013      	str	r3, [r2, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001e4:	2003      	movs	r0, #3
 80001e6:	f000 f911 	bl	800040c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80001ea:	200f      	movs	r0, #15
 80001ec:	f000 f808 	bl	8000200 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80001f0:	f000 fb35 	bl	800085e <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80001f4:	2300      	movs	r3, #0
}
 80001f6:	4618      	mov	r0, r3
 80001f8:	bd80      	pop	{r7, pc}
 80001fa:	bf00      	nop
 80001fc:	40023c00 	.word	0x40023c00

08000200 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000200:	b580      	push	{r7, lr}
 8000202:	b082      	sub	sp, #8
 8000204:	af00      	add	r7, sp, #0
 8000206:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 8000208:	4b09      	ldr	r3, [pc, #36]	; (8000230 <HAL_InitTick+0x30>)
 800020a:	681b      	ldr	r3, [r3, #0]
 800020c:	4a09      	ldr	r2, [pc, #36]	; (8000234 <HAL_InitTick+0x34>)
 800020e:	fba2 2303 	umull	r2, r3, r2, r3
 8000212:	099b      	lsrs	r3, r3, #6
 8000214:	4618      	mov	r0, r3
 8000216:	f000 f920 	bl	800045a <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 800021a:	2200      	movs	r2, #0
 800021c:	6879      	ldr	r1, [r7, #4]
 800021e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000222:	f000 f8fe 	bl	8000422 <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
 8000226:	2300      	movs	r3, #0
}
 8000228:	4618      	mov	r0, r3
 800022a:	3708      	adds	r7, #8
 800022c:	46bd      	mov	sp, r7
 800022e:	bd80      	pop	{r7, pc}
 8000230:	20000000 	.word	0x20000000
 8000234:	10624dd3 	.word	0x10624dd3

08000238 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000238:	b480      	push	{r7}
 800023a:	af00      	add	r7, sp, #0
  uwTick++;
 800023c:	4b04      	ldr	r3, [pc, #16]	; (8000250 <HAL_IncTick+0x18>)
 800023e:	681b      	ldr	r3, [r3, #0]
 8000240:	3301      	adds	r3, #1
 8000242:	4a03      	ldr	r2, [pc, #12]	; (8000250 <HAL_IncTick+0x18>)
 8000244:	6013      	str	r3, [r2, #0]
}
 8000246:	bf00      	nop
 8000248:	46bd      	mov	sp, r7
 800024a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800024e:	4770      	bx	lr
 8000250:	20000020 	.word	0x20000020

08000254 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000254:	b480      	push	{r7}
 8000256:	af00      	add	r7, sp, #0
  return uwTick;
 8000258:	4b03      	ldr	r3, [pc, #12]	; (8000268 <HAL_GetTick+0x14>)
 800025a:	681b      	ldr	r3, [r3, #0]
}
 800025c:	4618      	mov	r0, r3
 800025e:	46bd      	mov	sp, r7
 8000260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000264:	4770      	bx	lr
 8000266:	bf00      	nop
 8000268:	20000020 	.word	0x20000020

0800026c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 800026c:	b580      	push	{r7, lr}
 800026e:	b084      	sub	sp, #16
 8000270:	af00      	add	r7, sp, #0
 8000272:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000274:	f7ff ffee 	bl	8000254 <HAL_GetTick>
 8000278:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800027a:	687b      	ldr	r3, [r7, #4]
 800027c:	60fb      	str	r3, [r7, #12]
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800027e:	68fb      	ldr	r3, [r7, #12]
 8000280:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000284:	d002      	beq.n	800028c <HAL_Delay+0x20>
  {
     wait++;
 8000286:	68fb      	ldr	r3, [r7, #12]
 8000288:	3301      	adds	r3, #1
 800028a:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800028c:	bf00      	nop
 800028e:	f7ff ffe1 	bl	8000254 <HAL_GetTick>
 8000292:	4602      	mov	r2, r0
 8000294:	68bb      	ldr	r3, [r7, #8]
 8000296:	1ad3      	subs	r3, r2, r3
 8000298:	68fa      	ldr	r2, [r7, #12]
 800029a:	429a      	cmp	r2, r3
 800029c:	d8f7      	bhi.n	800028e <HAL_Delay+0x22>
  {
  }
}
 800029e:	bf00      	nop
 80002a0:	3710      	adds	r7, #16
 80002a2:	46bd      	mov	sp, r7
 80002a4:	bd80      	pop	{r7, pc}
	...

080002a8 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80002a8:	b480      	push	{r7}
 80002aa:	b085      	sub	sp, #20
 80002ac:	af00      	add	r7, sp, #0
 80002ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	f003 0307 	and.w	r3, r3, #7
 80002b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80002b8:	4b0c      	ldr	r3, [pc, #48]	; (80002ec <NVIC_SetPriorityGrouping+0x44>)
 80002ba:	68db      	ldr	r3, [r3, #12]
 80002bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80002be:	68ba      	ldr	r2, [r7, #8]
 80002c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80002c4:	4013      	ands	r3, r2
 80002c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80002c8:	68fb      	ldr	r3, [r7, #12]
 80002ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80002cc:	68bb      	ldr	r3, [r7, #8]
 80002ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80002d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80002d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80002d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80002da:	4a04      	ldr	r2, [pc, #16]	; (80002ec <NVIC_SetPriorityGrouping+0x44>)
 80002dc:	68bb      	ldr	r3, [r7, #8]
 80002de:	60d3      	str	r3, [r2, #12]
}
 80002e0:	bf00      	nop
 80002e2:	3714      	adds	r7, #20
 80002e4:	46bd      	mov	sp, r7
 80002e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ea:	4770      	bx	lr
 80002ec:	e000ed00 	.word	0xe000ed00

080002f0 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 80002f0:	b480      	push	{r7}
 80002f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80002f4:	4b04      	ldr	r3, [pc, #16]	; (8000308 <NVIC_GetPriorityGrouping+0x18>)
 80002f6:	68db      	ldr	r3, [r3, #12]
 80002f8:	0a1b      	lsrs	r3, r3, #8
 80002fa:	f003 0307 	and.w	r3, r3, #7
}
 80002fe:	4618      	mov	r0, r3
 8000300:	46bd      	mov	sp, r7
 8000302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000306:	4770      	bx	lr
 8000308:	e000ed00 	.word	0xe000ed00

0800030c <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800030c:	b480      	push	{r7}
 800030e:	b083      	sub	sp, #12
 8000310:	af00      	add	r7, sp, #0
 8000312:	4603      	mov	r3, r0
 8000314:	6039      	str	r1, [r7, #0]
 8000316:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8000318:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800031c:	2b00      	cmp	r3, #0
 800031e:	da0b      	bge.n	8000338 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000320:	683b      	ldr	r3, [r7, #0]
 8000322:	b2da      	uxtb	r2, r3
 8000324:	490c      	ldr	r1, [pc, #48]	; (8000358 <NVIC_SetPriority+0x4c>)
 8000326:	79fb      	ldrb	r3, [r7, #7]
 8000328:	f003 030f 	and.w	r3, r3, #15
 800032c:	3b04      	subs	r3, #4
 800032e:	0112      	lsls	r2, r2, #4
 8000330:	b2d2      	uxtb	r2, r2
 8000332:	440b      	add	r3, r1
 8000334:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000336:	e009      	b.n	800034c <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000338:	683b      	ldr	r3, [r7, #0]
 800033a:	b2da      	uxtb	r2, r3
 800033c:	4907      	ldr	r1, [pc, #28]	; (800035c <NVIC_SetPriority+0x50>)
 800033e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000342:	0112      	lsls	r2, r2, #4
 8000344:	b2d2      	uxtb	r2, r2
 8000346:	440b      	add	r3, r1
 8000348:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800034c:	bf00      	nop
 800034e:	370c      	adds	r7, #12
 8000350:	46bd      	mov	sp, r7
 8000352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000356:	4770      	bx	lr
 8000358:	e000ed00 	.word	0xe000ed00
 800035c:	e000e100 	.word	0xe000e100

08000360 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000360:	b480      	push	{r7}
 8000362:	b089      	sub	sp, #36	; 0x24
 8000364:	af00      	add	r7, sp, #0
 8000366:	60f8      	str	r0, [r7, #12]
 8000368:	60b9      	str	r1, [r7, #8]
 800036a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800036c:	68fb      	ldr	r3, [r7, #12]
 800036e:	f003 0307 	and.w	r3, r3, #7
 8000372:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000374:	69fb      	ldr	r3, [r7, #28]
 8000376:	f1c3 0307 	rsb	r3, r3, #7
 800037a:	2b04      	cmp	r3, #4
 800037c:	bf28      	it	cs
 800037e:	2304      	movcs	r3, #4
 8000380:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000382:	69fb      	ldr	r3, [r7, #28]
 8000384:	3304      	adds	r3, #4
 8000386:	2b06      	cmp	r3, #6
 8000388:	d902      	bls.n	8000390 <NVIC_EncodePriority+0x30>
 800038a:	69fb      	ldr	r3, [r7, #28]
 800038c:	3b03      	subs	r3, #3
 800038e:	e000      	b.n	8000392 <NVIC_EncodePriority+0x32>
 8000390:	2300      	movs	r3, #0
 8000392:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000394:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000398:	69bb      	ldr	r3, [r7, #24]
 800039a:	fa02 f303 	lsl.w	r3, r2, r3
 800039e:	43da      	mvns	r2, r3
 80003a0:	68bb      	ldr	r3, [r7, #8]
 80003a2:	401a      	ands	r2, r3
 80003a4:	697b      	ldr	r3, [r7, #20]
 80003a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80003a8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80003ac:	697b      	ldr	r3, [r7, #20]
 80003ae:	fa01 f303 	lsl.w	r3, r1, r3
 80003b2:	43d9      	mvns	r1, r3
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80003b8:	4313      	orrs	r3, r2
         );
}
 80003ba:	4618      	mov	r0, r3
 80003bc:	3724      	adds	r7, #36	; 0x24
 80003be:	46bd      	mov	sp, r7
 80003c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c4:	4770      	bx	lr
	...

080003c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	b082      	sub	sp, #8
 80003cc:	af00      	add	r7, sp, #0
 80003ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	3b01      	subs	r3, #1
 80003d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80003d8:	d301      	bcc.n	80003de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80003da:	2301      	movs	r3, #1
 80003dc:	e00f      	b.n	80003fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80003de:	4a0a      	ldr	r2, [pc, #40]	; (8000408 <SysTick_Config+0x40>)
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	3b01      	subs	r3, #1
 80003e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80003e6:	210f      	movs	r1, #15
 80003e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80003ec:	f7ff ff8e 	bl	800030c <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80003f0:	4b05      	ldr	r3, [pc, #20]	; (8000408 <SysTick_Config+0x40>)
 80003f2:	2200      	movs	r2, #0
 80003f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80003f6:	4b04      	ldr	r3, [pc, #16]	; (8000408 <SysTick_Config+0x40>)
 80003f8:	2207      	movs	r2, #7
 80003fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80003fc:	2300      	movs	r3, #0
}
 80003fe:	4618      	mov	r0, r3
 8000400:	3708      	adds	r7, #8
 8000402:	46bd      	mov	sp, r7
 8000404:	bd80      	pop	{r7, pc}
 8000406:	bf00      	nop
 8000408:	e000e010 	.word	0xe000e010

0800040c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	b082      	sub	sp, #8
 8000410:	af00      	add	r7, sp, #0
 8000412:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000414:	6878      	ldr	r0, [r7, #4]
 8000416:	f7ff ff47 	bl	80002a8 <NVIC_SetPriorityGrouping>
}
 800041a:	bf00      	nop
 800041c:	3708      	adds	r7, #8
 800041e:	46bd      	mov	sp, r7
 8000420:	bd80      	pop	{r7, pc}

08000422 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000422:	b580      	push	{r7, lr}
 8000424:	b086      	sub	sp, #24
 8000426:	af00      	add	r7, sp, #0
 8000428:	4603      	mov	r3, r0
 800042a:	60b9      	str	r1, [r7, #8]
 800042c:	607a      	str	r2, [r7, #4]
 800042e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000430:	2300      	movs	r3, #0
 8000432:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000434:	f7ff ff5c 	bl	80002f0 <NVIC_GetPriorityGrouping>
 8000438:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800043a:	687a      	ldr	r2, [r7, #4]
 800043c:	68b9      	ldr	r1, [r7, #8]
 800043e:	6978      	ldr	r0, [r7, #20]
 8000440:	f7ff ff8e 	bl	8000360 <NVIC_EncodePriority>
 8000444:	4602      	mov	r2, r0
 8000446:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800044a:	4611      	mov	r1, r2
 800044c:	4618      	mov	r0, r3
 800044e:	f7ff ff5d 	bl	800030c <NVIC_SetPriority>
}
 8000452:	bf00      	nop
 8000454:	3718      	adds	r7, #24
 8000456:	46bd      	mov	sp, r7
 8000458:	bd80      	pop	{r7, pc}

0800045a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800045a:	b580      	push	{r7, lr}
 800045c:	b082      	sub	sp, #8
 800045e:	af00      	add	r7, sp, #0
 8000460:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000462:	6878      	ldr	r0, [r7, #4]
 8000464:	f7ff ffb0 	bl	80003c8 <SysTick_Config>
 8000468:	4603      	mov	r3, r0
}
 800046a:	4618      	mov	r0, r3
 800046c:	3708      	adds	r7, #8
 800046e:	46bd      	mov	sp, r7
 8000470:	bd80      	pop	{r7, pc}
	...

08000474 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000474:	b480      	push	{r7}
 8000476:	b083      	sub	sp, #12
 8000478:	af00      	add	r7, sp, #0
 800047a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	2b04      	cmp	r3, #4
 8000480:	d106      	bne.n	8000490 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000482:	4b09      	ldr	r3, [pc, #36]	; (80004a8 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	4a08      	ldr	r2, [pc, #32]	; (80004a8 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000488:	f043 0304 	orr.w	r3, r3, #4
 800048c:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 800048e:	e005      	b.n	800049c <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000490:	4b05      	ldr	r3, [pc, #20]	; (80004a8 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000492:	681b      	ldr	r3, [r3, #0]
 8000494:	4a04      	ldr	r2, [pc, #16]	; (80004a8 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000496:	f023 0304 	bic.w	r3, r3, #4
 800049a:	6013      	str	r3, [r2, #0]
}
 800049c:	bf00      	nop
 800049e:	370c      	adds	r7, #12
 80004a0:	46bd      	mov	sp, r7
 80004a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a6:	4770      	bx	lr
 80004a8:	e000e010 	.word	0xe000e010

080004ac <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 80004b0:	f000 f802 	bl	80004b8 <HAL_SYSTICK_Callback>
}
 80004b4:	bf00      	nop
 80004b6:	bd80      	pop	{r7, pc}

080004b8 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80004b8:	b480      	push	{r7}
 80004ba:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 80004bc:	bf00      	nop
 80004be:	46bd      	mov	sp, r7
 80004c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c4:	4770      	bx	lr
	...

080004c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80004c8:	b480      	push	{r7}
 80004ca:	b089      	sub	sp, #36	; 0x24
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]
 80004d0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80004d2:	2300      	movs	r3, #0
 80004d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80004d6:	2300      	movs	r3, #0
 80004d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80004da:	2300      	movs	r3, #0
 80004dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80004de:	2300      	movs	r3, #0
 80004e0:	61fb      	str	r3, [r7, #28]
 80004e2:	e16b      	b.n	80007bc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80004e4:	2201      	movs	r2, #1
 80004e6:	69fb      	ldr	r3, [r7, #28]
 80004e8:	fa02 f303 	lsl.w	r3, r2, r3
 80004ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80004ee:	683b      	ldr	r3, [r7, #0]
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	697a      	ldr	r2, [r7, #20]
 80004f4:	4013      	ands	r3, r2
 80004f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80004f8:	693a      	ldr	r2, [r7, #16]
 80004fa:	697b      	ldr	r3, [r7, #20]
 80004fc:	429a      	cmp	r2, r3
 80004fe:	f040 815a 	bne.w	80007b6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000502:	683b      	ldr	r3, [r7, #0]
 8000504:	685b      	ldr	r3, [r3, #4]
 8000506:	2b02      	cmp	r3, #2
 8000508:	d003      	beq.n	8000512 <HAL_GPIO_Init+0x4a>
 800050a:	683b      	ldr	r3, [r7, #0]
 800050c:	685b      	ldr	r3, [r3, #4]
 800050e:	2b12      	cmp	r3, #18
 8000510:	d123      	bne.n	800055a <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000512:	69fb      	ldr	r3, [r7, #28]
 8000514:	08da      	lsrs	r2, r3, #3
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	3208      	adds	r2, #8
 800051a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800051e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000520:	69fb      	ldr	r3, [r7, #28]
 8000522:	f003 0307 	and.w	r3, r3, #7
 8000526:	009b      	lsls	r3, r3, #2
 8000528:	220f      	movs	r2, #15
 800052a:	fa02 f303 	lsl.w	r3, r2, r3
 800052e:	43db      	mvns	r3, r3
 8000530:	69ba      	ldr	r2, [r7, #24]
 8000532:	4013      	ands	r3, r2
 8000534:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000536:	683b      	ldr	r3, [r7, #0]
 8000538:	691a      	ldr	r2, [r3, #16]
 800053a:	69fb      	ldr	r3, [r7, #28]
 800053c:	f003 0307 	and.w	r3, r3, #7
 8000540:	009b      	lsls	r3, r3, #2
 8000542:	fa02 f303 	lsl.w	r3, r2, r3
 8000546:	69ba      	ldr	r2, [r7, #24]
 8000548:	4313      	orrs	r3, r2
 800054a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800054c:	69fb      	ldr	r3, [r7, #28]
 800054e:	08da      	lsrs	r2, r3, #3
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	3208      	adds	r2, #8
 8000554:	69b9      	ldr	r1, [r7, #24]
 8000556:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000560:	69fb      	ldr	r3, [r7, #28]
 8000562:	005b      	lsls	r3, r3, #1
 8000564:	2203      	movs	r2, #3
 8000566:	fa02 f303 	lsl.w	r3, r2, r3
 800056a:	43db      	mvns	r3, r3
 800056c:	69ba      	ldr	r2, [r7, #24]
 800056e:	4013      	ands	r3, r2
 8000570:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000572:	683b      	ldr	r3, [r7, #0]
 8000574:	685b      	ldr	r3, [r3, #4]
 8000576:	f003 0203 	and.w	r2, r3, #3
 800057a:	69fb      	ldr	r3, [r7, #28]
 800057c:	005b      	lsls	r3, r3, #1
 800057e:	fa02 f303 	lsl.w	r3, r2, r3
 8000582:	69ba      	ldr	r2, [r7, #24]
 8000584:	4313      	orrs	r3, r2
 8000586:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	69ba      	ldr	r2, [r7, #24]
 800058c:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800058e:	683b      	ldr	r3, [r7, #0]
 8000590:	685b      	ldr	r3, [r3, #4]
 8000592:	2b01      	cmp	r3, #1
 8000594:	d00b      	beq.n	80005ae <HAL_GPIO_Init+0xe6>
 8000596:	683b      	ldr	r3, [r7, #0]
 8000598:	685b      	ldr	r3, [r3, #4]
 800059a:	2b02      	cmp	r3, #2
 800059c:	d007      	beq.n	80005ae <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800059e:	683b      	ldr	r3, [r7, #0]
 80005a0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80005a2:	2b11      	cmp	r3, #17
 80005a4:	d003      	beq.n	80005ae <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80005a6:	683b      	ldr	r3, [r7, #0]
 80005a8:	685b      	ldr	r3, [r3, #4]
 80005aa:	2b12      	cmp	r3, #18
 80005ac:	d130      	bne.n	8000610 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	689b      	ldr	r3, [r3, #8]
 80005b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80005b4:	69fb      	ldr	r3, [r7, #28]
 80005b6:	005b      	lsls	r3, r3, #1
 80005b8:	2203      	movs	r2, #3
 80005ba:	fa02 f303 	lsl.w	r3, r2, r3
 80005be:	43db      	mvns	r3, r3
 80005c0:	69ba      	ldr	r2, [r7, #24]
 80005c2:	4013      	ands	r3, r2
 80005c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80005c6:	683b      	ldr	r3, [r7, #0]
 80005c8:	68da      	ldr	r2, [r3, #12]
 80005ca:	69fb      	ldr	r3, [r7, #28]
 80005cc:	005b      	lsls	r3, r3, #1
 80005ce:	fa02 f303 	lsl.w	r3, r2, r3
 80005d2:	69ba      	ldr	r2, [r7, #24]
 80005d4:	4313      	orrs	r3, r2
 80005d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	69ba      	ldr	r2, [r7, #24]
 80005dc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	685b      	ldr	r3, [r3, #4]
 80005e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80005e4:	2201      	movs	r2, #1
 80005e6:	69fb      	ldr	r3, [r7, #28]
 80005e8:	fa02 f303 	lsl.w	r3, r2, r3
 80005ec:	43db      	mvns	r3, r3
 80005ee:	69ba      	ldr	r2, [r7, #24]
 80005f0:	4013      	ands	r3, r2
 80005f2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80005f4:	683b      	ldr	r3, [r7, #0]
 80005f6:	685b      	ldr	r3, [r3, #4]
 80005f8:	091b      	lsrs	r3, r3, #4
 80005fa:	f003 0201 	and.w	r2, r3, #1
 80005fe:	69fb      	ldr	r3, [r7, #28]
 8000600:	fa02 f303 	lsl.w	r3, r2, r3
 8000604:	69ba      	ldr	r2, [r7, #24]
 8000606:	4313      	orrs	r3, r2
 8000608:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	69ba      	ldr	r2, [r7, #24]
 800060e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	68db      	ldr	r3, [r3, #12]
 8000614:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000616:	69fb      	ldr	r3, [r7, #28]
 8000618:	005b      	lsls	r3, r3, #1
 800061a:	2203      	movs	r2, #3
 800061c:	fa02 f303 	lsl.w	r3, r2, r3
 8000620:	43db      	mvns	r3, r3
 8000622:	69ba      	ldr	r2, [r7, #24]
 8000624:	4013      	ands	r3, r2
 8000626:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000628:	683b      	ldr	r3, [r7, #0]
 800062a:	689a      	ldr	r2, [r3, #8]
 800062c:	69fb      	ldr	r3, [r7, #28]
 800062e:	005b      	lsls	r3, r3, #1
 8000630:	fa02 f303 	lsl.w	r3, r2, r3
 8000634:	69ba      	ldr	r2, [r7, #24]
 8000636:	4313      	orrs	r3, r2
 8000638:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	69ba      	ldr	r2, [r7, #24]
 800063e:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000640:	683b      	ldr	r3, [r7, #0]
 8000642:	685b      	ldr	r3, [r3, #4]
 8000644:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000648:	2b00      	cmp	r3, #0
 800064a:	f000 80b4 	beq.w	80007b6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800064e:	2300      	movs	r3, #0
 8000650:	60fb      	str	r3, [r7, #12]
 8000652:	4b5f      	ldr	r3, [pc, #380]	; (80007d0 <HAL_GPIO_Init+0x308>)
 8000654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000656:	4a5e      	ldr	r2, [pc, #376]	; (80007d0 <HAL_GPIO_Init+0x308>)
 8000658:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800065c:	6453      	str	r3, [r2, #68]	; 0x44
 800065e:	4b5c      	ldr	r3, [pc, #368]	; (80007d0 <HAL_GPIO_Init+0x308>)
 8000660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000662:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000666:	60fb      	str	r3, [r7, #12]
 8000668:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800066a:	4a5a      	ldr	r2, [pc, #360]	; (80007d4 <HAL_GPIO_Init+0x30c>)
 800066c:	69fb      	ldr	r3, [r7, #28]
 800066e:	089b      	lsrs	r3, r3, #2
 8000670:	3302      	adds	r3, #2
 8000672:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000676:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000678:	69fb      	ldr	r3, [r7, #28]
 800067a:	f003 0303 	and.w	r3, r3, #3
 800067e:	009b      	lsls	r3, r3, #2
 8000680:	220f      	movs	r2, #15
 8000682:	fa02 f303 	lsl.w	r3, r2, r3
 8000686:	43db      	mvns	r3, r3
 8000688:	69ba      	ldr	r2, [r7, #24]
 800068a:	4013      	ands	r3, r2
 800068c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	4a51      	ldr	r2, [pc, #324]	; (80007d8 <HAL_GPIO_Init+0x310>)
 8000692:	4293      	cmp	r3, r2
 8000694:	d02b      	beq.n	80006ee <HAL_GPIO_Init+0x226>
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	4a50      	ldr	r2, [pc, #320]	; (80007dc <HAL_GPIO_Init+0x314>)
 800069a:	4293      	cmp	r3, r2
 800069c:	d025      	beq.n	80006ea <HAL_GPIO_Init+0x222>
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	4a4f      	ldr	r2, [pc, #316]	; (80007e0 <HAL_GPIO_Init+0x318>)
 80006a2:	4293      	cmp	r3, r2
 80006a4:	d01f      	beq.n	80006e6 <HAL_GPIO_Init+0x21e>
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	4a4e      	ldr	r2, [pc, #312]	; (80007e4 <HAL_GPIO_Init+0x31c>)
 80006aa:	4293      	cmp	r3, r2
 80006ac:	d019      	beq.n	80006e2 <HAL_GPIO_Init+0x21a>
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	4a4d      	ldr	r2, [pc, #308]	; (80007e8 <HAL_GPIO_Init+0x320>)
 80006b2:	4293      	cmp	r3, r2
 80006b4:	d013      	beq.n	80006de <HAL_GPIO_Init+0x216>
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	4a4c      	ldr	r2, [pc, #304]	; (80007ec <HAL_GPIO_Init+0x324>)
 80006ba:	4293      	cmp	r3, r2
 80006bc:	d00d      	beq.n	80006da <HAL_GPIO_Init+0x212>
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	4a4b      	ldr	r2, [pc, #300]	; (80007f0 <HAL_GPIO_Init+0x328>)
 80006c2:	4293      	cmp	r3, r2
 80006c4:	d007      	beq.n	80006d6 <HAL_GPIO_Init+0x20e>
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	4a4a      	ldr	r2, [pc, #296]	; (80007f4 <HAL_GPIO_Init+0x32c>)
 80006ca:	4293      	cmp	r3, r2
 80006cc:	d101      	bne.n	80006d2 <HAL_GPIO_Init+0x20a>
 80006ce:	2307      	movs	r3, #7
 80006d0:	e00e      	b.n	80006f0 <HAL_GPIO_Init+0x228>
 80006d2:	2308      	movs	r3, #8
 80006d4:	e00c      	b.n	80006f0 <HAL_GPIO_Init+0x228>
 80006d6:	2306      	movs	r3, #6
 80006d8:	e00a      	b.n	80006f0 <HAL_GPIO_Init+0x228>
 80006da:	2305      	movs	r3, #5
 80006dc:	e008      	b.n	80006f0 <HAL_GPIO_Init+0x228>
 80006de:	2304      	movs	r3, #4
 80006e0:	e006      	b.n	80006f0 <HAL_GPIO_Init+0x228>
 80006e2:	2303      	movs	r3, #3
 80006e4:	e004      	b.n	80006f0 <HAL_GPIO_Init+0x228>
 80006e6:	2302      	movs	r3, #2
 80006e8:	e002      	b.n	80006f0 <HAL_GPIO_Init+0x228>
 80006ea:	2301      	movs	r3, #1
 80006ec:	e000      	b.n	80006f0 <HAL_GPIO_Init+0x228>
 80006ee:	2300      	movs	r3, #0
 80006f0:	69fa      	ldr	r2, [r7, #28]
 80006f2:	f002 0203 	and.w	r2, r2, #3
 80006f6:	0092      	lsls	r2, r2, #2
 80006f8:	4093      	lsls	r3, r2
 80006fa:	69ba      	ldr	r2, [r7, #24]
 80006fc:	4313      	orrs	r3, r2
 80006fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000700:	4934      	ldr	r1, [pc, #208]	; (80007d4 <HAL_GPIO_Init+0x30c>)
 8000702:	69fb      	ldr	r3, [r7, #28]
 8000704:	089b      	lsrs	r3, r3, #2
 8000706:	3302      	adds	r3, #2
 8000708:	69ba      	ldr	r2, [r7, #24]
 800070a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800070e:	4b3a      	ldr	r3, [pc, #232]	; (80007f8 <HAL_GPIO_Init+0x330>)
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000714:	693b      	ldr	r3, [r7, #16]
 8000716:	43db      	mvns	r3, r3
 8000718:	69ba      	ldr	r2, [r7, #24]
 800071a:	4013      	ands	r3, r2
 800071c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800071e:	683b      	ldr	r3, [r7, #0]
 8000720:	685b      	ldr	r3, [r3, #4]
 8000722:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000726:	2b00      	cmp	r3, #0
 8000728:	d003      	beq.n	8000732 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800072a:	69ba      	ldr	r2, [r7, #24]
 800072c:	693b      	ldr	r3, [r7, #16]
 800072e:	4313      	orrs	r3, r2
 8000730:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000732:	4a31      	ldr	r2, [pc, #196]	; (80007f8 <HAL_GPIO_Init+0x330>)
 8000734:	69bb      	ldr	r3, [r7, #24]
 8000736:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000738:	4b2f      	ldr	r3, [pc, #188]	; (80007f8 <HAL_GPIO_Init+0x330>)
 800073a:	685b      	ldr	r3, [r3, #4]
 800073c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800073e:	693b      	ldr	r3, [r7, #16]
 8000740:	43db      	mvns	r3, r3
 8000742:	69ba      	ldr	r2, [r7, #24]
 8000744:	4013      	ands	r3, r2
 8000746:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000748:	683b      	ldr	r3, [r7, #0]
 800074a:	685b      	ldr	r3, [r3, #4]
 800074c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000750:	2b00      	cmp	r3, #0
 8000752:	d003      	beq.n	800075c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000754:	69ba      	ldr	r2, [r7, #24]
 8000756:	693b      	ldr	r3, [r7, #16]
 8000758:	4313      	orrs	r3, r2
 800075a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800075c:	4a26      	ldr	r2, [pc, #152]	; (80007f8 <HAL_GPIO_Init+0x330>)
 800075e:	69bb      	ldr	r3, [r7, #24]
 8000760:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000762:	4b25      	ldr	r3, [pc, #148]	; (80007f8 <HAL_GPIO_Init+0x330>)
 8000764:	689b      	ldr	r3, [r3, #8]
 8000766:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000768:	693b      	ldr	r3, [r7, #16]
 800076a:	43db      	mvns	r3, r3
 800076c:	69ba      	ldr	r2, [r7, #24]
 800076e:	4013      	ands	r3, r2
 8000770:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000772:	683b      	ldr	r3, [r7, #0]
 8000774:	685b      	ldr	r3, [r3, #4]
 8000776:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800077a:	2b00      	cmp	r3, #0
 800077c:	d003      	beq.n	8000786 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800077e:	69ba      	ldr	r2, [r7, #24]
 8000780:	693b      	ldr	r3, [r7, #16]
 8000782:	4313      	orrs	r3, r2
 8000784:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000786:	4a1c      	ldr	r2, [pc, #112]	; (80007f8 <HAL_GPIO_Init+0x330>)
 8000788:	69bb      	ldr	r3, [r7, #24]
 800078a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800078c:	4b1a      	ldr	r3, [pc, #104]	; (80007f8 <HAL_GPIO_Init+0x330>)
 800078e:	68db      	ldr	r3, [r3, #12]
 8000790:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000792:	693b      	ldr	r3, [r7, #16]
 8000794:	43db      	mvns	r3, r3
 8000796:	69ba      	ldr	r2, [r7, #24]
 8000798:	4013      	ands	r3, r2
 800079a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800079c:	683b      	ldr	r3, [r7, #0]
 800079e:	685b      	ldr	r3, [r3, #4]
 80007a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d003      	beq.n	80007b0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80007a8:	69ba      	ldr	r2, [r7, #24]
 80007aa:	693b      	ldr	r3, [r7, #16]
 80007ac:	4313      	orrs	r3, r2
 80007ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80007b0:	4a11      	ldr	r2, [pc, #68]	; (80007f8 <HAL_GPIO_Init+0x330>)
 80007b2:	69bb      	ldr	r3, [r7, #24]
 80007b4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80007b6:	69fb      	ldr	r3, [r7, #28]
 80007b8:	3301      	adds	r3, #1
 80007ba:	61fb      	str	r3, [r7, #28]
 80007bc:	69fb      	ldr	r3, [r7, #28]
 80007be:	2b0f      	cmp	r3, #15
 80007c0:	f67f ae90 	bls.w	80004e4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80007c4:	bf00      	nop
 80007c6:	3724      	adds	r7, #36	; 0x24
 80007c8:	46bd      	mov	sp, r7
 80007ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ce:	4770      	bx	lr
 80007d0:	40023800 	.word	0x40023800
 80007d4:	40013800 	.word	0x40013800
 80007d8:	40020000 	.word	0x40020000
 80007dc:	40020400 	.word	0x40020400
 80007e0:	40020800 	.word	0x40020800
 80007e4:	40020c00 	.word	0x40020c00
 80007e8:	40021000 	.word	0x40021000
 80007ec:	40021400 	.word	0x40021400
 80007f0:	40021800 	.word	0x40021800
 80007f4:	40021c00 	.word	0x40021c00
 80007f8:	40013c00 	.word	0x40013c00

080007fc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80007fc:	b480      	push	{r7}
 80007fe:	b085      	sub	sp, #20
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
 8000804:	460b      	mov	r3, r1
 8000806:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	691a      	ldr	r2, [r3, #16]
 800080c:	887b      	ldrh	r3, [r7, #2]
 800080e:	4013      	ands	r3, r2
 8000810:	2b00      	cmp	r3, #0
 8000812:	d002      	beq.n	800081a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000814:	2301      	movs	r3, #1
 8000816:	73fb      	strb	r3, [r7, #15]
 8000818:	e001      	b.n	800081e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800081a:	2300      	movs	r3, #0
 800081c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800081e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000820:	4618      	mov	r0, r3
 8000822:	3714      	adds	r7, #20
 8000824:	46bd      	mov	sp, r7
 8000826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082a:	4770      	bx	lr

0800082c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800082c:	b480      	push	{r7}
 800082e:	b083      	sub	sp, #12
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
 8000834:	460b      	mov	r3, r1
 8000836:	807b      	strh	r3, [r7, #2]
 8000838:	4613      	mov	r3, r2
 800083a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800083c:	787b      	ldrb	r3, [r7, #1]
 800083e:	2b00      	cmp	r3, #0
 8000840:	d003      	beq.n	800084a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000842:	887a      	ldrh	r2, [r7, #2]
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000848:	e003      	b.n	8000852 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800084a:	887b      	ldrh	r3, [r7, #2]
 800084c:	041a      	lsls	r2, r3, #16
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	619a      	str	r2, [r3, #24]
}
 8000852:	bf00      	nop
 8000854:	370c      	adds	r7, #12
 8000856:	46bd      	mov	sp, r7
 8000858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085c:	4770      	bx	lr

0800085e <HAL_MspInit>:
  * @note   This function is called from HAL_Init() function to perform system
  *         level initialization (GPIOs, clock, DMA, interrupt).
  * @retval None
  */
void HAL_MspInit(void)
{
 800085e:	b480      	push	{r7}
 8000860:	af00      	add	r7, sp, #0

}
 8000862:	bf00      	nop
 8000864:	46bd      	mov	sp, r7
 8000866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086a:	4770      	bx	lr

0800086c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b08e      	sub	sp, #56	; 0x38
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;  
 8000874:	2300      	movs	r3, #0
 8000876:	637b      	str	r3, [r7, #52]	; 0x34
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	f003 0301 	and.w	r3, r3, #1
 8000880:	2b00      	cmp	r3, #0
 8000882:	d075      	beq.n	8000970 <HAL_RCC_OscConfig+0x104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000884:	4ba4      	ldr	r3, [pc, #656]	; (8000b18 <HAL_RCC_OscConfig+0x2ac>)
 8000886:	689b      	ldr	r3, [r3, #8]
 8000888:	f003 030c 	and.w	r3, r3, #12
 800088c:	2b04      	cmp	r3, #4
 800088e:	d00c      	beq.n	80008aa <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000890:	4ba1      	ldr	r3, [pc, #644]	; (8000b18 <HAL_RCC_OscConfig+0x2ac>)
 8000892:	689b      	ldr	r3, [r3, #8]
 8000894:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000898:	2b08      	cmp	r3, #8
 800089a:	d112      	bne.n	80008c2 <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800089c:	4b9e      	ldr	r3, [pc, #632]	; (8000b18 <HAL_RCC_OscConfig+0x2ac>)
 800089e:	685b      	ldr	r3, [r3, #4]
 80008a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80008a4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80008a8:	d10b      	bne.n	80008c2 <HAL_RCC_OscConfig+0x56>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80008aa:	4b9b      	ldr	r3, [pc, #620]	; (8000b18 <HAL_RCC_OscConfig+0x2ac>)
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d05b      	beq.n	800096e <HAL_RCC_OscConfig+0x102>
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	685b      	ldr	r3, [r3, #4]
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d157      	bne.n	800096e <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 80008be:	2301      	movs	r3, #1
 80008c0:	e224      	b.n	8000d0c <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	685b      	ldr	r3, [r3, #4]
 80008c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80008ca:	d106      	bne.n	80008da <HAL_RCC_OscConfig+0x6e>
 80008cc:	4b92      	ldr	r3, [pc, #584]	; (8000b18 <HAL_RCC_OscConfig+0x2ac>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	4a91      	ldr	r2, [pc, #580]	; (8000b18 <HAL_RCC_OscConfig+0x2ac>)
 80008d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80008d6:	6013      	str	r3, [r2, #0]
 80008d8:	e01d      	b.n	8000916 <HAL_RCC_OscConfig+0xaa>
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	685b      	ldr	r3, [r3, #4]
 80008de:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80008e2:	d10c      	bne.n	80008fe <HAL_RCC_OscConfig+0x92>
 80008e4:	4b8c      	ldr	r3, [pc, #560]	; (8000b18 <HAL_RCC_OscConfig+0x2ac>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	4a8b      	ldr	r2, [pc, #556]	; (8000b18 <HAL_RCC_OscConfig+0x2ac>)
 80008ea:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80008ee:	6013      	str	r3, [r2, #0]
 80008f0:	4b89      	ldr	r3, [pc, #548]	; (8000b18 <HAL_RCC_OscConfig+0x2ac>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	4a88      	ldr	r2, [pc, #544]	; (8000b18 <HAL_RCC_OscConfig+0x2ac>)
 80008f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80008fa:	6013      	str	r3, [r2, #0]
 80008fc:	e00b      	b.n	8000916 <HAL_RCC_OscConfig+0xaa>
 80008fe:	4b86      	ldr	r3, [pc, #536]	; (8000b18 <HAL_RCC_OscConfig+0x2ac>)
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	4a85      	ldr	r2, [pc, #532]	; (8000b18 <HAL_RCC_OscConfig+0x2ac>)
 8000904:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000908:	6013      	str	r3, [r2, #0]
 800090a:	4b83      	ldr	r3, [pc, #524]	; (8000b18 <HAL_RCC_OscConfig+0x2ac>)
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	4a82      	ldr	r2, [pc, #520]	; (8000b18 <HAL_RCC_OscConfig+0x2ac>)
 8000910:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000914:	6013      	str	r3, [r2, #0]
      
      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	685b      	ldr	r3, [r3, #4]
 800091a:	2b00      	cmp	r3, #0
 800091c:	d013      	beq.n	8000946 <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800091e:	f7ff fc99 	bl	8000254 <HAL_GetTick>
 8000922:	6378      	str	r0, [r7, #52]	; 0x34
      
        /* Wait till HSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000924:	e008      	b.n	8000938 <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000926:	f7ff fc95 	bl	8000254 <HAL_GetTick>
 800092a:	4602      	mov	r2, r0
 800092c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800092e:	1ad3      	subs	r3, r2, r3
 8000930:	2b64      	cmp	r3, #100	; 0x64
 8000932:	d901      	bls.n	8000938 <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 8000934:	2303      	movs	r3, #3
 8000936:	e1e9      	b.n	8000d0c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000938:	4b77      	ldr	r3, [pc, #476]	; (8000b18 <HAL_RCC_OscConfig+0x2ac>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000940:	2b00      	cmp	r3, #0
 8000942:	d0f0      	beq.n	8000926 <HAL_RCC_OscConfig+0xba>
 8000944:	e014      	b.n	8000970 <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000946:	f7ff fc85 	bl	8000254 <HAL_GetTick>
 800094a:	6378      	str	r0, [r7, #52]	; 0x34

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800094c:	e008      	b.n	8000960 <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800094e:	f7ff fc81 	bl	8000254 <HAL_GetTick>
 8000952:	4602      	mov	r2, r0
 8000954:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000956:	1ad3      	subs	r3, r2, r3
 8000958:	2b64      	cmp	r3, #100	; 0x64
 800095a:	d901      	bls.n	8000960 <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 800095c:	2303      	movs	r3, #3
 800095e:	e1d5      	b.n	8000d0c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000960:	4b6d      	ldr	r3, [pc, #436]	; (8000b18 <HAL_RCC_OscConfig+0x2ac>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000968:	2b00      	cmp	r3, #0
 800096a:	d1f0      	bne.n	800094e <HAL_RCC_OscConfig+0xe2>
 800096c:	e000      	b.n	8000970 <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800096e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	f003 0302 	and.w	r3, r3, #2
 8000978:	2b00      	cmp	r3, #0
 800097a:	d077      	beq.n	8000a6c <HAL_RCC_OscConfig+0x200>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800097c:	4b66      	ldr	r3, [pc, #408]	; (8000b18 <HAL_RCC_OscConfig+0x2ac>)
 800097e:	689b      	ldr	r3, [r3, #8]
 8000980:	f003 030c 	and.w	r3, r3, #12
 8000984:	2b00      	cmp	r3, #0
 8000986:	d00b      	beq.n	80009a0 <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000988:	4b63      	ldr	r3, [pc, #396]	; (8000b18 <HAL_RCC_OscConfig+0x2ac>)
 800098a:	689b      	ldr	r3, [r3, #8]
 800098c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000990:	2b08      	cmp	r3, #8
 8000992:	d126      	bne.n	80009e2 <HAL_RCC_OscConfig+0x176>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000994:	4b60      	ldr	r3, [pc, #384]	; (8000b18 <HAL_RCC_OscConfig+0x2ac>)
 8000996:	685b      	ldr	r3, [r3, #4]
 8000998:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800099c:	2b00      	cmp	r3, #0
 800099e:	d120      	bne.n	80009e2 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80009a0:	4b5d      	ldr	r3, [pc, #372]	; (8000b18 <HAL_RCC_OscConfig+0x2ac>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	f003 0302 	and.w	r3, r3, #2
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d005      	beq.n	80009b8 <HAL_RCC_OscConfig+0x14c>
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	68db      	ldr	r3, [r3, #12]
 80009b0:	2b01      	cmp	r3, #1
 80009b2:	d001      	beq.n	80009b8 <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 80009b4:	2301      	movs	r3, #1
 80009b6:	e1a9      	b.n	8000d0c <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80009b8:	4b57      	ldr	r3, [pc, #348]	; (8000b18 <HAL_RCC_OscConfig+0x2ac>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	6919      	ldr	r1, [r3, #16]
 80009c4:	23f8      	movs	r3, #248	; 0xf8
 80009c6:	633b      	str	r3, [r7, #48]	; 0x30
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80009c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80009ca:	fa93 f3a3 	rbit	r3, r3
 80009ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80009d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009d2:	fab3 f383 	clz	r3, r3
 80009d6:	fa01 f303 	lsl.w	r3, r1, r3
 80009da:	494f      	ldr	r1, [pc, #316]	; (8000b18 <HAL_RCC_OscConfig+0x2ac>)
 80009dc:	4313      	orrs	r3, r2
 80009de:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80009e0:	e044      	b.n	8000a6c <HAL_RCC_OscConfig+0x200>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	68db      	ldr	r3, [r3, #12]
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d02a      	beq.n	8000a40 <HAL_RCC_OscConfig+0x1d4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80009ea:	4b4c      	ldr	r3, [pc, #304]	; (8000b1c <HAL_RCC_OscConfig+0x2b0>)
 80009ec:	2201      	movs	r2, #1
 80009ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80009f0:	f7ff fc30 	bl	8000254 <HAL_GetTick>
 80009f4:	6378      	str	r0, [r7, #52]	; 0x34

        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80009f6:	e008      	b.n	8000a0a <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80009f8:	f7ff fc2c 	bl	8000254 <HAL_GetTick>
 80009fc:	4602      	mov	r2, r0
 80009fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a00:	1ad3      	subs	r3, r2, r3
 8000a02:	2b02      	cmp	r3, #2
 8000a04:	d901      	bls.n	8000a0a <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8000a06:	2303      	movs	r3, #3
 8000a08:	e180      	b.n	8000d0c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000a0a:	4b43      	ldr	r3, [pc, #268]	; (8000b18 <HAL_RCC_OscConfig+0x2ac>)
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	f003 0302 	and.w	r3, r3, #2
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d0f0      	beq.n	80009f8 <HAL_RCC_OscConfig+0x18c>
          }       
        } 
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000a16:	4b40      	ldr	r3, [pc, #256]	; (8000b18 <HAL_RCC_OscConfig+0x2ac>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	6919      	ldr	r1, [r3, #16]
 8000a22:	23f8      	movs	r3, #248	; 0xf8
 8000a24:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000a26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a28:	fa93 f3a3 	rbit	r3, r3
 8000a2c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8000a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a30:	fab3 f383 	clz	r3, r3
 8000a34:	fa01 f303 	lsl.w	r3, r1, r3
 8000a38:	4937      	ldr	r1, [pc, #220]	; (8000b18 <HAL_RCC_OscConfig+0x2ac>)
 8000a3a:	4313      	orrs	r3, r2
 8000a3c:	600b      	str	r3, [r1, #0]
 8000a3e:	e015      	b.n	8000a6c <HAL_RCC_OscConfig+0x200>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000a40:	4b36      	ldr	r3, [pc, #216]	; (8000b1c <HAL_RCC_OscConfig+0x2b0>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000a46:	f7ff fc05 	bl	8000254 <HAL_GetTick>
 8000a4a:	6378      	str	r0, [r7, #52]	; 0x34
      
        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000a4c:	e008      	b.n	8000a60 <HAL_RCC_OscConfig+0x1f4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000a4e:	f7ff fc01 	bl	8000254 <HAL_GetTick>
 8000a52:	4602      	mov	r2, r0
 8000a54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a56:	1ad3      	subs	r3, r2, r3
 8000a58:	2b02      	cmp	r3, #2
 8000a5a:	d901      	bls.n	8000a60 <HAL_RCC_OscConfig+0x1f4>
          {
            return HAL_TIMEOUT;
 8000a5c:	2303      	movs	r3, #3
 8000a5e:	e155      	b.n	8000d0c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000a60:	4b2d      	ldr	r3, [pc, #180]	; (8000b18 <HAL_RCC_OscConfig+0x2ac>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	f003 0302 	and.w	r3, r3, #2
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d1f0      	bne.n	8000a4e <HAL_RCC_OscConfig+0x1e2>
        } 
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	f003 0308 	and.w	r3, r3, #8
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d030      	beq.n	8000ada <HAL_RCC_OscConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	695b      	ldr	r3, [r3, #20]
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d016      	beq.n	8000aae <HAL_RCC_OscConfig+0x242>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000a80:	4b27      	ldr	r3, [pc, #156]	; (8000b20 <HAL_RCC_OscConfig+0x2b4>)
 8000a82:	2201      	movs	r2, #1
 8000a84:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000a86:	f7ff fbe5 	bl	8000254 <HAL_GetTick>
 8000a8a:	6378      	str	r0, [r7, #52]	; 0x34
      
      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000a8c:	e008      	b.n	8000aa0 <HAL_RCC_OscConfig+0x234>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000a8e:	f7ff fbe1 	bl	8000254 <HAL_GetTick>
 8000a92:	4602      	mov	r2, r0
 8000a94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a96:	1ad3      	subs	r3, r2, r3
 8000a98:	2b02      	cmp	r3, #2
 8000a9a:	d901      	bls.n	8000aa0 <HAL_RCC_OscConfig+0x234>
        {
          return HAL_TIMEOUT;
 8000a9c:	2303      	movs	r3, #3
 8000a9e:	e135      	b.n	8000d0c <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000aa0:	4b1d      	ldr	r3, [pc, #116]	; (8000b18 <HAL_RCC_OscConfig+0x2ac>)
 8000aa2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000aa4:	f003 0302 	and.w	r3, r3, #2
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d0f0      	beq.n	8000a8e <HAL_RCC_OscConfig+0x222>
 8000aac:	e015      	b.n	8000ada <HAL_RCC_OscConfig+0x26e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000aae:	4b1c      	ldr	r3, [pc, #112]	; (8000b20 <HAL_RCC_OscConfig+0x2b4>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000ab4:	f7ff fbce 	bl	8000254 <HAL_GetTick>
 8000ab8:	6378      	str	r0, [r7, #52]	; 0x34
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000aba:	e008      	b.n	8000ace <HAL_RCC_OscConfig+0x262>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000abc:	f7ff fbca 	bl	8000254 <HAL_GetTick>
 8000ac0:	4602      	mov	r2, r0
 8000ac2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ac4:	1ad3      	subs	r3, r2, r3
 8000ac6:	2b02      	cmp	r3, #2
 8000ac8:	d901      	bls.n	8000ace <HAL_RCC_OscConfig+0x262>
        {
          return HAL_TIMEOUT;
 8000aca:	2303      	movs	r3, #3
 8000acc:	e11e      	b.n	8000d0c <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ace:	4b12      	ldr	r3, [pc, #72]	; (8000b18 <HAL_RCC_OscConfig+0x2ac>)
 8000ad0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000ad2:	f003 0302 	and.w	r3, r3, #2
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d1f0      	bne.n	8000abc <HAL_RCC_OscConfig+0x250>
        }       
      } 
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	f003 0304 	and.w	r3, r3, #4
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	f000 8086 	beq.w	8000bf4 <HAL_RCC_OscConfig+0x388>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8000ae8:	2300      	movs	r3, #0
 8000aea:	60bb      	str	r3, [r7, #8]
 8000aec:	4b0a      	ldr	r3, [pc, #40]	; (8000b18 <HAL_RCC_OscConfig+0x2ac>)
 8000aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af0:	4a09      	ldr	r2, [pc, #36]	; (8000b18 <HAL_RCC_OscConfig+0x2ac>)
 8000af2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000af6:	6413      	str	r3, [r2, #64]	; 0x40
 8000af8:	4b07      	ldr	r3, [pc, #28]	; (8000b18 <HAL_RCC_OscConfig+0x2ac>)
 8000afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000afc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b00:	60bb      	str	r3, [r7, #8]
 8000b02:	68bb      	ldr	r3, [r7, #8]
    
    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8000b04:	4b07      	ldr	r3, [pc, #28]	; (8000b24 <HAL_RCC_OscConfig+0x2b8>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	4a06      	ldr	r2, [pc, #24]	; (8000b24 <HAL_RCC_OscConfig+0x2b8>)
 8000b0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b0e:	6013      	str	r3, [r2, #0]
    
    /* Wait for Backup domain Write protection enable */
    tickstart = HAL_GetTick();
 8000b10:	f7ff fba0 	bl	8000254 <HAL_GetTick>
 8000b14:	6378      	str	r0, [r7, #52]	; 0x34
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8000b16:	e010      	b.n	8000b3a <HAL_RCC_OscConfig+0x2ce>
 8000b18:	40023800 	.word	0x40023800
 8000b1c:	42470000 	.word	0x42470000
 8000b20:	42470e80 	.word	0x42470e80
 8000b24:	40007000 	.word	0x40007000
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8000b28:	f7ff fb94 	bl	8000254 <HAL_GetTick>
 8000b2c:	4602      	mov	r2, r0
 8000b2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b30:	1ad3      	subs	r3, r2, r3
 8000b32:	2b02      	cmp	r3, #2
 8000b34:	d901      	bls.n	8000b3a <HAL_RCC_OscConfig+0x2ce>
      {
        return HAL_TIMEOUT;
 8000b36:	2303      	movs	r3, #3
 8000b38:	e0e8      	b.n	8000d0c <HAL_RCC_OscConfig+0x4a0>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8000b3a:	4b76      	ldr	r3, [pc, #472]	; (8000d14 <HAL_RCC_OscConfig+0x4a8>)
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d0f0      	beq.n	8000b28 <HAL_RCC_OscConfig+0x2bc>
      }      
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	689b      	ldr	r3, [r3, #8]
 8000b4a:	2b01      	cmp	r3, #1
 8000b4c:	d106      	bne.n	8000b5c <HAL_RCC_OscConfig+0x2f0>
 8000b4e:	4b72      	ldr	r3, [pc, #456]	; (8000d18 <HAL_RCC_OscConfig+0x4ac>)
 8000b50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000b52:	4a71      	ldr	r2, [pc, #452]	; (8000d18 <HAL_RCC_OscConfig+0x4ac>)
 8000b54:	f043 0301 	orr.w	r3, r3, #1
 8000b58:	6713      	str	r3, [r2, #112]	; 0x70
 8000b5a:	e01c      	b.n	8000b96 <HAL_RCC_OscConfig+0x32a>
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	689b      	ldr	r3, [r3, #8]
 8000b60:	2b05      	cmp	r3, #5
 8000b62:	d10c      	bne.n	8000b7e <HAL_RCC_OscConfig+0x312>
 8000b64:	4b6c      	ldr	r3, [pc, #432]	; (8000d18 <HAL_RCC_OscConfig+0x4ac>)
 8000b66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000b68:	4a6b      	ldr	r2, [pc, #428]	; (8000d18 <HAL_RCC_OscConfig+0x4ac>)
 8000b6a:	f043 0304 	orr.w	r3, r3, #4
 8000b6e:	6713      	str	r3, [r2, #112]	; 0x70
 8000b70:	4b69      	ldr	r3, [pc, #420]	; (8000d18 <HAL_RCC_OscConfig+0x4ac>)
 8000b72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000b74:	4a68      	ldr	r2, [pc, #416]	; (8000d18 <HAL_RCC_OscConfig+0x4ac>)
 8000b76:	f043 0301 	orr.w	r3, r3, #1
 8000b7a:	6713      	str	r3, [r2, #112]	; 0x70
 8000b7c:	e00b      	b.n	8000b96 <HAL_RCC_OscConfig+0x32a>
 8000b7e:	4b66      	ldr	r3, [pc, #408]	; (8000d18 <HAL_RCC_OscConfig+0x4ac>)
 8000b80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000b82:	4a65      	ldr	r2, [pc, #404]	; (8000d18 <HAL_RCC_OscConfig+0x4ac>)
 8000b84:	f023 0301 	bic.w	r3, r3, #1
 8000b88:	6713      	str	r3, [r2, #112]	; 0x70
 8000b8a:	4b63      	ldr	r3, [pc, #396]	; (8000d18 <HAL_RCC_OscConfig+0x4ac>)
 8000b8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000b8e:	4a62      	ldr	r2, [pc, #392]	; (8000d18 <HAL_RCC_OscConfig+0x4ac>)
 8000b90:	f023 0304 	bic.w	r3, r3, #4
 8000b94:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	689b      	ldr	r3, [r3, #8]
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d015      	beq.n	8000bca <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000b9e:	f7ff fb59 	bl	8000254 <HAL_GetTick>
 8000ba2:	6378      	str	r0, [r7, #52]	; 0x34
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ba4:	e00a      	b.n	8000bbc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ba6:	f7ff fb55 	bl	8000254 <HAL_GetTick>
 8000baa:	4602      	mov	r2, r0
 8000bac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000bae:	1ad3      	subs	r3, r2, r3
 8000bb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8000bb4:	4293      	cmp	r3, r2
 8000bb6:	d901      	bls.n	8000bbc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8000bb8:	2303      	movs	r3, #3
 8000bba:	e0a7      	b.n	8000d0c <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000bbc:	4b56      	ldr	r3, [pc, #344]	; (8000d18 <HAL_RCC_OscConfig+0x4ac>)
 8000bbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000bc0:	f003 0302 	and.w	r3, r3, #2
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d0ee      	beq.n	8000ba6 <HAL_RCC_OscConfig+0x33a>
 8000bc8:	e014      	b.n	8000bf4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000bca:	f7ff fb43 	bl	8000254 <HAL_GetTick>
 8000bce:	6378      	str	r0, [r7, #52]	; 0x34
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000bd0:	e00a      	b.n	8000be8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000bd2:	f7ff fb3f 	bl	8000254 <HAL_GetTick>
 8000bd6:	4602      	mov	r2, r0
 8000bd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000bda:	1ad3      	subs	r3, r2, r3
 8000bdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8000be0:	4293      	cmp	r3, r2
 8000be2:	d901      	bls.n	8000be8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8000be4:	2303      	movs	r3, #3
 8000be6:	e091      	b.n	8000d0c <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000be8:	4b4b      	ldr	r3, [pc, #300]	; (8000d18 <HAL_RCC_OscConfig+0x4ac>)
 8000bea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000bec:	f003 0302 	and.w	r3, r3, #2
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d1ee      	bne.n	8000bd2 <HAL_RCC_OscConfig+0x366>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	699b      	ldr	r3, [r3, #24]
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	f000 8086 	beq.w	8000d0a <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000bfe:	4b46      	ldr	r3, [pc, #280]	; (8000d18 <HAL_RCC_OscConfig+0x4ac>)
 8000c00:	689b      	ldr	r3, [r3, #8]
 8000c02:	f003 030c 	and.w	r3, r3, #12
 8000c06:	2b08      	cmp	r3, #8
 8000c08:	d07d      	beq.n	8000d06 <HAL_RCC_OscConfig+0x49a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	699b      	ldr	r3, [r3, #24]
 8000c0e:	2b02      	cmp	r3, #2
 8000c10:	d162      	bne.n	8000cd8 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000c12:	4b42      	ldr	r3, [pc, #264]	; (8000d1c <HAL_RCC_OscConfig+0x4b0>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000c18:	f7ff fb1c 	bl	8000254 <HAL_GetTick>
 8000c1c:	6378      	str	r0, [r7, #52]	; 0x34
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000c1e:	e008      	b.n	8000c32 <HAL_RCC_OscConfig+0x3c6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000c20:	f7ff fb18 	bl	8000254 <HAL_GetTick>
 8000c24:	4602      	mov	r2, r0
 8000c26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c28:	1ad3      	subs	r3, r2, r3
 8000c2a:	2b02      	cmp	r3, #2
 8000c2c:	d901      	bls.n	8000c32 <HAL_RCC_OscConfig+0x3c6>
          {
            return HAL_TIMEOUT;
 8000c2e:	2303      	movs	r3, #3
 8000c30:	e06c      	b.n	8000d0c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000c32:	4b39      	ldr	r3, [pc, #228]	; (8000d18 <HAL_RCC_OscConfig+0x4ac>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d1f0      	bne.n	8000c20 <HAL_RCC_OscConfig+0x3b4>
          }
        }        

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	69da      	ldr	r2, [r3, #28]
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	6a1b      	ldr	r3, [r3, #32]
 8000c46:	431a      	orrs	r2, r3
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8000c4c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8000c50:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c52:	693b      	ldr	r3, [r7, #16]
 8000c54:	fa93 f3a3 	rbit	r3, r3
 8000c58:	60fb      	str	r3, [r7, #12]
  return(result);
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	fab3 f383 	clz	r3, r3
 8000c60:	fa01 f303 	lsl.w	r3, r1, r3
 8000c64:	431a      	orrs	r2, r3
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c6a:	085b      	lsrs	r3, r3, #1
 8000c6c:	1e59      	subs	r1, r3, #1
 8000c6e:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8000c72:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c74:	69bb      	ldr	r3, [r7, #24]
 8000c76:	fa93 f3a3 	rbit	r3, r3
 8000c7a:	617b      	str	r3, [r7, #20]
  return(result);
 8000c7c:	697b      	ldr	r3, [r7, #20]
 8000c7e:	fab3 f383 	clz	r3, r3
 8000c82:	fa01 f303 	lsl.w	r3, r1, r3
 8000c86:	431a      	orrs	r2, r3
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000c8c:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
 8000c90:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c92:	6a3b      	ldr	r3, [r7, #32]
 8000c94:	fa93 f3a3 	rbit	r3, r3
 8000c98:	61fb      	str	r3, [r7, #28]
  return(result);
 8000c9a:	69fb      	ldr	r3, [r7, #28]
 8000c9c:	fab3 f383 	clz	r3, r3
 8000ca0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ca4:	491c      	ldr	r1, [pc, #112]	; (8000d18 <HAL_RCC_OscConfig+0x4ac>)
 8000ca6:	4313      	orrs	r3, r2
 8000ca8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << POSITION_VAL(RCC_PLLCFGR_PLLN))             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << POSITION_VAL(RCC_PLLCFGR_PLLP)) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << POSITION_VAL(RCC_PLLCFGR_PLLQ))));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000caa:	4b1c      	ldr	r3, [pc, #112]	; (8000d1c <HAL_RCC_OscConfig+0x4b0>)
 8000cac:	2201      	movs	r2, #1
 8000cae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000cb0:	f7ff fad0 	bl	8000254 <HAL_GetTick>
 8000cb4:	6378      	str	r0, [r7, #52]	; 0x34
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000cb6:	e008      	b.n	8000cca <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000cb8:	f7ff facc 	bl	8000254 <HAL_GetTick>
 8000cbc:	4602      	mov	r2, r0
 8000cbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000cc0:	1ad3      	subs	r3, r2, r3
 8000cc2:	2b02      	cmp	r3, #2
 8000cc4:	d901      	bls.n	8000cca <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8000cc6:	2303      	movs	r3, #3
 8000cc8:	e020      	b.n	8000d0c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000cca:	4b13      	ldr	r3, [pc, #76]	; (8000d18 <HAL_RCC_OscConfig+0x4ac>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d0f0      	beq.n	8000cb8 <HAL_RCC_OscConfig+0x44c>
 8000cd6:	e018      	b.n	8000d0a <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000cd8:	4b10      	ldr	r3, [pc, #64]	; (8000d1c <HAL_RCC_OscConfig+0x4b0>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000cde:	f7ff fab9 	bl	8000254 <HAL_GetTick>
 8000ce2:	6378      	str	r0, [r7, #52]	; 0x34
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000ce4:	e008      	b.n	8000cf8 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000ce6:	f7ff fab5 	bl	8000254 <HAL_GetTick>
 8000cea:	4602      	mov	r2, r0
 8000cec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000cee:	1ad3      	subs	r3, r2, r3
 8000cf0:	2b02      	cmp	r3, #2
 8000cf2:	d901      	bls.n	8000cf8 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8000cf4:	2303      	movs	r3, #3
 8000cf6:	e009      	b.n	8000d0c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000cf8:	4b07      	ldr	r3, [pc, #28]	; (8000d18 <HAL_RCC_OscConfig+0x4ac>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d1f0      	bne.n	8000ce6 <HAL_RCC_OscConfig+0x47a>
 8000d04:	e001      	b.n	8000d0a <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8000d06:	2301      	movs	r3, #1
 8000d08:	e000      	b.n	8000d0c <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8000d0a:	2300      	movs	r3, #0
}
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	3738      	adds	r7, #56	; 0x38
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	40007000 	.word	0x40007000
 8000d18:	40023800 	.word	0x40023800
 8000d1c:	42470060 	.word	0x42470060

08000d20 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b086      	sub	sp, #24
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
 8000d28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;   
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	617b      	str	r3, [r7, #20]
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
    must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) and the supply voltage of the device. */
  
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000d2e:	4b81      	ldr	r3, [pc, #516]	; (8000f34 <HAL_RCC_ClockConfig+0x214>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	f003 030f 	and.w	r3, r3, #15
 8000d36:	683a      	ldr	r2, [r7, #0]
 8000d38:	429a      	cmp	r2, r3
 8000d3a:	d90c      	bls.n	8000d56 <HAL_RCC_ClockConfig+0x36>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000d3c:	4b7d      	ldr	r3, [pc, #500]	; (8000f34 <HAL_RCC_ClockConfig+0x214>)
 8000d3e:	683a      	ldr	r2, [r7, #0]
 8000d40:	b2d2      	uxtb	r2, r2
 8000d42:	701a      	strb	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000d44:	4b7b      	ldr	r3, [pc, #492]	; (8000f34 <HAL_RCC_ClockConfig+0x214>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	f003 030f 	and.w	r3, r3, #15
 8000d4c:	683a      	ldr	r2, [r7, #0]
 8000d4e:	429a      	cmp	r2, r3
 8000d50:	d001      	beq.n	8000d56 <HAL_RCC_ClockConfig+0x36>
    {
      return HAL_ERROR;
 8000d52:	2301      	movs	r3, #1
 8000d54:	e0ea      	b.n	8000f2c <HAL_RCC_ClockConfig+0x20c>
    }
  }
 
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	f003 0302 	and.w	r3, r3, #2
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d008      	beq.n	8000d74 <HAL_RCC_ClockConfig+0x54>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000d62:	4b75      	ldr	r3, [pc, #468]	; (8000f38 <HAL_RCC_ClockConfig+0x218>)
 8000d64:	689b      	ldr	r3, [r3, #8]
 8000d66:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	689b      	ldr	r3, [r3, #8]
 8000d6e:	4972      	ldr	r1, [pc, #456]	; (8000f38 <HAL_RCC_ClockConfig+0x218>)
 8000d70:	4313      	orrs	r3, r2
 8000d72:	608b      	str	r3, [r1, #8]
  }
  
  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	f003 0301 	and.w	r3, r3, #1
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	f000 8086 	beq.w	8000e8e <HAL_RCC_ClockConfig+0x16e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	685b      	ldr	r3, [r3, #4]
 8000d86:	2b01      	cmp	r3, #1
 8000d88:	d107      	bne.n	8000d9a <HAL_RCC_ClockConfig+0x7a>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d8a:	4b6b      	ldr	r3, [pc, #428]	; (8000f38 <HAL_RCC_ClockConfig+0x218>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d119      	bne.n	8000dca <HAL_RCC_ClockConfig+0xaa>
      {
        return HAL_ERROR;
 8000d96:	2301      	movs	r3, #1
 8000d98:	e0c8      	b.n	8000f2c <HAL_RCC_ClockConfig+0x20c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	685b      	ldr	r3, [r3, #4]
 8000d9e:	2b02      	cmp	r3, #2
 8000da0:	d003      	beq.n	8000daa <HAL_RCC_ClockConfig+0x8a>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 8000da6:	2b03      	cmp	r3, #3
 8000da8:	d107      	bne.n	8000dba <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000daa:	4b63      	ldr	r3, [pc, #396]	; (8000f38 <HAL_RCC_ClockConfig+0x218>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d109      	bne.n	8000dca <HAL_RCC_ClockConfig+0xaa>
      {
        return HAL_ERROR;
 8000db6:	2301      	movs	r3, #1
 8000db8:	e0b8      	b.n	8000f2c <HAL_RCC_ClockConfig+0x20c>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000dba:	4b5f      	ldr	r3, [pc, #380]	; (8000f38 <HAL_RCC_ClockConfig+0x218>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	f003 0302 	and.w	r3, r3, #2
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d101      	bne.n	8000dca <HAL_RCC_ClockConfig+0xaa>
      {
        return HAL_ERROR;
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	e0b0      	b.n	8000f2c <HAL_RCC_ClockConfig+0x20c>
      }
    }
    
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000dca:	4b5b      	ldr	r3, [pc, #364]	; (8000f38 <HAL_RCC_ClockConfig+0x218>)
 8000dcc:	689b      	ldr	r3, [r3, #8]
 8000dce:	f023 0203 	bic.w	r2, r3, #3
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	685b      	ldr	r3, [r3, #4]
 8000dd6:	4958      	ldr	r1, [pc, #352]	; (8000f38 <HAL_RCC_ClockConfig+0x218>)
 8000dd8:	4313      	orrs	r3, r2
 8000dda:	608b      	str	r3, [r1, #8]
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8000ddc:	f7ff fa3a 	bl	8000254 <HAL_GetTick>
 8000de0:	6178      	str	r0, [r7, #20]
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	685b      	ldr	r3, [r3, #4]
 8000de6:	2b01      	cmp	r3, #1
 8000de8:	d112      	bne.n	8000e10 <HAL_RCC_ClockConfig+0xf0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000dea:	e00a      	b.n	8000e02 <HAL_RCC_ClockConfig+0xe2>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000dec:	f7ff fa32 	bl	8000254 <HAL_GetTick>
 8000df0:	4602      	mov	r2, r0
 8000df2:	697b      	ldr	r3, [r7, #20]
 8000df4:	1ad3      	subs	r3, r2, r3
 8000df6:	f241 3288 	movw	r2, #5000	; 0x1388
 8000dfa:	4293      	cmp	r3, r2
 8000dfc:	d901      	bls.n	8000e02 <HAL_RCC_ClockConfig+0xe2>
        {
          return HAL_TIMEOUT;
 8000dfe:	2303      	movs	r3, #3
 8000e00:	e094      	b.n	8000f2c <HAL_RCC_ClockConfig+0x20c>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000e02:	4b4d      	ldr	r3, [pc, #308]	; (8000f38 <HAL_RCC_ClockConfig+0x218>)
 8000e04:	689b      	ldr	r3, [r3, #8]
 8000e06:	f003 030c 	and.w	r3, r3, #12
 8000e0a:	2b04      	cmp	r3, #4
 8000e0c:	d1ee      	bne.n	8000dec <HAL_RCC_ClockConfig+0xcc>
 8000e0e:	e03e      	b.n	8000e8e <HAL_RCC_ClockConfig+0x16e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	685b      	ldr	r3, [r3, #4]
 8000e14:	2b02      	cmp	r3, #2
 8000e16:	d112      	bne.n	8000e3e <HAL_RCC_ClockConfig+0x11e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000e18:	e00a      	b.n	8000e30 <HAL_RCC_ClockConfig+0x110>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000e1a:	f7ff fa1b 	bl	8000254 <HAL_GetTick>
 8000e1e:	4602      	mov	r2, r0
 8000e20:	697b      	ldr	r3, [r7, #20]
 8000e22:	1ad3      	subs	r3, r2, r3
 8000e24:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e28:	4293      	cmp	r3, r2
 8000e2a:	d901      	bls.n	8000e30 <HAL_RCC_ClockConfig+0x110>
        {
          return HAL_TIMEOUT;
 8000e2c:	2303      	movs	r3, #3
 8000e2e:	e07d      	b.n	8000f2c <HAL_RCC_ClockConfig+0x20c>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000e30:	4b41      	ldr	r3, [pc, #260]	; (8000f38 <HAL_RCC_ClockConfig+0x218>)
 8000e32:	689b      	ldr	r3, [r3, #8]
 8000e34:	f003 030c 	and.w	r3, r3, #12
 8000e38:	2b08      	cmp	r3, #8
 8000e3a:	d1ee      	bne.n	8000e1a <HAL_RCC_ClockConfig+0xfa>
 8000e3c:	e027      	b.n	8000e8e <HAL_RCC_ClockConfig+0x16e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK)
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	685b      	ldr	r3, [r3, #4]
 8000e42:	2b03      	cmp	r3, #3
 8000e44:	d11d      	bne.n	8000e82 <HAL_RCC_ClockConfig+0x162>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
 8000e46:	e00a      	b.n	8000e5e <HAL_RCC_ClockConfig+0x13e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000e48:	f7ff fa04 	bl	8000254 <HAL_GetTick>
 8000e4c:	4602      	mov	r2, r0
 8000e4e:	697b      	ldr	r3, [r7, #20]
 8000e50:	1ad3      	subs	r3, r2, r3
 8000e52:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e56:	4293      	cmp	r3, r2
 8000e58:	d901      	bls.n	8000e5e <HAL_RCC_ClockConfig+0x13e>
        {
          return HAL_TIMEOUT;
 8000e5a:	2303      	movs	r3, #3
 8000e5c:	e066      	b.n	8000f2c <HAL_RCC_ClockConfig+0x20c>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
 8000e5e:	4b36      	ldr	r3, [pc, #216]	; (8000f38 <HAL_RCC_ClockConfig+0x218>)
 8000e60:	689b      	ldr	r3, [r3, #8]
 8000e62:	f003 030c 	and.w	r3, r3, #12
 8000e66:	2b0c      	cmp	r3, #12
 8000e68:	d1ee      	bne.n	8000e48 <HAL_RCC_ClockConfig+0x128>
 8000e6a:	e010      	b.n	8000e8e <HAL_RCC_ClockConfig+0x16e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000e6c:	f7ff f9f2 	bl	8000254 <HAL_GetTick>
 8000e70:	4602      	mov	r2, r0
 8000e72:	697b      	ldr	r3, [r7, #20]
 8000e74:	1ad3      	subs	r3, r2, r3
 8000e76:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	d901      	bls.n	8000e82 <HAL_RCC_ClockConfig+0x162>
        {
          return HAL_TIMEOUT;
 8000e7e:	2303      	movs	r3, #3
 8000e80:	e054      	b.n	8000f2c <HAL_RCC_ClockConfig+0x20c>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000e82:	4b2d      	ldr	r3, [pc, #180]	; (8000f38 <HAL_RCC_ClockConfig+0x218>)
 8000e84:	689b      	ldr	r3, [r3, #8]
 8000e86:	f003 030c 	and.w	r3, r3, #12
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d1ee      	bne.n	8000e6c <HAL_RCC_ClockConfig+0x14c>
      }
    }
  }    
  
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000e8e:	4b29      	ldr	r3, [pc, #164]	; (8000f34 <HAL_RCC_ClockConfig+0x214>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	f003 030f 	and.w	r3, r3, #15
 8000e96:	683a      	ldr	r2, [r7, #0]
 8000e98:	429a      	cmp	r2, r3
 8000e9a:	d20c      	bcs.n	8000eb6 <HAL_RCC_ClockConfig+0x196>
  { 
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000e9c:	4b25      	ldr	r3, [pc, #148]	; (8000f34 <HAL_RCC_ClockConfig+0x214>)
 8000e9e:	683a      	ldr	r2, [r7, #0]
 8000ea0:	b2d2      	uxtb	r2, r2
 8000ea2:	701a      	strb	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000ea4:	4b23      	ldr	r3, [pc, #140]	; (8000f34 <HAL_RCC_ClockConfig+0x214>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	f003 030f 	and.w	r3, r3, #15
 8000eac:	683a      	ldr	r2, [r7, #0]
 8000eae:	429a      	cmp	r2, r3
 8000eb0:	d001      	beq.n	8000eb6 <HAL_RCC_ClockConfig+0x196>
    {
      return HAL_ERROR;
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	e03a      	b.n	8000f2c <HAL_RCC_ClockConfig+0x20c>
    }
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	f003 0304 	and.w	r3, r3, #4
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d008      	beq.n	8000ed4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000ec2:	4b1d      	ldr	r3, [pc, #116]	; (8000f38 <HAL_RCC_ClockConfig+0x218>)
 8000ec4:	689b      	ldr	r3, [r3, #8]
 8000ec6:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	68db      	ldr	r3, [r3, #12]
 8000ece:	491a      	ldr	r1, [pc, #104]	; (8000f38 <HAL_RCC_ClockConfig+0x218>)
 8000ed0:	4313      	orrs	r3, r2
 8000ed2:	608b      	str	r3, [r1, #8]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	f003 0308 	and.w	r3, r3, #8
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d009      	beq.n	8000ef4 <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000ee0:	4b15      	ldr	r3, [pc, #84]	; (8000f38 <HAL_RCC_ClockConfig+0x218>)
 8000ee2:	689b      	ldr	r3, [r3, #8]
 8000ee4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	691b      	ldr	r3, [r3, #16]
 8000eec:	00db      	lsls	r3, r3, #3
 8000eee:	4912      	ldr	r1, [pc, #72]	; (8000f38 <HAL_RCC_ClockConfig+0x218>)
 8000ef0:	4313      	orrs	r3, r2
 8000ef2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8000ef4:	f000 f826 	bl	8000f44 <HAL_RCC_GetSysClockFreq>
 8000ef8:	4601      	mov	r1, r0
 8000efa:	4b0f      	ldr	r3, [pc, #60]	; (8000f38 <HAL_RCC_ClockConfig+0x218>)
 8000efc:	689b      	ldr	r3, [r3, #8]
 8000efe:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8000f02:	23f0      	movs	r3, #240	; 0xf0
 8000f04:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f06:	693b      	ldr	r3, [r7, #16]
 8000f08:	fa93 f3a3 	rbit	r3, r3
 8000f0c:	60fb      	str	r3, [r7, #12]
  return(result);
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	fab3 f383 	clz	r3, r3
 8000f14:	fa22 f303 	lsr.w	r3, r2, r3
 8000f18:	4a08      	ldr	r2, [pc, #32]	; (8000f3c <HAL_RCC_ClockConfig+0x21c>)
 8000f1a:	5cd3      	ldrb	r3, [r2, r3]
 8000f1c:	fa21 f303 	lsr.w	r3, r1, r3
 8000f20:	4a07      	ldr	r2, [pc, #28]	; (8000f40 <HAL_RCC_ClockConfig+0x220>)
 8000f22:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8000f24:	200f      	movs	r0, #15
 8000f26:	f7ff f96b 	bl	8000200 <HAL_InitTick>
  
  return HAL_OK;
 8000f2a:	2300      	movs	r3, #0
}
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	3718      	adds	r7, #24
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	40023c00 	.word	0x40023c00
 8000f38:	40023800 	.word	0x40023800
 8000f3c:	0800158c 	.word	0x0800158c
 8000f40:	20000000 	.word	0x20000000

08000f44 <HAL_RCC_GetSysClockFreq>:
  *         
  *               
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b08b      	sub	sp, #44	; 0x2c
 8000f48:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	61fb      	str	r3, [r7, #28]
 8000f4e:	2300      	movs	r3, #0
 8000f50:	627b      	str	r3, [r7, #36]	; 0x24
 8000f52:	2300      	movs	r3, #0
 8000f54:	61bb      	str	r3, [r7, #24]
  uint32_t sysclockfreq = 0U;
 8000f56:	2300      	movs	r3, #0
 8000f58:	623b      	str	r3, [r7, #32]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000f5a:	4b36      	ldr	r3, [pc, #216]	; (8001034 <HAL_RCC_GetSysClockFreq+0xf0>)
 8000f5c:	689b      	ldr	r3, [r3, #8]
 8000f5e:	f003 030c 	and.w	r3, r3, #12
 8000f62:	2b04      	cmp	r3, #4
 8000f64:	d006      	beq.n	8000f74 <HAL_RCC_GetSysClockFreq+0x30>
 8000f66:	2b08      	cmp	r3, #8
 8000f68:	d007      	beq.n	8000f7a <HAL_RCC_GetSysClockFreq+0x36>
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d158      	bne.n	8001020 <HAL_RCC_GetSysClockFreq+0xdc>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8000f6e:	4b32      	ldr	r3, [pc, #200]	; (8001038 <HAL_RCC_GetSysClockFreq+0xf4>)
 8000f70:	623b      	str	r3, [r7, #32]
       break;
 8000f72:	e058      	b.n	8001026 <HAL_RCC_GetSysClockFreq+0xe2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8000f74:	4b31      	ldr	r3, [pc, #196]	; (800103c <HAL_RCC_GetSysClockFreq+0xf8>)
 8000f76:	623b      	str	r3, [r7, #32]
      break;
 8000f78:	e055      	b.n	8001026 <HAL_RCC_GetSysClockFreq+0xe2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000f7a:	4b2e      	ldr	r3, [pc, #184]	; (8001034 <HAL_RCC_GetSysClockFreq+0xf0>)
 8000f7c:	685b      	ldr	r3, [r3, #4]
 8000f7e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000f82:	61fb      	str	r3, [r7, #28]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000f84:	4b2b      	ldr	r3, [pc, #172]	; (8001034 <HAL_RCC_GetSysClockFreq+0xf0>)
 8000f86:	685b      	ldr	r3, [r3, #4]
 8000f88:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d017      	beq.n	8000fc0 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source */
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 8000f90:	4a2a      	ldr	r2, [pc, #168]	; (800103c <HAL_RCC_GetSysClockFreq+0xf8>)
 8000f92:	69fb      	ldr	r3, [r7, #28]
 8000f94:	fbb2 f2f3 	udiv	r2, r2, r3
 8000f98:	4b26      	ldr	r3, [pc, #152]	; (8001034 <HAL_RCC_GetSysClockFreq+0xf0>)
 8000f9a:	6859      	ldr	r1, [r3, #4]
 8000f9c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8000fa0:	400b      	ands	r3, r1
 8000fa2:	f647 71c0 	movw	r1, #32704	; 0x7fc0
 8000fa6:	6179      	str	r1, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fa8:	6979      	ldr	r1, [r7, #20]
 8000faa:	fa91 f1a1 	rbit	r1, r1
 8000fae:	6139      	str	r1, [r7, #16]
  return(result);
 8000fb0:	6939      	ldr	r1, [r7, #16]
 8000fb2:	fab1 f181 	clz	r1, r1
 8000fb6:	40cb      	lsrs	r3, r1
 8000fb8:	fb03 f302 	mul.w	r3, r3, r2
 8000fbc:	627b      	str	r3, [r7, #36]	; 0x24
 8000fbe:	e016      	b.n	8000fee <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
 8000fc0:	4a1d      	ldr	r2, [pc, #116]	; (8001038 <HAL_RCC_GetSysClockFreq+0xf4>)
 8000fc2:	69fb      	ldr	r3, [r7, #28]
 8000fc4:	fbb2 f2f3 	udiv	r2, r2, r3
 8000fc8:	4b1a      	ldr	r3, [pc, #104]	; (8001034 <HAL_RCC_GetSysClockFreq+0xf0>)
 8000fca:	6859      	ldr	r1, [r3, #4]
 8000fcc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8000fd0:	400b      	ands	r3, r1
 8000fd2:	f647 71c0 	movw	r1, #32704	; 0x7fc0
 8000fd6:	60f9      	str	r1, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fd8:	68f9      	ldr	r1, [r7, #12]
 8000fda:	fa91 f1a1 	rbit	r1, r1
 8000fde:	60b9      	str	r1, [r7, #8]
  return(result);
 8000fe0:	68b9      	ldr	r1, [r7, #8]
 8000fe2:	fab1 f181 	clz	r1, r1
 8000fe6:	40cb      	lsrs	r3, r1
 8000fe8:	fb03 f302 	mul.w	r3, r3, r2
 8000fec:	627b      	str	r3, [r7, #36]	; 0x24
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1U) *2U);
 8000fee:	4b11      	ldr	r3, [pc, #68]	; (8001034 <HAL_RCC_GetSysClockFreq+0xf0>)
 8000ff0:	685b      	ldr	r3, [r3, #4]
 8000ff2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8000ff6:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8000ffa:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	fa93 f3a3 	rbit	r3, r3
 8001002:	603b      	str	r3, [r7, #0]
  return(result);
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	fab3 f383 	clz	r3, r3
 800100a:	fa22 f303 	lsr.w	r3, r2, r3
 800100e:	3301      	adds	r3, #1
 8001010:	005b      	lsls	r3, r3, #1
 8001012:	61bb      	str	r3, [r7, #24]
      
      sysclockfreq = pllvco/pllp;
 8001014:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001016:	69bb      	ldr	r3, [r7, #24]
 8001018:	fbb2 f3f3 	udiv	r3, r2, r3
 800101c:	623b      	str	r3, [r7, #32]
      break;
 800101e:	e002      	b.n	8001026 <HAL_RCC_GetSysClockFreq+0xe2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001020:	4b05      	ldr	r3, [pc, #20]	; (8001038 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001022:	623b      	str	r3, [r7, #32]
      break;
 8001024:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001026:	6a3b      	ldr	r3, [r7, #32]
}
 8001028:	4618      	mov	r0, r3
 800102a:	372c      	adds	r7, #44	; 0x2c
 800102c:	46bd      	mov	sp, r7
 800102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001032:	4770      	bx	lr
 8001034:	40023800 	.word	0x40023800
 8001038:	00f42400 	.word	0x00f42400
 800103c:	007a1200 	.word	0x007a1200

08001040 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001044:	4b03      	ldr	r3, [pc, #12]	; (8001054 <HAL_RCC_GetHCLKFreq+0x14>)
 8001046:	681b      	ldr	r3, [r3, #0]
}
 8001048:	4618      	mov	r0, r3
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop
 8001054:	20000000 	.word	0x20000000

08001058 <main>:

// sensor.c dan sensor.h
uint8_t sensorDetected(void);

int main(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	af00      	add	r7, sp, #0
	HAL_Init();
 800105c:	f7ff f8b4 	bl	80001c8 <HAL_Init>
	SystemClock_Config();
 8001060:	f000 f8ac 	bl	80011bc <SystemClock_Config>
	MX_GPIO_Init();
 8001064:	f000 f910 	bl	8001288 <MX_GPIO_Init>
	while(1){
        counterShow();
 8001068:	f000 f818 	bl	800109c <counterShow>
        if(sensorDetected()){
 800106c:	f000 f87e 	bl	800116c <sensorDetected>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d0f8      	beq.n	8001068 <main+0x10>
        	CounterUpdate();
 8001076:	f000 f801 	bl	800107c <CounterUpdate>
        counterShow();
 800107a:	e7f5      	b.n	8001068 <main+0x10>

0800107c <CounterUpdate>:
        }
	}
}

void CounterUpdate(void){
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
	++count;
 8001080:	4b05      	ldr	r3, [pc, #20]	; (8001098 <CounterUpdate+0x1c>)
 8001082:	881b      	ldrh	r3, [r3, #0]
 8001084:	3301      	adds	r3, #1
 8001086:	b29a      	uxth	r2, r3
 8001088:	4b03      	ldr	r3, [pc, #12]	; (8001098 <CounterUpdate+0x1c>)
 800108a:	801a      	strh	r2, [r3, #0]
}
 800108c:	bf00      	nop
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop
 8001098:	20000024 	.word	0x20000024

0800109c <counterShow>:
void counterShow(void){
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0
	//Counter Show
	HAL_GPIO_WritePin(bar0_GPIO_Port,bar0_Pin,count & (1<<0));
 80010a0:	4b2d      	ldr	r3, [pc, #180]	; (8001158 <counterShow+0xbc>)
 80010a2:	881b      	ldrh	r3, [r3, #0]
 80010a4:	b2db      	uxtb	r3, r3
 80010a6:	f003 0301 	and.w	r3, r3, #1
 80010aa:	b2db      	uxtb	r3, r3
 80010ac:	461a      	mov	r2, r3
 80010ae:	2180      	movs	r1, #128	; 0x80
 80010b0:	482a      	ldr	r0, [pc, #168]	; (800115c <counterShow+0xc0>)
 80010b2:	f7ff fbbb 	bl	800082c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(bar1_GPIO_Port,bar1_Pin,count & (1<<1));
 80010b6:	4b28      	ldr	r3, [pc, #160]	; (8001158 <counterShow+0xbc>)
 80010b8:	881b      	ldrh	r3, [r3, #0]
 80010ba:	b2db      	uxtb	r3, r3
 80010bc:	f003 0302 	and.w	r3, r3, #2
 80010c0:	b2db      	uxtb	r3, r3
 80010c2:	461a      	mov	r2, r3
 80010c4:	2120      	movs	r1, #32
 80010c6:	4826      	ldr	r0, [pc, #152]	; (8001160 <counterShow+0xc4>)
 80010c8:	f7ff fbb0 	bl	800082c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(bar2_GPIO_Port,bar2_Pin,count & (1<<2));
 80010cc:	4b22      	ldr	r3, [pc, #136]	; (8001158 <counterShow+0xbc>)
 80010ce:	881b      	ldrh	r3, [r3, #0]
 80010d0:	b2db      	uxtb	r3, r3
 80010d2:	f003 0304 	and.w	r3, r3, #4
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	461a      	mov	r2, r3
 80010da:	2110      	movs	r1, #16
 80010dc:	4820      	ldr	r0, [pc, #128]	; (8001160 <counterShow+0xc4>)
 80010de:	f7ff fba5 	bl	800082c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(bar3_GPIO_Port,bar3_Pin,count & (1<<3));
 80010e2:	4b1d      	ldr	r3, [pc, #116]	; (8001158 <counterShow+0xbc>)
 80010e4:	881b      	ldrh	r3, [r3, #0]
 80010e6:	b2db      	uxtb	r3, r3
 80010e8:	f003 0308 	and.w	r3, r3, #8
 80010ec:	b2db      	uxtb	r3, r3
 80010ee:	461a      	mov	r2, r3
 80010f0:	2104      	movs	r1, #4
 80010f2:	481c      	ldr	r0, [pc, #112]	; (8001164 <counterShow+0xc8>)
 80010f4:	f7ff fb9a 	bl	800082c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(bar4_GPIO_Port,bar4_Pin,count & (1<<4));
 80010f8:	4b17      	ldr	r3, [pc, #92]	; (8001158 <counterShow+0xbc>)
 80010fa:	881b      	ldrh	r3, [r3, #0]
 80010fc:	b2db      	uxtb	r3, r3
 80010fe:	f003 0310 	and.w	r3, r3, #16
 8001102:	b2db      	uxtb	r3, r3
 8001104:	461a      	mov	r2, r3
 8001106:	2120      	movs	r1, #32
 8001108:	4816      	ldr	r0, [pc, #88]	; (8001164 <counterShow+0xc8>)
 800110a:	f7ff fb8f 	bl	800082c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(bar5_GPIO_Port,bar5_Pin,count & (1<<5));
 800110e:	4b12      	ldr	r3, [pc, #72]	; (8001158 <counterShow+0xbc>)
 8001110:	881b      	ldrh	r3, [r3, #0]
 8001112:	b2db      	uxtb	r3, r3
 8001114:	f003 0320 	and.w	r3, r3, #32
 8001118:	b2db      	uxtb	r3, r3
 800111a:	461a      	mov	r2, r3
 800111c:	2110      	movs	r1, #16
 800111e:	4811      	ldr	r0, [pc, #68]	; (8001164 <counterShow+0xc8>)
 8001120:	f7ff fb84 	bl	800082c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(bar6_GPIO_Port,bar6_Pin,count & (1<<6));
 8001124:	4b0c      	ldr	r3, [pc, #48]	; (8001158 <counterShow+0xbc>)
 8001126:	881b      	ldrh	r3, [r3, #0]
 8001128:	b2db      	uxtb	r3, r3
 800112a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800112e:	b2db      	uxtb	r3, r3
 8001130:	461a      	mov	r2, r3
 8001132:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001136:	480c      	ldr	r0, [pc, #48]	; (8001168 <counterShow+0xcc>)
 8001138:	f7ff fb78 	bl	800082c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(bar7_GPIO_Port,bar7_Pin,count & (1<<7));
 800113c:	4b06      	ldr	r3, [pc, #24]	; (8001158 <counterShow+0xbc>)
 800113e:	881b      	ldrh	r3, [r3, #0]
 8001140:	b2db      	uxtb	r3, r3
 8001142:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001146:	b2db      	uxtb	r3, r3
 8001148:	461a      	mov	r2, r3
 800114a:	2140      	movs	r1, #64	; 0x40
 800114c:	4805      	ldr	r0, [pc, #20]	; (8001164 <counterShow+0xc8>)
 800114e:	f7ff fb6d 	bl	800082c <HAL_GPIO_WritePin>
}
 8001152:	bf00      	nop
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	20000024 	.word	0x20000024
 800115c:	40020c00 	.word	0x40020c00
 8001160:	40020400 	.word	0x40020400
 8001164:	40021000 	.word	0x40021000
 8001168:	40020800 	.word	0x40020800

0800116c <sensorDetected>:

uint8_t sensorDetected(void){
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af00      	add	r7, sp, #0
	uint8_t FlagDetect=0;
 8001172:	2300      	movs	r3, #0
 8001174:	71fb      	strb	r3, [r7, #7]
	if(HAL_GPIO_ReadPin(pbLeft_GPIO_Port,pbLeft_Pin)== GPIO_PIN_RESET) {
 8001176:	2102      	movs	r1, #2
 8001178:	480f      	ldr	r0, [pc, #60]	; (80011b8 <sensorDetected+0x4c>)
 800117a:	f7ff fb3f 	bl	80007fc <HAL_GPIO_ReadPin>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d113      	bne.n	80011ac <sensorDetected+0x40>
		HAL_Delay(20);
 8001184:	2014      	movs	r0, #20
 8001186:	f7ff f871 	bl	800026c <HAL_Delay>
		if(HAL_GPIO_ReadPin(pbLeft_GPIO_Port,pbLeft_Pin)== GPIO_PIN_RESET) {
 800118a:	2102      	movs	r1, #2
 800118c:	480a      	ldr	r0, [pc, #40]	; (80011b8 <sensorDetected+0x4c>)
 800118e:	f7ff fb35 	bl	80007fc <HAL_GPIO_ReadPin>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d109      	bne.n	80011ac <sensorDetected+0x40>
			while(HAL_GPIO_ReadPin(pbLeft_GPIO_Port,pbLeft_Pin)== GPIO_PIN_RESET);
 8001198:	bf00      	nop
 800119a:	2102      	movs	r1, #2
 800119c:	4806      	ldr	r0, [pc, #24]	; (80011b8 <sensorDetected+0x4c>)
 800119e:	f7ff fb2d 	bl	80007fc <HAL_GPIO_ReadPin>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d0f8      	beq.n	800119a <sensorDetected+0x2e>
			FlagDetect=1;
 80011a8:	2301      	movs	r3, #1
 80011aa:	71fb      	strb	r3, [r7, #7]
		}
	}
	return FlagDetect;
 80011ac:	79fb      	ldrb	r3, [r7, #7]
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	3708      	adds	r7, #8
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	40020400 	.word	0x40020400

080011bc <SystemClock_Config>:
void SystemClock_Config(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b094      	sub	sp, #80	; 0x50
 80011c0:	af00      	add	r7, sp, #0

  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

  __HAL_RCC_PWR_CLK_ENABLE();
 80011c2:	2300      	movs	r3, #0
 80011c4:	60bb      	str	r3, [r7, #8]
 80011c6:	4b2d      	ldr	r3, [pc, #180]	; (800127c <SystemClock_Config+0xc0>)
 80011c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ca:	4a2c      	ldr	r2, [pc, #176]	; (800127c <SystemClock_Config+0xc0>)
 80011cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011d0:	6413      	str	r3, [r2, #64]	; 0x40
 80011d2:	4b2a      	ldr	r3, [pc, #168]	; (800127c <SystemClock_Config+0xc0>)
 80011d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011da:	60bb      	str	r3, [r7, #8]
 80011dc:	68bb      	ldr	r3, [r7, #8]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011de:	2300      	movs	r3, #0
 80011e0:	607b      	str	r3, [r7, #4]
 80011e2:	4b27      	ldr	r3, [pc, #156]	; (8001280 <SystemClock_Config+0xc4>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	4a26      	ldr	r2, [pc, #152]	; (8001280 <SystemClock_Config+0xc4>)
 80011e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011ec:	6013      	str	r3, [r2, #0]
 80011ee:	4b24      	ldr	r3, [pc, #144]	; (8001280 <SystemClock_Config+0xc4>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011f6:	607b      	str	r3, [r7, #4]
 80011f8:	687b      	ldr	r3, [r7, #4]

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80011fa:	2301      	movs	r3, #1
 80011fc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80011fe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001202:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001204:	2302      	movs	r3, #2
 8001206:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001208:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800120c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800120e:	2304      	movs	r3, #4
 8001210:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001212:	23a8      	movs	r3, #168	; 0xa8
 8001214:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001216:	2302      	movs	r3, #2
 8001218:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800121a:	2304      	movs	r3, #4
 800121c:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800121e:	f107 0320 	add.w	r3, r7, #32
 8001222:	4618      	mov	r0, r3
 8001224:	f7ff fb22 	bl	800086c <HAL_RCC_OscConfig>

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001228:	230f      	movs	r3, #15
 800122a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800122c:	2302      	movs	r3, #2
 800122e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001230:	2300      	movs	r3, #0
 8001232:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001234:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001238:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800123a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800123e:	61fb      	str	r3, [r7, #28]
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 8001240:	f107 030c 	add.w	r3, r7, #12
 8001244:	2105      	movs	r1, #5
 8001246:	4618      	mov	r0, r3
 8001248:	f7ff fd6a 	bl	8000d20 <HAL_RCC_ClockConfig>

  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800124c:	f7ff fef8 	bl	8001040 <HAL_RCC_GetHCLKFreq>
 8001250:	4602      	mov	r2, r0
 8001252:	4b0c      	ldr	r3, [pc, #48]	; (8001284 <SystemClock_Config+0xc8>)
 8001254:	fba3 2302 	umull	r2, r3, r3, r2
 8001258:	099b      	lsrs	r3, r3, #6
 800125a:	4618      	mov	r0, r3
 800125c:	f7ff f8fd 	bl	800045a <HAL_SYSTICK_Config>

  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001260:	2004      	movs	r0, #4
 8001262:	f7ff f907 	bl	8000474 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001266:	2200      	movs	r2, #0
 8001268:	2100      	movs	r1, #0
 800126a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800126e:	f7ff f8d8 	bl	8000422 <HAL_NVIC_SetPriority>
}
 8001272:	bf00      	nop
 8001274:	3750      	adds	r7, #80	; 0x50
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	40023800 	.word	0x40023800
 8001280:	40007000 	.word	0x40007000
 8001284:	10624dd3 	.word	0x10624dd3

08001288 <MX_GPIO_Init>:

void MX_GPIO_Init(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b08c      	sub	sp, #48	; 0x30
 800128c:	af00      	add	r7, sp, #0
	  GPIO_InitTypeDef GPIO_InitStruct;

	  /* GPIO Ports Clock Enable */
	  __HAL_RCC_GPIOE_CLK_ENABLE();
 800128e:	2300      	movs	r3, #0
 8001290:	61bb      	str	r3, [r7, #24]
 8001292:	4b72      	ldr	r3, [pc, #456]	; (800145c <MX_GPIO_Init+0x1d4>)
 8001294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001296:	4a71      	ldr	r2, [pc, #452]	; (800145c <MX_GPIO_Init+0x1d4>)
 8001298:	f043 0310 	orr.w	r3, r3, #16
 800129c:	6313      	str	r3, [r2, #48]	; 0x30
 800129e:	4b6f      	ldr	r3, [pc, #444]	; (800145c <MX_GPIO_Init+0x1d4>)
 80012a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a2:	f003 0310 	and.w	r3, r3, #16
 80012a6:	61bb      	str	r3, [r7, #24]
 80012a8:	69bb      	ldr	r3, [r7, #24]
	  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012aa:	2300      	movs	r3, #0
 80012ac:	617b      	str	r3, [r7, #20]
 80012ae:	4b6b      	ldr	r3, [pc, #428]	; (800145c <MX_GPIO_Init+0x1d4>)
 80012b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b2:	4a6a      	ldr	r2, [pc, #424]	; (800145c <MX_GPIO_Init+0x1d4>)
 80012b4:	f043 0304 	orr.w	r3, r3, #4
 80012b8:	6313      	str	r3, [r2, #48]	; 0x30
 80012ba:	4b68      	ldr	r3, [pc, #416]	; (800145c <MX_GPIO_Init+0x1d4>)
 80012bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012be:	f003 0304 	and.w	r3, r3, #4
 80012c2:	617b      	str	r3, [r7, #20]
 80012c4:	697b      	ldr	r3, [r7, #20]
	  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012c6:	2300      	movs	r3, #0
 80012c8:	613b      	str	r3, [r7, #16]
 80012ca:	4b64      	ldr	r3, [pc, #400]	; (800145c <MX_GPIO_Init+0x1d4>)
 80012cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ce:	4a63      	ldr	r2, [pc, #396]	; (800145c <MX_GPIO_Init+0x1d4>)
 80012d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012d4:	6313      	str	r3, [r2, #48]	; 0x30
 80012d6:	4b61      	ldr	r3, [pc, #388]	; (800145c <MX_GPIO_Init+0x1d4>)
 80012d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012de:	613b      	str	r3, [r7, #16]
 80012e0:	693b      	ldr	r3, [r7, #16]
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012e2:	2300      	movs	r3, #0
 80012e4:	60fb      	str	r3, [r7, #12]
 80012e6:	4b5d      	ldr	r3, [pc, #372]	; (800145c <MX_GPIO_Init+0x1d4>)
 80012e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ea:	4a5c      	ldr	r2, [pc, #368]	; (800145c <MX_GPIO_Init+0x1d4>)
 80012ec:	f043 0301 	orr.w	r3, r3, #1
 80012f0:	6313      	str	r3, [r2, #48]	; 0x30
 80012f2:	4b5a      	ldr	r3, [pc, #360]	; (800145c <MX_GPIO_Init+0x1d4>)
 80012f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f6:	f003 0301 	and.w	r3, r3, #1
 80012fa:	60fb      	str	r3, [r7, #12]
 80012fc:	68fb      	ldr	r3, [r7, #12]
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012fe:	2300      	movs	r3, #0
 8001300:	60bb      	str	r3, [r7, #8]
 8001302:	4b56      	ldr	r3, [pc, #344]	; (800145c <MX_GPIO_Init+0x1d4>)
 8001304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001306:	4a55      	ldr	r2, [pc, #340]	; (800145c <MX_GPIO_Init+0x1d4>)
 8001308:	f043 0302 	orr.w	r3, r3, #2
 800130c:	6313      	str	r3, [r2, #48]	; 0x30
 800130e:	4b53      	ldr	r3, [pc, #332]	; (800145c <MX_GPIO_Init+0x1d4>)
 8001310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001312:	f003 0302 	and.w	r3, r3, #2
 8001316:	60bb      	str	r3, [r7, #8]
 8001318:	68bb      	ldr	r3, [r7, #8]
	  __HAL_RCC_GPIOD_CLK_ENABLE();
 800131a:	2300      	movs	r3, #0
 800131c:	607b      	str	r3, [r7, #4]
 800131e:	4b4f      	ldr	r3, [pc, #316]	; (800145c <MX_GPIO_Init+0x1d4>)
 8001320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001322:	4a4e      	ldr	r2, [pc, #312]	; (800145c <MX_GPIO_Init+0x1d4>)
 8001324:	f043 0308 	orr.w	r3, r3, #8
 8001328:	6313      	str	r3, [r2, #48]	; 0x30
 800132a:	4b4c      	ldr	r3, [pc, #304]	; (800145c <MX_GPIO_Init+0x1d4>)
 800132c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132e:	f003 0308 	and.w	r3, r3, #8
 8001332:	607b      	str	r3, [r7, #4]
 8001334:	687b      	ldr	r3, [r7, #4]

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(GPIOE, bar3_Pin|bar5_Pin|bar4_Pin|bar7_Pin, GPIO_PIN_RESET);
 8001336:	2200      	movs	r2, #0
 8001338:	2174      	movs	r1, #116	; 0x74
 800133a:	4849      	ldr	r0, [pc, #292]	; (8001460 <MX_GPIO_Init+0x1d8>)
 800133c:	f7ff fa76 	bl	800082c <HAL_GPIO_WritePin>

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(GPIOC, bar6_Pin|bar9_Pin|bar8_Pin|buzzer_Pin, GPIO_PIN_RESET);
 8001340:	2200      	movs	r2, #0
 8001342:	f44f 4168 	mov.w	r1, #59392	; 0xe800
 8001346:	4847      	ldr	r0, [pc, #284]	; (8001464 <MX_GPIO_Init+0x1dc>)
 8001348:	f7ff fa70 	bl	800082c <HAL_GPIO_WritePin>

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(GPIOD, led0_Pin|led1_Pin|led2_Pin|led3_Pin
 800134c:	2200      	movs	r2, #0
 800134e:	f24f 0180 	movw	r1, #61568	; 0xf080
 8001352:	4845      	ldr	r0, [pc, #276]	; (8001468 <MX_GPIO_Init+0x1e0>)
 8001354:	f7ff fa6a 	bl	800082c <HAL_GPIO_WritePin>
	                          |bar0_Pin, GPIO_PIN_RESET);

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(GPIOB, bar2_Pin|bar1_Pin, GPIO_PIN_RESET);
 8001358:	2200      	movs	r2, #0
 800135a:	2130      	movs	r1, #48	; 0x30
 800135c:	4843      	ldr	r0, [pc, #268]	; (800146c <MX_GPIO_Init+0x1e4>)
 800135e:	f7ff fa65 	bl	800082c <HAL_GPIO_WritePin>

	  /*Configure GPIO pins : bar3_Pin bar5_Pin bar4_Pin bar7_Pin */
	  GPIO_InitStruct.Pin = bar3_Pin|bar5_Pin|bar4_Pin|bar7_Pin;
 8001362:	2374      	movs	r3, #116	; 0x74
 8001364:	61fb      	str	r3, [r7, #28]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001366:	2301      	movs	r3, #1
 8001368:	623b      	str	r3, [r7, #32]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136a:	2300      	movs	r3, #0
 800136c:	627b      	str	r3, [r7, #36]	; 0x24
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800136e:	2300      	movs	r3, #0
 8001370:	62bb      	str	r3, [r7, #40]	; 0x28
	  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001372:	f107 031c 	add.w	r3, r7, #28
 8001376:	4619      	mov	r1, r3
 8001378:	4839      	ldr	r0, [pc, #228]	; (8001460 <MX_GPIO_Init+0x1d8>)
 800137a:	f7ff f8a5 	bl	80004c8 <HAL_GPIO_Init>

	  /*Configure GPIO pins : bar6_Pin bar9_Pin bar8_Pin buzzer_Pin */
	  GPIO_InitStruct.Pin = bar6_Pin|bar9_Pin|bar8_Pin|buzzer_Pin;
 800137e:	f44f 4368 	mov.w	r3, #59392	; 0xe800
 8001382:	61fb      	str	r3, [r7, #28]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001384:	2301      	movs	r3, #1
 8001386:	623b      	str	r3, [r7, #32]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001388:	2300      	movs	r3, #0
 800138a:	627b      	str	r3, [r7, #36]	; 0x24
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800138c:	2300      	movs	r3, #0
 800138e:	62bb      	str	r3, [r7, #40]	; 0x28
	  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001390:	f107 031c 	add.w	r3, r7, #28
 8001394:	4619      	mov	r1, r3
 8001396:	4833      	ldr	r0, [pc, #204]	; (8001464 <MX_GPIO_Init+0x1dc>)
 8001398:	f7ff f896 	bl	80004c8 <HAL_GPIO_Init>

	  /*Configure GPIO pin : userButton_Pin */
	  GPIO_InitStruct.Pin = userButton_Pin;
 800139c:	2301      	movs	r3, #1
 800139e:	61fb      	str	r3, [r7, #28]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013a0:	2300      	movs	r3, #0
 80013a2:	623b      	str	r3, [r7, #32]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a4:	2300      	movs	r3, #0
 80013a6:	627b      	str	r3, [r7, #36]	; 0x24
	  HAL_GPIO_Init(userButton_GPIO_Port, &GPIO_InitStruct);
 80013a8:	f107 031c 	add.w	r3, r7, #28
 80013ac:	4619      	mov	r1, r3
 80013ae:	4830      	ldr	r0, [pc, #192]	; (8001470 <MX_GPIO_Init+0x1e8>)
 80013b0:	f7ff f88a 	bl	80004c8 <HAL_GPIO_Init>

	  /*Configure GPIO pins : pbUp_Pin pcRight_Pin */
	  GPIO_InitStruct.Pin = pbUp_Pin|pbRight_Pin;
 80013b4:	2330      	movs	r3, #48	; 0x30
 80013b6:	61fb      	str	r3, [r7, #28]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013b8:	2300      	movs	r3, #0
 80013ba:	623b      	str	r3, [r7, #32]
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013bc:	2301      	movs	r3, #1
 80013be:	627b      	str	r3, [r7, #36]	; 0x24
	  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013c0:	f107 031c 	add.w	r3, r7, #28
 80013c4:	4619      	mov	r1, r3
 80013c6:	4827      	ldr	r0, [pc, #156]	; (8001464 <MX_GPIO_Init+0x1dc>)
 80013c8:	f7ff f87e 	bl	80004c8 <HAL_GPIO_Init>

	  /*Configure GPIO pins : pbDown_Pin pbLeft_Pin dipSW3_Pin dipSW4_Pin */
	  GPIO_InitStruct.Pin = pbDown_Pin|pbLeft_Pin|dipSW3_Pin|dipSW4_Pin;
 80013cc:	f641 0303 	movw	r3, #6147	; 0x1803
 80013d0:	61fb      	str	r3, [r7, #28]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013d2:	2300      	movs	r3, #0
 80013d4:	623b      	str	r3, [r7, #32]
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013d6:	2301      	movs	r3, #1
 80013d8:	627b      	str	r3, [r7, #36]	; 0x24
	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013da:	f107 031c 	add.w	r3, r7, #28
 80013de:	4619      	mov	r1, r3
 80013e0:	4822      	ldr	r0, [pc, #136]	; (800146c <MX_GPIO_Init+0x1e4>)
 80013e2:	f7ff f871 	bl	80004c8 <HAL_GPIO_Init>

	  /*Configure GPIO pins : pbOk_Pin pbCancel_Pin */
	  GPIO_InitStruct.Pin = pbOk_Pin|pbCancel_Pin;
 80013e6:	f44f 4304 	mov.w	r3, #33792	; 0x8400
 80013ea:	61fb      	str	r3, [r7, #28]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013ec:	2300      	movs	r3, #0
 80013ee:	623b      	str	r3, [r7, #32]
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013f0:	2301      	movs	r3, #1
 80013f2:	627b      	str	r3, [r7, #36]	; 0x24
	  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80013f4:	f107 031c 	add.w	r3, r7, #28
 80013f8:	4619      	mov	r1, r3
 80013fa:	4819      	ldr	r0, [pc, #100]	; (8001460 <MX_GPIO_Init+0x1d8>)
 80013fc:	f7ff f864 	bl	80004c8 <HAL_GPIO_Init>

	  /*Configure GPIO pins : dipSW2_Pin dipSW1_Pin */
	  GPIO_InitStruct.Pin = dipSW2_Pin|dipSW1_Pin;
 8001400:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001404:	61fb      	str	r3, [r7, #28]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001406:	2300      	movs	r3, #0
 8001408:	623b      	str	r3, [r7, #32]
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800140a:	2301      	movs	r3, #1
 800140c:	627b      	str	r3, [r7, #36]	; 0x24
	  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800140e:	f107 031c 	add.w	r3, r7, #28
 8001412:	4619      	mov	r1, r3
 8001414:	4814      	ldr	r0, [pc, #80]	; (8001468 <MX_GPIO_Init+0x1e0>)
 8001416:	f7ff f857 	bl	80004c8 <HAL_GPIO_Init>

	  /*Configure GPIO pins : led0_Pin led1_Pin led2_Pin led3_Pin
	                           bar0_Pin */
	  GPIO_InitStruct.Pin = led0_Pin|led1_Pin|led2_Pin|led3_Pin
 800141a:	f24f 0380 	movw	r3, #61568	; 0xf080
 800141e:	61fb      	str	r3, [r7, #28]
	                          |bar0_Pin;
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001420:	2301      	movs	r3, #1
 8001422:	623b      	str	r3, [r7, #32]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001424:	2300      	movs	r3, #0
 8001426:	627b      	str	r3, [r7, #36]	; 0x24
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001428:	2300      	movs	r3, #0
 800142a:	62bb      	str	r3, [r7, #40]	; 0x28
	  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800142c:	f107 031c 	add.w	r3, r7, #28
 8001430:	4619      	mov	r1, r3
 8001432:	480d      	ldr	r0, [pc, #52]	; (8001468 <MX_GPIO_Init+0x1e0>)
 8001434:	f7ff f848 	bl	80004c8 <HAL_GPIO_Init>

	  /*Configure GPIO pins : bar2_Pin bar1_Pin */
	  GPIO_InitStruct.Pin = bar2_Pin|bar1_Pin;
 8001438:	2330      	movs	r3, #48	; 0x30
 800143a:	61fb      	str	r3, [r7, #28]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800143c:	2301      	movs	r3, #1
 800143e:	623b      	str	r3, [r7, #32]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001440:	2300      	movs	r3, #0
 8001442:	627b      	str	r3, [r7, #36]	; 0x24
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001444:	2300      	movs	r3, #0
 8001446:	62bb      	str	r3, [r7, #40]	; 0x28
	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001448:	f107 031c 	add.w	r3, r7, #28
 800144c:	4619      	mov	r1, r3
 800144e:	4807      	ldr	r0, [pc, #28]	; (800146c <MX_GPIO_Init+0x1e4>)
 8001450:	f7ff f83a 	bl	80004c8 <HAL_GPIO_Init>
}
 8001454:	bf00      	nop
 8001456:	3730      	adds	r7, #48	; 0x30
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}
 800145c:	40023800 	.word	0x40023800
 8001460:	40021000 	.word	0x40021000
 8001464:	40020800 	.word	0x40020800
 8001468:	40020c00 	.word	0x40020c00
 800146c:	40020400 	.word	0x40020400
 8001470:	40020000 	.word	0x40020000

08001474 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler, but only if no RTOS defines it.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0
	HAL_IncTick();
 8001478:	f7fe fede 	bl	8000238 <HAL_IncTick>
	HAL_SYSTICK_IRQHandler();
 800147c:	f7ff f816 	bl	80004ac <HAL_SYSTICK_IRQHandler>
#ifdef USE_RTOS_SYSTICK
	osSystickHandler();
#endif
}
 8001480:	bf00      	nop
 8001482:	bd80      	pop	{r7, pc}

08001484 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001488:	4b16      	ldr	r3, [pc, #88]	; (80014e4 <SystemInit+0x60>)
 800148a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800148e:	4a15      	ldr	r2, [pc, #84]	; (80014e4 <SystemInit+0x60>)
 8001490:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001494:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001498:	4b13      	ldr	r3, [pc, #76]	; (80014e8 <SystemInit+0x64>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a12      	ldr	r2, [pc, #72]	; (80014e8 <SystemInit+0x64>)
 800149e:	f043 0301 	orr.w	r3, r3, #1
 80014a2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80014a4:	4b10      	ldr	r3, [pc, #64]	; (80014e8 <SystemInit+0x64>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80014aa:	4b0f      	ldr	r3, [pc, #60]	; (80014e8 <SystemInit+0x64>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	4a0e      	ldr	r2, [pc, #56]	; (80014e8 <SystemInit+0x64>)
 80014b0:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80014b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014b8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80014ba:	4b0b      	ldr	r3, [pc, #44]	; (80014e8 <SystemInit+0x64>)
 80014bc:	4a0b      	ldr	r2, [pc, #44]	; (80014ec <SystemInit+0x68>)
 80014be:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80014c0:	4b09      	ldr	r3, [pc, #36]	; (80014e8 <SystemInit+0x64>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a08      	ldr	r2, [pc, #32]	; (80014e8 <SystemInit+0x64>)
 80014c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014ca:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80014cc:	4b06      	ldr	r3, [pc, #24]	; (80014e8 <SystemInit+0x64>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80014d2:	4b04      	ldr	r3, [pc, #16]	; (80014e4 <SystemInit+0x60>)
 80014d4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80014d8:	609a      	str	r2, [r3, #8]
#endif
}
 80014da:	bf00      	nop
 80014dc:	46bd      	mov	sp, r7
 80014de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e2:	4770      	bx	lr
 80014e4:	e000ed00 	.word	0xe000ed00
 80014e8:	40023800 	.word	0x40023800
 80014ec:	24003010 	.word	0x24003010

080014f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80014f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001528 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80014f4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80014f6:	e003      	b.n	8001500 <LoopCopyDataInit>

080014f8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80014f8:	4b0c      	ldr	r3, [pc, #48]	; (800152c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80014fa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80014fc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80014fe:	3104      	adds	r1, #4

08001500 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001500:	480b      	ldr	r0, [pc, #44]	; (8001530 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001502:	4b0c      	ldr	r3, [pc, #48]	; (8001534 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001504:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001506:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001508:	d3f6      	bcc.n	80014f8 <CopyDataInit>
  ldr  r2, =_sbss
 800150a:	4a0b      	ldr	r2, [pc, #44]	; (8001538 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800150c:	e002      	b.n	8001514 <LoopFillZerobss>

0800150e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800150e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001510:	f842 3b04 	str.w	r3, [r2], #4

08001514 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001514:	4b09      	ldr	r3, [pc, #36]	; (800153c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001516:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001518:	d3f9      	bcc.n	800150e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800151a:	f7ff ffb3 	bl	8001484 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800151e:	f000 f811 	bl	8001544 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001522:	f7ff fd99 	bl	8001058 <main>
  bx  lr    
 8001526:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001528:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800152c:	080015c4 	.word	0x080015c4
  ldr  r0, =_sdata
 8001530:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001534:	20000004 	.word	0x20000004
  ldr  r2, =_sbss
 8001538:	20000004 	.word	0x20000004
  ldr  r3, = _ebss
 800153c:	20000068 	.word	0x20000068

08001540 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001540:	e7fe      	b.n	8001540 <ADC_IRQHandler>
	...

08001544 <__libc_init_array>:
 8001544:	b570      	push	{r4, r5, r6, lr}
 8001546:	4e0d      	ldr	r6, [pc, #52]	; (800157c <__libc_init_array+0x38>)
 8001548:	4c0d      	ldr	r4, [pc, #52]	; (8001580 <__libc_init_array+0x3c>)
 800154a:	1ba4      	subs	r4, r4, r6
 800154c:	10a4      	asrs	r4, r4, #2
 800154e:	2500      	movs	r5, #0
 8001550:	42a5      	cmp	r5, r4
 8001552:	d109      	bne.n	8001568 <__libc_init_array+0x24>
 8001554:	4e0b      	ldr	r6, [pc, #44]	; (8001584 <__libc_init_array+0x40>)
 8001556:	4c0c      	ldr	r4, [pc, #48]	; (8001588 <__libc_init_array+0x44>)
 8001558:	f000 f824 	bl	80015a4 <_init>
 800155c:	1ba4      	subs	r4, r4, r6
 800155e:	10a4      	asrs	r4, r4, #2
 8001560:	2500      	movs	r5, #0
 8001562:	42a5      	cmp	r5, r4
 8001564:	d105      	bne.n	8001572 <__libc_init_array+0x2e>
 8001566:	bd70      	pop	{r4, r5, r6, pc}
 8001568:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800156c:	4798      	blx	r3
 800156e:	3501      	adds	r5, #1
 8001570:	e7ee      	b.n	8001550 <__libc_init_array+0xc>
 8001572:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001576:	4798      	blx	r3
 8001578:	3501      	adds	r5, #1
 800157a:	e7f2      	b.n	8001562 <__libc_init_array+0x1e>
 800157c:	080015bc 	.word	0x080015bc
 8001580:	080015bc 	.word	0x080015bc
 8001584:	080015bc 	.word	0x080015bc
 8001588:	080015c0 	.word	0x080015c0

0800158c <AHBPrescTable>:
	...
 8001594:	04030201 09080706                       ........

0800159c <APBPrescTable>:
 800159c:	00000000 04030201                       ........

080015a4 <_init>:
 80015a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80015a6:	bf00      	nop
 80015a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80015aa:	bc08      	pop	{r3}
 80015ac:	469e      	mov	lr, r3
 80015ae:	4770      	bx	lr

080015b0 <_fini>:
 80015b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80015b2:	bf00      	nop
 80015b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80015b6:	bc08      	pop	{r3}
 80015b8:	469e      	mov	lr, r3
 80015ba:	4770      	bx	lr
